(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={"styles":{"composer":".composer {\n  line-height: 2;\n  font-size: 1rem;\n}\n\n$toolbar-color: hsl( 210, 15%, 40% );\n$toolbar-children-color: hsl( 210, 85%, 40% );\n$toolbar-empty-color: hsl( 210, 10%, 90% );\n$main-color: hsl( 210, 5%, 95% );\n$children-color: hsl( 210, 95%, 95% );\n$action-color: hsl(210, 85%, 60% );\n$action-delete-color: hsl( 0, 83%, 50% );\n\n.composer-node__toolbar {\n  min-height: 3rem;\n\n  color: hsl( 210, 10%, 95% );\n  @include colorize-el( $toolbar-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node__title {\n  line-height: 3;\n  padding: 0 1rem;\n}\n\n.composer-node__children > .composer-node__toolbar {\n  @include colorize-el( $toolbar-children-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node--empty > .composer-node__toolbar {\n  color: hsl( 210, 85%, 15% );\n  @include colorize-el( $toolbar-empty-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node:not( [data-depth=\"0\"] ) > .composer-node__toolbar {\n  cursor: move;\n}\n\n.composer-node__view {\n  margin-bottom: 0.5rem;\n  overflow: hidden;\n  padding: 0.5rem;\n\n  color: #111;\n  background: #fff;\n  box-shadow: inset $tiny-shadow;\n}\n\n.composer-node__view:last-child {\n  margin-bottom: 0;\n}\n\n.composer-node__main {\n  padding: 0.75rem;\n  margin: 0.25rem;\n  margin-top: 0;\n\n  @include colorize-el-background( $main-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node--collapsed > .composer-node__main,\n.composer-node__children--collapsed > .composer-node__main {\n  height: 0;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  overflow: hidden;\n}\n\n.composer-node__children {\n  overflow: hidden;\n\n  @include colorize-el-background( $children-color );\n  box-shadow: inset $medium-shadow;\n}\n\n.composer-node__children > ul {\n  margin: 0;\n  padding: 0.5rem;\n  list-style: none;\n}\n\n.composer-node__children--collapsed > ul {\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\n.composer-node__children > ul > li {\n  margin: 0;\n  padding: 0;\n}\n\n.composer-node__actions {\n  display: block;\n  float: right;\n}\n\n.composer-node__actions > li {\n  display: block;\n  float: left;\n}\n\n.composer-node__action {\n  display: block;\n  padding: 0;\n  font-size: 1rem;\n  line-height: 1.875rem;\n  width: 1.875rem;\n  margin: 0.5rem 0;\n  text-align: center;\n  cursor: default;\n\n  color: hsl( 210, 5%, 95% );\n  @include colorize-el( $action-color );\n  box-shadow: $small-shadow;\n}\n\n.composer-node__action--disabled {\n  opacity: 0.5;\n}\n\n.composer-node__actions > li:last-child .composer-node__action {\n  margin-right: 0.5rem;\n}\n\n.composer-node__delete {\n  color: hsl( 0, 5%, 95% );\n  @include colorize-el( $action-delete-color );\n  box-shadow: $small-shadow;\n}\n\n","document":"* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-family: sans-serif;\n}\n\nbody {\n  background: #fff;\n  color: #000;\n  padding: 1rem;\n}\n\n.gu-unselectable {\n  list-style: none;\n}\n\n.gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n\n.gu-hide {\n  display: none !important;\n}\n\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n\n.gu-transit {\n  opacity: 0.2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n\n.ratio {\n  width: 4rem;\n  text-align: center;\n  position: relative;\n}\n\n.ratio .shim {\n  padding-bottom: 100%;\n}\n\n.ratio .viewport {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n$lighten-hue: 40deg;\n$darken-hue: 210deg;\n\n$adjust-hue: 20%;\n$adjust-saturation: 5%;\n$adjust-lightness: 5%;\n\n$adjust-hue-gradient-highlight: $adjust-hue / 2;\n$adjust-saturation-gradient-highlight: $adjust-saturation / 2;\n$adjust-lightness-gradient-highlight: $adjust-lightness / 2;\n\n@function shift-hue( $from-hue, $to-hue, $amount ){\n  $from-color: hsl( $from-hue, 100%, 50% );\n  $to-color: hsl( $to-hue, 100%, 50% );\n  $mixed: mix( $to-color, $from-color, $amount );\n  $new-hue: hue( $mixed );\n\n  @return $new-hue;\n}\n\n@function advanced-lighten( $from-color, $hue-amount, $saturation-amount, $lightness-amount ){\n  $hue: hue( $from-color );\n  $new-hue: shift-hue( $hue, $lighten-hue, $hue-amount );\n\n  $light-and-saturation: lighten(\n    desaturate(\n      $from-color,\n      $saturation-amount\n    ),\n    $lightness-amount\n  );\n\n  @return change-color( $light-and-saturation, $hue: $new-hue );\n}\n\n@function advanced-darken( $from-color, $hue-amount, $saturation-amount, $lightness-amount ){\n  $hue: hue( $from-color );\n  $new-hue: shift-hue( $hue, $darken-hue, $hue-amount );\n\n  $light-and-saturation: darken(\n    saturate(\n      $from-color,\n      $saturation-amount\n    ),\n    $lightness-amount\n  );\n\n  @return change-color( $light-and-saturation, $hue: $new-hue );\n}\n\n@mixin colorize-el-background( $base-color ){\n  $gradient-highlight: advanced-lighten(\n    $base-color,\n    $adjust-hue-gradient-highlight,\n    $adjust-lightness-gradient-highlight,\n    $adjust-saturation-gradient-highlight\n  );\n  $gradient-base: $base-color;\n  $gradient-shadow: advanced-darken(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  background: $base-color;\n  background: linear-gradient(\n    to bottom,\n    $gradient-highlight,\n    $gradient-base,\n    $gradient-shadow\n  );\n}\n\n@mixin colorize-el( $base-color ){\n  $gradient-shadow: advanced-darken(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  $border-highlight: advanced-lighten(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n  $border-shadow: advanced-darken(\n    $gradient-shadow,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  $text-shadow: advanced-darken(\n    $border-shadow,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  @include colorize-el-background( $base-color );\n  border: 0.0625rem solid $border-highlight;\n  border-bottom: 0.0625rem solid $border-shadow;\n  border-right: 0.0625rem solid $border-shadow;\n  text-shadow: 0.0625rem 0.0625rem 0 $text-shadow;\n}\n\n$large-shadow: 0.25rem 0.25rem 1rem rgba( 0, 0, 0, 0.25 );\n$medium-shadow: 0.125rem 0.125rem 0.5rem rgba( 0, 0, 0, 0.25 );\n$small-shadow: 0.0625rem 0.0625rem 0.25rem rgba( 0, 0, 0, 0.25 );\n$tiny-shadow: 0.03125rem 0.03125rem 0.125rem rgba( 0, 0, 0, 0.25 );\n\n$progress-width: 20rem;\n$progress-height: 4rem;\n$progress-padding: 1rem;\n\n$progress-color: hsl( 210, 5%, 95% );\n$progress-bar-color: hsl( 150, 85%, 40% );\n\n.progress {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  width: $progress-width;\n  height: $progress-height;\n  margin-left: $progress-width / -2;\n  margin-top: $progress-height / -2;\n  padding: $progress-padding;\n\n  @include colorize-el( $progress-color );\n  box-shadow: $large-shadow;\n}\n\n.progress > progress {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n\n  width: $progress-width - $progress-padding * 2;\n  height: $progress-height - $progress-padding * 2;\n\n  border: none;\n  background: #fff;\n  color: $progress-bar-color;\n  box-shadow: inset $tiny-shadow;\n}\n\n.progress > progress::-webkit-progress-bar {\n  border: none;\n  background: #fff;\n  box-shadow: inset $tiny-shadow;\n}\n\n.progress > progress::-webkit-progress-value {\n  @include colorize-el( $progress-bar-color );\n}\n\n.progress > progress::-moz-progress-bar {\n  @include colorize-el( $progress-bar-color );\n}\n\n.progress--hidden {\n  display: none;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba( 255, 255, 255, 0.5 );\n}\n\n.modal--hidden {\n  display: none;\n}\n","toolbar":"$toolbar-group-color: hsl( 210, 15%, 40% );\n$toolbar-group-collapsed-color: hsl( 210, 15%, 60% );\n$toolbar-group-children-color: hsl( 210, 5%, 95% );\n$toolbar-button-color: hsl(210, 85%, 60% );\n\n.toolbar {\n  display: flex;\n  flex-direction: row;\n\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  max-width: 100%;\n  overflow-x: auto;\n}\n\n.toolbar-group {\n  /*\n  display: flex;\n  flex-direction: row;\n  */\n  display: inline-block;\n\n  padding: 0.25rem;\n\n  color: #fff;\n  @include colorize-el( $toolbar-group-color );\n}\n\n.toolbar-group--collapsed {\n  @include colorize-el( $toolbar-group-collapsed-color );\n}\n\n.toolbar-group > header {\n  //display: flex;\n  display: block;\n\n  padding-right: 0.25rem;\n  align-items: center;\n}\n\n.toolbar-group[data-depth=\"0\"] > header {\n  display: none;\n}\n\n.toolbar-group__children {\n  display: flex;\n  flex-direction: row;\n  padding: 0.25rem;\n\n  @include colorize-el( $toolbar-group-children-color );\n}\n\n.toolbar-group--collapsed > .toolbar-group__children {\n  display: none;\n}\n\n.toolbar-group__children > ul {\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n}\n\n.toolbar-group__children > ul > li {\n  display: flex;\n  flex-direction: row;\n  margin-right: 0.25rem;\n}\n\n.toolbar-group__children > ul > li:last-child {\n  margin-right: 0;\n}\n\n.toolbar-button {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  padding: 0.5rem;\n\n  @include colorize-el( $toolbar-button-color );\n}\n"},"templates":{"composer":{"value":{"nodeType":"documentFragment","_id":"documentfragment-a014d4011afabdcd903aca16cdbabd92"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer"},"_id":"element-95da49b17549e2009c0492950ecb0355"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-09d9ebb1e64d67204081f7c173ca92cc"},"children":[]}]},"composer-node":{"value":{"nodeType":"documentFragment","_id":"documentfragment-ad2afa4c8cb93797984614c3e5264c2a"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node","data-tag":"nodeTag"},"_id":"element-2b5627104c7279d0685027bec9c23af9"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-acd7a06bb2c780ebee8ff05f9a6dc448"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{"class":"composer-node__toolbar"},"_id":"element-09d40b1dfbba856fb813f9aba100dd77"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-5a84283ce746e32fe88928f2f63dc29d"},"children":[]},{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__title","data-text":"title"},"_id":"element-96d067dcaadd38707aa2bfaf41ca0ace"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-4801c92ec2dd9dd5d82cbb62d75302a3"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"class":"composer-node__actions"},"_id":"element-58d1dfd4def5bde89138da65045826ee"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-897aae1bad1a9187ea46f4ca3b457100"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-0cea61c92a111e418f9a2a9fde3a13c9"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__delete"},"_id":"element-41a100443c581fd4678ba8730b53421f"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-trash fa-lg"},"_id":"element-6d92d8482a78e009a2cf7030d24b79d2"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-5439cac369dd5f0d540654f98732e7c7"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-2b46a846333bcb9fea9fc48d8a6a61db"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n\r\n  ","_id":"text-34ba551f047410a3549d681355a1893e"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__main"},"_id":"element-53efae921d5bc63641729658528fc053"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-976fe66f7685df4e47d2803a446f0d5c"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__view"},"_id":"element-b78c4adeac8434e772a352defb2446b0"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-3ff3a080ead256e81d31df3b6519fe8b"},"children":[]},{"value":{"nodeType":"element","tagName":"code","attributes":{"data-html":"preview"},"_id":"element-5a86297effeca05a1a43e4d391adf85b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-dbf789624268464fd89586556107270d"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n\r\n    ","_id":"text-ed94ee7fd97c95de797b1d8d5c4df3df"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-not":"isEmpty"},"_id":"element-0c709f2f524e78a428edf188161d277d"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-88a22dd54ecca5de344a016bf82b4e6c"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__children","data-tag":"childWrapperTag"},"_id":"element-76fa31295587284723974235d334fc1d"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-0f5ed3fcde377e4bf062058e2e5d8422"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{"class":"composer-node__toolbar"},"_id":"element-ed8ddc5c82a2b8fd68a5cc5dafa71bbf"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-1e8d8a93df32c68b72f52032f67b25d0"},"children":[]},{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__title","data-text":"childrenTitle"},"_id":"element-e54752b5730dc52467e0b44bb22e8856"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-795a41cedacffc80a9d65177a9023c4b"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"class":"composer-node__actions"},"_id":"element-80b753ad2ca34a8fe36e6bb1f1bd6944"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n            ","_id":"text-4ad7d2ec1ac21f103b9af1b62760decd"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-37c7972ebdf288290c6d1d763bc3dc7d"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__collapse-children"},"_id":"element-8919a6ae6d9117e4cbee16754a85b1f1"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-minus-square fa-lg"},"_id":"element-a9a0d754fb6fbd376419ef8b0d44691d"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n            ","_id":"text-8e75b140d347a983295a1bdbb4924636"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-c936924ec846ea9907e1adc69a2afc44"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__expand-children"},"_id":"element-fa034cc7bbbd5bbc0f354826473a6bc4"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-plus-square fa-lg"},"_id":"element-a7ce799268d28e72d3f1a4cca2422bfb"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-2eeb16262ab48063d06c3b91bb646898"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-80e26e207ec7a54391a55b8006a3288c"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-6ecd44bf6dc2b8131d343ad68ff8bee1"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"data-dragsource":"composer"},"_id":"element-7beae3665c25b745c7d017d0005ab362"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-de4514747600979bbe57999cdf8cbc73"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-e08c6acf59114f162216356f1ae545ab"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-3310a173abe6b8a7c90d8ccf1cb6565d"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-f90e36e3d7eddd86ae4c6a6464f90c0c"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-4bbbf8236dcc8af9e0b240fd68d6a593"},"children":[]}]},"document":{"value":{"nodeType":"documentFragment","_id":"documentfragment-b9e006aa718a3c8118961b3cbf96ce65"},"children":[{"value":{"nodeType":"documentType","_id":"documentType-ea72d10457017d5bb42e4510bc2938ea","name":"html","publicId":"","systemId":""},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-b4c5287bca741115dd4b139e6ef4ec1f"},"children":[]},{"value":{"nodeType":"element","tagName":"html","attributes":{"class":"no-js","lang":"en"},"_id":"element-d9adba6a8066504422708c42f3b83a62"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-54669acc90a7dc7fbfe060a668e0585a"},"children":[]},{"value":{"nodeType":"element","tagName":"head","attributes":{},"_id":"element-f009ce7381a53b3ff1549883ccbb884c"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-285a106b5a98e31db0a780a4bd7cc774"},"children":[]},{"value":{"nodeType":"element","tagName":"meta","attributes":{"charset":"utf-8"},"_id":"element-2598e662f171a3fd446445bd9724bdf9"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-9ae9af1ddf5b3e862c663ffc0fbfa787"},"children":[]},{"value":{"nodeType":"element","tagName":"meta","attributes":{"name":"viewport","content":"width=device-width, initial-scale=1.0"},"_id":"element-43a05822804ffe831fdb19d04be0fe64"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-e5d2da2f9c2d489468f055fdf6a24e5c"},"children":[]},{"value":{"nodeType":"element","tagName":"title","attributes":{"data-text":"documentTitle"},"_id":"element-b601431e99d8c5e8e760bd2182ac9ba9"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-b27c78fcf367729e8e43e3a2001af5c2"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"headStyles"},"_id":"element-e2fc88a9ede569ccb4d5c209eadf3b90"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-707661ac46b8900c0d5864cb56420ed1"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"style"},"_id":"element-fa50fc1fe243c1295561d2f17708f8a4"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-95c282bb1f961519a5dfaa63771f4bc3"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-086b5cb61c6f15d3dff03e801d901a75"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"headScripts"},"_id":"element-2856eff25ac5121d3c65f120351965bd"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-c2c5194609142820d973a8cefeefd917"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"script"},"_id":"element-e34e8b9a77964bace5c1874080109e4c"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-f2b9f25131863c596410bbac70b6f627"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-b65d785fe0fe9a1202690c4fce4fbfea"},"children":[]}]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-2af478b94890406f2d7cefd5a66b7866"},"children":[]},{"value":{"nodeType":"element","tagName":"body","attributes":{},"_id":"element-699e4c9a095113baf7f7de661988d9a9"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-1514bcdc52fbac7a90a7c5b2404df617"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"modal modal--hidden"},"_id":"element-5c2c37cf59b20aaaeb57c2546ef0923f"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-8210201e6b917217012f9379636be96e"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"progress progress--hidden"},"_id":"element-a7a164547f412269ab7f9eb144f404b7"},"children":[{"value":{"nodeType":"element","tagName":"progress","attributes":{},"_id":"element-ade7a169d841921fe8733136f73ecf15"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-652785ab7ac51ce257fa0d6de2a85d59"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"data-container":"","data-html":"body"},"_id":"element-ca158645d09c6b4d156a1df0e57a2290"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-ae9c83a1b5f95a3352f25821bbd63d63"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"scripts"},"_id":"element-c520a04394105ae4362afda82255849a"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-5e24f8ff63a1fb23aacebd2ee5f1b859"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"script"},"_id":"element-815245aa4f7d8cb3607708ca48784a31"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-f827cb274c936d5efe9d93eeb939ecb0"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-acbb5d43626adedc564d34bd7f83534f"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-0660cc8531181d9d8be8d8dade95ce5b"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-ab7ad7257cdb391d9ecf206b3d29650e"},"children":[]}]},"script":{"value":{"nodeType":"documentFragment","_id":"documentfragment-6a83a1016415153ecda1c86f3874b244"},"children":[{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"text"},"_id":"element-c8e7a81642e8d74243905118fd274200"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-892c4f23372df70be39dab363bf2f683"},"children":[]},{"value":{"nodeType":"element","tagName":"script","attributes":{"data-html":"text"},"_id":"element-aa635f3879df925b3711d3f0bd90ede6"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-4ed854463decaf4c02b9fd86f46fc706"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-5d8782b8c945a503088976dc7a999850"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"src"},"_id":"element-17083ffd36c4b3bb9a01feef2082b6ab"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-d4d4c667647be7e9768980dcd293d299"},"children":[]},{"value":{"nodeType":"element","tagName":"script","attributes":{"data-tag":"src"},"_id":"element-e928e300f4997a14aa766dcecab432d5"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-3f5ea664e564230eed5a1c5d8a47a7dd"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-24c50c9452d01091fe7ba4dd2b24a115"},"children":[]}]},"style":{"value":{"nodeType":"documentFragment","_id":"documentfragment-bd8899f55da8d9461a31898d3f2ce414"},"children":[{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"text"},"_id":"element-49c7fc17ce9405d152fe6d565a0bf95a"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-be6917fc80d33f30a40f6f75bf96e5e6"},"children":[]},{"value":{"nodeType":"element","tagName":"style","attributes":{"data-html":"text"},"_id":"element-bad05f96591d03edf7a1d4932082dc87"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-1a6ef4720f731c0d7d54d9c6e1fd69fb"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-dbe2c1f315d79b96847f0c703eda665e"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"src"},"_id":"element-380b49eccbf288f12fb6bdf7bf1ff0f3"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-076b6804faa6085a3661f2f22889d28d"},"children":[]},{"value":{"nodeType":"element","tagName":"link","attributes":{"rel":"stylesheet","data-tag":"src"},"_id":"element-e259b51cd0f93fdeac0b0cea74653e0b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-86c2b02f329ab5e1ae05dfc17e04e621"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-60338cebceea08b3bdaf51daa3269c06"},"children":[]}]},"toolbar":{"value":{"nodeType":"documentFragment","_id":"documentfragment-522abe5d4b300ec245b54b0f41768a3e"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar"},"_id":"element-4abb4e4e0cb2287eea383100225657ee"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-b512fee269f0a5c833dc192c427b329b"},"children":[]}]},"toolbar-button":{"value":{"nodeType":"documentFragment","_id":"documentfragment-c8f3028facbf648c0de34164fea60a5c"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-button","data-tag":"nodeTag"},"_id":"element-56dc7124967cd429c74035f32ceed00c"},"children":[{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-200809bbbbb76ed74cbce1bd3478d405"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{},"_id":"element-b78b6cbd2072eb7b4b93c4d51bdccf59"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"data-text":"title"},"_id":"element-e660d908590e4b6a863e1ddfc99f3e3e"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-273eebdb9d78bfee4dab285fef145d65"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-5e1259202a93470ded7f030f5c6624a8"},"children":[]}]},"toolbar-group":{"value":{"nodeType":"documentFragment","_id":"documentfragment-ef8b71e9e8db8874ee65c0d1689fe4bb"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-group","data-tag":"nodeTag"},"_id":"element-df74e914aba8ea2785f295f5d5de634b"},"children":[{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-6601358f50588fbf7fe7cf28fe434d5a"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{},"_id":"element-1dddb3684c735133c2c10b349a5df241"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"data-text":"title"},"_id":"element-a6adae9bac8b90e5c760d391279e8c7b"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-e0807f6f84b4ac80edcbe0c15f06e851"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-group__children"},"_id":"element-50e1077ae22e7f640a75c9c555a046be"},"children":[{"value":{"nodeType":"text","nodeValue":"\n    ","_id":"text-482dfa617a701d4c4f5d4175c9e6fa49"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{},"_id":"element-d7c22cc4542b488bae265ba253ba294b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-eab3fd2feca695e91a988ae2000655bb"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-ee0b7dd9c60e387f28769fc203cd4963"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-1224a5af9486d8c32dc502006ade9f0c"},"children":[]}]}},"schemas":{"composer-node":{"id":"composer-node","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"},"isEmpty":{"type":"boolean"},"isCollapsed":{"type":"boolean"},"isChildrenCollapsed":{"type":"boolean"},"preview":{"$ref":"nonEmptyString"},"childrenTitle":{"$ref":"nonEmptyString"}},"required":["id","title","treeType","nodeType","depth","preview","childrenTitle"]},"document":{"id":"document","type":"object","properties":{"documentTitle":{"$ref":"nonEmptyString"},"headStyles":{"type":"array","items":{"$ref":"style"}},"headScripts":{"type":"array","items":{"$ref":"script"}},"scripts":{"type":"array","items":{"$ref":"script"}}},"required":["documentTitle"]},"script":{"id":"script","$ref":"htmlResource"},"style":{"id":"style","$ref":"htmlResource"},"toolbar-button":{"id":"toolbar-button","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"}},"required":["id","title","treeType","nodeType"]},"toolbar-group":{"id":"toolbar-group","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"},"isCollapsed":{"type":"boolean"}},"required":["id","title","treeType","nodeType","depth"]},"componentConfig":{"id":"componentConfig","type":"object","properties":{"containerSelector":{"$ref":"nonEmptyString"}}},"htmlResource":{"id":"htmlResource","oneOf":[{"$ref":"htmlResourceText"},{"$ref":"htmlResourceSrc"}]},"htmlResourceSrc":{"id":"htmlResourceSrc","type":"object","properties":{"src":{"type":"string"}},"required":["src"]},"htmlResourceText":{"id":"htmlResourceText","type":"object","properties":{"text":{"type":"string"}},"required":["text"]},"nonEmptyString":{"id":"nonEmptyString","type":"string","pattern":"^(?!\\s*$).+"}},"defaultModels":{"document":{"documentTitle":"New Document"}},"configs":{"composer":{"containerSelector":".composer"},"composer-node":{"containerSelector":".composer-node__children > ul"},"document":{"containerSelector":"body > [data-container]"},"toolbar":{"containerSelector":".toolbar"},"toolbar-group":{"containerSelector":".toolbar-group__children > ul"}},"transforms":{"composer-node":{"nodeTag":[{"$if":[{"$value":"isCollapsed"},{"addClass":"composer-node--collapsed"}]},{"$if":[{"$value":"isEmpty"},{"addClass":"composer-node--empty"}]},{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}],"childWrapperTag":[{"$if":[{"$value":"isChildrenCollapsed"},{"addClass":"composer-node__children--collapsed"}]},{"attr":["id",{"$value":"id"}]}]},"script":{"src":{"$if":[{"$value":"src"},{"attr":["src",{"$value":"src"}]}]}},"style":{"src":{"$if":[{"$value":"src"},{"attr":["href",{"$value":"src"}]}]}},"toolbar-button":{"nodeTag":[{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}]},"toolbar-group":{"nodeTag":[{"$if":[{"$value":"isCollapsed"},{"addClass":"toolbar-group--collapsed"}]},{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}]}},"componentNames":["composer","composer-node","document","script","style","toolbar","toolbar-button","toolbar-group"],"components":{"composer":{"config":{"containerSelector":".composer"},"style":".composer {\n  line-height: 2;\n  font-size: 1rem;\n}\n\n$toolbar-color: hsl( 210, 15%, 40% );\n$toolbar-children-color: hsl( 210, 85%, 40% );\n$toolbar-empty-color: hsl( 210, 10%, 90% );\n$main-color: hsl( 210, 5%, 95% );\n$children-color: hsl( 210, 95%, 95% );\n$action-color: hsl(210, 85%, 60% );\n$action-delete-color: hsl( 0, 83%, 50% );\n\n.composer-node__toolbar {\n  min-height: 3rem;\n\n  color: hsl( 210, 10%, 95% );\n  @include colorize-el( $toolbar-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node__title {\n  line-height: 3;\n  padding: 0 1rem;\n}\n\n.composer-node__children > .composer-node__toolbar {\n  @include colorize-el( $toolbar-children-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node--empty > .composer-node__toolbar {\n  color: hsl( 210, 85%, 15% );\n  @include colorize-el( $toolbar-empty-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node:not( [data-depth=\"0\"] ) > .composer-node__toolbar {\n  cursor: move;\n}\n\n.composer-node__view {\n  margin-bottom: 0.5rem;\n  overflow: hidden;\n  padding: 0.5rem;\n\n  color: #111;\n  background: #fff;\n  box-shadow: inset $tiny-shadow;\n}\n\n.composer-node__view:last-child {\n  margin-bottom: 0;\n}\n\n.composer-node__main {\n  padding: 0.75rem;\n  margin: 0.25rem;\n  margin-top: 0;\n\n  @include colorize-el-background( $main-color );\n  box-shadow: $medium-shadow;\n}\n\n.composer-node--collapsed > .composer-node__main,\n.composer-node__children--collapsed > .composer-node__main {\n  height: 0;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  overflow: hidden;\n}\n\n.composer-node__children {\n  overflow: hidden;\n\n  @include colorize-el-background( $children-color );\n  box-shadow: inset $medium-shadow;\n}\n\n.composer-node__children > ul {\n  margin: 0;\n  padding: 0.5rem;\n  list-style: none;\n}\n\n.composer-node__children--collapsed > ul {\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\n.composer-node__children > ul > li {\n  margin: 0;\n  padding: 0;\n}\n\n.composer-node__actions {\n  display: block;\n  float: right;\n}\n\n.composer-node__actions > li {\n  display: block;\n  float: left;\n}\n\n.composer-node__action {\n  display: block;\n  padding: 0;\n  font-size: 1rem;\n  line-height: 1.875rem;\n  width: 1.875rem;\n  margin: 0.5rem 0;\n  text-align: center;\n  cursor: default;\n\n  color: hsl( 210, 5%, 95% );\n  @include colorize-el( $action-color );\n  box-shadow: $small-shadow;\n}\n\n.composer-node__action--disabled {\n  opacity: 0.5;\n}\n\n.composer-node__actions > li:last-child .composer-node__action {\n  margin-right: 0.5rem;\n}\n\n.composer-node__delete {\n  color: hsl( 0, 5%, 95% );\n  @include colorize-el( $action-delete-color );\n  box-shadow: $small-shadow;\n}\n\n","template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-a014d4011afabdcd903aca16cdbabd92"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer"},"_id":"element-95da49b17549e2009c0492950ecb0355"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-09d9ebb1e64d67204081f7c173ca92cc"},"children":[]}]}},"composer-node":{"config":{"containerSelector":".composer-node__children > ul"},"schema":{"id":"composer-node","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"},"isEmpty":{"type":"boolean"},"isCollapsed":{"type":"boolean"},"isChildrenCollapsed":{"type":"boolean"},"preview":{"$ref":"nonEmptyString"},"childrenTitle":{"$ref":"nonEmptyString"}},"required":["id","title","treeType","nodeType","depth","preview","childrenTitle"]},"template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-ad2afa4c8cb93797984614c3e5264c2a"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node","data-tag":"nodeTag"},"_id":"element-2b5627104c7279d0685027bec9c23af9"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-acd7a06bb2c780ebee8ff05f9a6dc448"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{"class":"composer-node__toolbar"},"_id":"element-09d40b1dfbba856fb813f9aba100dd77"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-5a84283ce746e32fe88928f2f63dc29d"},"children":[]},{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__title","data-text":"title"},"_id":"element-96d067dcaadd38707aa2bfaf41ca0ace"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-4801c92ec2dd9dd5d82cbb62d75302a3"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"class":"composer-node__actions"},"_id":"element-58d1dfd4def5bde89138da65045826ee"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-897aae1bad1a9187ea46f4ca3b457100"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-0cea61c92a111e418f9a2a9fde3a13c9"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__delete"},"_id":"element-41a100443c581fd4678ba8730b53421f"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-trash fa-lg"},"_id":"element-6d92d8482a78e009a2cf7030d24b79d2"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-5439cac369dd5f0d540654f98732e7c7"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-2b46a846333bcb9fea9fc48d8a6a61db"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n\r\n  ","_id":"text-34ba551f047410a3549d681355a1893e"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__main"},"_id":"element-53efae921d5bc63641729658528fc053"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-976fe66f7685df4e47d2803a446f0d5c"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__view"},"_id":"element-b78c4adeac8434e772a352defb2446b0"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-3ff3a080ead256e81d31df3b6519fe8b"},"children":[]},{"value":{"nodeType":"element","tagName":"code","attributes":{"data-html":"preview"},"_id":"element-5a86297effeca05a1a43e4d391adf85b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-dbf789624268464fd89586556107270d"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n\r\n    ","_id":"text-ed94ee7fd97c95de797b1d8d5c4df3df"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-not":"isEmpty"},"_id":"element-0c709f2f524e78a428edf188161d277d"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-88a22dd54ecca5de344a016bf82b4e6c"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"composer-node__children","data-tag":"childWrapperTag"},"_id":"element-76fa31295587284723974235d334fc1d"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-0f5ed3fcde377e4bf062058e2e5d8422"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{"class":"composer-node__toolbar"},"_id":"element-ed8ddc5c82a2b8fd68a5cc5dafa71bbf"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-1e8d8a93df32c68b72f52032f67b25d0"},"children":[]},{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__title","data-text":"childrenTitle"},"_id":"element-e54752b5730dc52467e0b44bb22e8856"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-795a41cedacffc80a9d65177a9023c4b"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"class":"composer-node__actions"},"_id":"element-80b753ad2ca34a8fe36e6bb1f1bd6944"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n            ","_id":"text-4ad7d2ec1ac21f103b9af1b62760decd"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-37c7972ebdf288290c6d1d763bc3dc7d"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__collapse-children"},"_id":"element-8919a6ae6d9117e4cbee16754a85b1f1"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-minus-square fa-lg"},"_id":"element-a9a0d754fb6fbd376419ef8b0d44691d"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n            ","_id":"text-8e75b140d347a983295a1bdbb4924636"},"children":[]},{"value":{"nodeType":"element","tagName":"li","attributes":{},"_id":"element-c936924ec846ea9907e1adc69a2afc44"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"class":"composer-node__action composer-node__expand-children"},"_id":"element-fa034cc7bbbd5bbc0f354826473a6bc4"},"children":[{"value":{"nodeType":"element","tagName":"i","attributes":{"class":"fa fa-plus-square fa-lg"},"_id":"element-a7ce799268d28e72d3f1a4cca2422bfb"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n          ","_id":"text-2eeb16262ab48063d06c3b91bb646898"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-80e26e207ec7a54391a55b8006a3288c"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n        ","_id":"text-6ecd44bf6dc2b8131d343ad68ff8bee1"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{"data-dragsource":"composer"},"_id":"element-7beae3665c25b745c7d017d0005ab362"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-de4514747600979bbe57999cdf8cbc73"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-e08c6acf59114f162216356f1ae545ab"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-3310a173abe6b8a7c90d8ccf1cb6565d"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-f90e36e3d7eddd86ae4c6a6464f90c0c"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-4bbbf8236dcc8af9e0b240fd68d6a593"},"children":[]}]},"transform":{"nodeTag":[{"$if":[{"$value":"isCollapsed"},{"addClass":"composer-node--collapsed"}]},{"$if":[{"$value":"isEmpty"},{"addClass":"composer-node--empty"}]},{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}],"childWrapperTag":[{"$if":[{"$value":"isChildrenCollapsed"},{"addClass":"composer-node__children--collapsed"}]},{"attr":["id",{"$value":"id"}]}]}},"document":{"config":{"containerSelector":"body > [data-container]"},"defaultModel":{"documentTitle":"New Document"},"schema":{"id":"document","type":"object","properties":{"documentTitle":{"$ref":"nonEmptyString"},"headStyles":{"type":"array","items":{"$ref":"style"}},"headScripts":{"type":"array","items":{"$ref":"script"}},"scripts":{"type":"array","items":{"$ref":"script"}}},"required":["documentTitle"]},"style":"* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-family: sans-serif;\n}\n\nbody {\n  background: #fff;\n  color: #000;\n  padding: 1rem;\n}\n\n.gu-unselectable {\n  list-style: none;\n}\n\n.gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n\n.gu-hide {\n  display: none !important;\n}\n\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n\n.gu-transit {\n  opacity: 0.2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n\n.ratio {\n  width: 4rem;\n  text-align: center;\n  position: relative;\n}\n\n.ratio .shim {\n  padding-bottom: 100%;\n}\n\n.ratio .viewport {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n$lighten-hue: 40deg;\n$darken-hue: 210deg;\n\n$adjust-hue: 20%;\n$adjust-saturation: 5%;\n$adjust-lightness: 5%;\n\n$adjust-hue-gradient-highlight: $adjust-hue / 2;\n$adjust-saturation-gradient-highlight: $adjust-saturation / 2;\n$adjust-lightness-gradient-highlight: $adjust-lightness / 2;\n\n@function shift-hue( $from-hue, $to-hue, $amount ){\n  $from-color: hsl( $from-hue, 100%, 50% );\n  $to-color: hsl( $to-hue, 100%, 50% );\n  $mixed: mix( $to-color, $from-color, $amount );\n  $new-hue: hue( $mixed );\n\n  @return $new-hue;\n}\n\n@function advanced-lighten( $from-color, $hue-amount, $saturation-amount, $lightness-amount ){\n  $hue: hue( $from-color );\n  $new-hue: shift-hue( $hue, $lighten-hue, $hue-amount );\n\n  $light-and-saturation: lighten(\n    desaturate(\n      $from-color,\n      $saturation-amount\n    ),\n    $lightness-amount\n  );\n\n  @return change-color( $light-and-saturation, $hue: $new-hue );\n}\n\n@function advanced-darken( $from-color, $hue-amount, $saturation-amount, $lightness-amount ){\n  $hue: hue( $from-color );\n  $new-hue: shift-hue( $hue, $darken-hue, $hue-amount );\n\n  $light-and-saturation: darken(\n    saturate(\n      $from-color,\n      $saturation-amount\n    ),\n    $lightness-amount\n  );\n\n  @return change-color( $light-and-saturation, $hue: $new-hue );\n}\n\n@mixin colorize-el-background( $base-color ){\n  $gradient-highlight: advanced-lighten(\n    $base-color,\n    $adjust-hue-gradient-highlight,\n    $adjust-lightness-gradient-highlight,\n    $adjust-saturation-gradient-highlight\n  );\n  $gradient-base: $base-color;\n  $gradient-shadow: advanced-darken(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  background: $base-color;\n  background: linear-gradient(\n    to bottom,\n    $gradient-highlight,\n    $gradient-base,\n    $gradient-shadow\n  );\n}\n\n@mixin colorize-el( $base-color ){\n  $gradient-shadow: advanced-darken(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  $border-highlight: advanced-lighten(\n    $base-color,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n  $border-shadow: advanced-darken(\n    $gradient-shadow,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  $text-shadow: advanced-darken(\n    $border-shadow,\n    $adjust-hue,\n    $adjust-lightness,\n    $adjust-saturation\n  );\n\n  @include colorize-el-background( $base-color );\n  border: 0.0625rem solid $border-highlight;\n  border-bottom: 0.0625rem solid $border-shadow;\n  border-right: 0.0625rem solid $border-shadow;\n  text-shadow: 0.0625rem 0.0625rem 0 $text-shadow;\n}\n\n$large-shadow: 0.25rem 0.25rem 1rem rgba( 0, 0, 0, 0.25 );\n$medium-shadow: 0.125rem 0.125rem 0.5rem rgba( 0, 0, 0, 0.25 );\n$small-shadow: 0.0625rem 0.0625rem 0.25rem rgba( 0, 0, 0, 0.25 );\n$tiny-shadow: 0.03125rem 0.03125rem 0.125rem rgba( 0, 0, 0, 0.25 );\n\n$progress-width: 20rem;\n$progress-height: 4rem;\n$progress-padding: 1rem;\n\n$progress-color: hsl( 210, 5%, 95% );\n$progress-bar-color: hsl( 150, 85%, 40% );\n\n.progress {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  width: $progress-width;\n  height: $progress-height;\n  margin-left: $progress-width / -2;\n  margin-top: $progress-height / -2;\n  padding: $progress-padding;\n\n  @include colorize-el( $progress-color );\n  box-shadow: $large-shadow;\n}\n\n.progress > progress {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n\n  width: $progress-width - $progress-padding * 2;\n  height: $progress-height - $progress-padding * 2;\n\n  border: none;\n  background: #fff;\n  color: $progress-bar-color;\n  box-shadow: inset $tiny-shadow;\n}\n\n.progress > progress::-webkit-progress-bar {\n  border: none;\n  background: #fff;\n  box-shadow: inset $tiny-shadow;\n}\n\n.progress > progress::-webkit-progress-value {\n  @include colorize-el( $progress-bar-color );\n}\n\n.progress > progress::-moz-progress-bar {\n  @include colorize-el( $progress-bar-color );\n}\n\n.progress--hidden {\n  display: none;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba( 255, 255, 255, 0.5 );\n}\n\n.modal--hidden {\n  display: none;\n}\n","template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-b9e006aa718a3c8118961b3cbf96ce65"},"children":[{"value":{"nodeType":"documentType","_id":"documentType-ea72d10457017d5bb42e4510bc2938ea","name":"html","publicId":"","systemId":""},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-b4c5287bca741115dd4b139e6ef4ec1f"},"children":[]},{"value":{"nodeType":"element","tagName":"html","attributes":{"class":"no-js","lang":"en"},"_id":"element-d9adba6a8066504422708c42f3b83a62"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-54669acc90a7dc7fbfe060a668e0585a"},"children":[]},{"value":{"nodeType":"element","tagName":"head","attributes":{},"_id":"element-f009ce7381a53b3ff1549883ccbb884c"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-285a106b5a98e31db0a780a4bd7cc774"},"children":[]},{"value":{"nodeType":"element","tagName":"meta","attributes":{"charset":"utf-8"},"_id":"element-2598e662f171a3fd446445bd9724bdf9"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-9ae9af1ddf5b3e862c663ffc0fbfa787"},"children":[]},{"value":{"nodeType":"element","tagName":"meta","attributes":{"name":"viewport","content":"width=device-width, initial-scale=1.0"},"_id":"element-43a05822804ffe831fdb19d04be0fe64"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-e5d2da2f9c2d489468f055fdf6a24e5c"},"children":[]},{"value":{"nodeType":"element","tagName":"title","attributes":{"data-text":"documentTitle"},"_id":"element-b601431e99d8c5e8e760bd2182ac9ba9"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-b27c78fcf367729e8e43e3a2001af5c2"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"headStyles"},"_id":"element-e2fc88a9ede569ccb4d5c209eadf3b90"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-707661ac46b8900c0d5864cb56420ed1"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"style"},"_id":"element-fa50fc1fe243c1295561d2f17708f8a4"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-95c282bb1f961519a5dfaa63771f4bc3"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-086b5cb61c6f15d3dff03e801d901a75"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"headScripts"},"_id":"element-2856eff25ac5121d3c65f120351965bd"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-c2c5194609142820d973a8cefeefd917"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"script"},"_id":"element-e34e8b9a77964bace5c1874080109e4c"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-f2b9f25131863c596410bbac70b6f627"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-b65d785fe0fe9a1202690c4fce4fbfea"},"children":[]}]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-2af478b94890406f2d7cefd5a66b7866"},"children":[]},{"value":{"nodeType":"element","tagName":"body","attributes":{},"_id":"element-699e4c9a095113baf7f7de661988d9a9"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-1514bcdc52fbac7a90a7c5b2404df617"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"modal modal--hidden"},"_id":"element-5c2c37cf59b20aaaeb57c2546ef0923f"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-8210201e6b917217012f9379636be96e"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"progress progress--hidden"},"_id":"element-a7a164547f412269ab7f9eb144f404b7"},"children":[{"value":{"nodeType":"element","tagName":"progress","attributes":{},"_id":"element-ade7a169d841921fe8733136f73ecf15"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-652785ab7ac51ce257fa0d6de2a85d59"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"data-container":"","data-html":"body"},"_id":"element-ca158645d09c6b4d156a1df0e57a2290"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-ae9c83a1b5f95a3352f25821bbd63d63"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-each":"scripts"},"_id":"element-c520a04394105ae4362afda82255849a"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n      ","_id":"text-5e24f8ff63a1fb23aacebd2ee5f1b859"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-include":"script"},"_id":"element-815245aa4f7d8cb3607708ca48784a31"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n    ","_id":"text-f827cb274c936d5efe9d93eeb939ecb0"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-acbb5d43626adedc564d34bd7f83534f"},"children":[]}]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-0660cc8531181d9d8be8d8dade95ce5b"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-ab7ad7257cdb391d9ecf206b3d29650e"},"children":[]}]}},"script":{"schema":{"id":"script","$ref":"htmlResource"},"template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-6a83a1016415153ecda1c86f3874b244"},"children":[{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"text"},"_id":"element-c8e7a81642e8d74243905118fd274200"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-892c4f23372df70be39dab363bf2f683"},"children":[]},{"value":{"nodeType":"element","tagName":"script","attributes":{"data-html":"text"},"_id":"element-aa635f3879df925b3711d3f0bd90ede6"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-4ed854463decaf4c02b9fd86f46fc706"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-5d8782b8c945a503088976dc7a999850"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"src"},"_id":"element-17083ffd36c4b3bb9a01feef2082b6ab"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-d4d4c667647be7e9768980dcd293d299"},"children":[]},{"value":{"nodeType":"element","tagName":"script","attributes":{"data-tag":"src"},"_id":"element-e928e300f4997a14aa766dcecab432d5"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-3f5ea664e564230eed5a1c5d8a47a7dd"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-24c50c9452d01091fe7ba4dd2b24a115"},"children":[]}]},"transform":{"src":{"$if":[{"$value":"src"},{"attr":["src",{"$value":"src"}]}]}}},"style":{"schema":{"id":"style","$ref":"htmlResource"},"template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-bd8899f55da8d9461a31898d3f2ce414"},"children":[{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"text"},"_id":"element-49c7fc17ce9405d152fe6d565a0bf95a"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-be6917fc80d33f30a40f6f75bf96e5e6"},"children":[]},{"value":{"nodeType":"element","tagName":"style","attributes":{"data-html":"text"},"_id":"element-bad05f96591d03edf7a1d4932082dc87"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-1a6ef4720f731c0d7d54d9c6e1fd69fb"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-dbe2c1f315d79b96847f0c703eda665e"},"children":[]},{"value":{"nodeType":"element","tagName":"fragment","attributes":{"data-if":"src"},"_id":"element-380b49eccbf288f12fb6bdf7bf1ff0f3"},"children":[{"value":{"nodeType":"text","nodeValue":"\r\n  ","_id":"text-076b6804faa6085a3661f2f22889d28d"},"children":[]},{"value":{"nodeType":"element","tagName":"link","attributes":{"rel":"stylesheet","data-tag":"src"},"_id":"element-e259b51cd0f93fdeac0b0cea74653e0b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-86c2b02f329ab5e1ae05dfc17e04e621"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\r\n","_id":"text-60338cebceea08b3bdaf51daa3269c06"},"children":[]}]},"transform":{"src":{"$if":[{"$value":"src"},{"attr":["href",{"$value":"src"}]}]}}},"toolbar":{"config":{"containerSelector":".toolbar"},"style":"$toolbar-group-color: hsl( 210, 15%, 40% );\n$toolbar-group-collapsed-color: hsl( 210, 15%, 60% );\n$toolbar-group-children-color: hsl( 210, 5%, 95% );\n$toolbar-button-color: hsl(210, 85%, 60% );\n\n.toolbar {\n  display: flex;\n  flex-direction: row;\n\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  max-width: 100%;\n  overflow-x: auto;\n}\n\n.toolbar-group {\n  /*\n  display: flex;\n  flex-direction: row;\n  */\n  display: inline-block;\n\n  padding: 0.25rem;\n\n  color: #fff;\n  @include colorize-el( $toolbar-group-color );\n}\n\n.toolbar-group--collapsed {\n  @include colorize-el( $toolbar-group-collapsed-color );\n}\n\n.toolbar-group > header {\n  //display: flex;\n  display: block;\n\n  padding-right: 0.25rem;\n  align-items: center;\n}\n\n.toolbar-group[data-depth=\"0\"] > header {\n  display: none;\n}\n\n.toolbar-group__children {\n  display: flex;\n  flex-direction: row;\n  padding: 0.25rem;\n\n  @include colorize-el( $toolbar-group-children-color );\n}\n\n.toolbar-group--collapsed > .toolbar-group__children {\n  display: none;\n}\n\n.toolbar-group__children > ul {\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n}\n\n.toolbar-group__children > ul > li {\n  display: flex;\n  flex-direction: row;\n  margin-right: 0.25rem;\n}\n\n.toolbar-group__children > ul > li:last-child {\n  margin-right: 0;\n}\n\n.toolbar-button {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  padding: 0.5rem;\n\n  @include colorize-el( $toolbar-button-color );\n}\n","template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-522abe5d4b300ec245b54b0f41768a3e"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar"},"_id":"element-4abb4e4e0cb2287eea383100225657ee"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-b512fee269f0a5c833dc192c427b329b"},"children":[]}]}},"toolbar-button":{"schema":{"id":"toolbar-button","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"}},"required":["id","title","treeType","nodeType"]},"template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-c8f3028facbf648c0de34164fea60a5c"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-button","data-tag":"nodeTag"},"_id":"element-56dc7124967cd429c74035f32ceed00c"},"children":[{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-200809bbbbb76ed74cbce1bd3478d405"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{},"_id":"element-b78b6cbd2072eb7b4b93c4d51bdccf59"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"data-text":"title"},"_id":"element-e660d908590e4b6a863e1ddfc99f3e3e"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-273eebdb9d78bfee4dab285fef145d65"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-5e1259202a93470ded7f030f5c6624a8"},"children":[]}]},"transform":{"nodeTag":[{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}]}},"toolbar-group":{"config":{"containerSelector":".toolbar-group__children > ul"},"schema":{"id":"toolbar-group","type":"object","properties":{"id":{"$ref":"nonEmptyString"},"title":{"$ref":"nonEmptyString"},"treeType":{"$ref":"nonEmptyString"},"nodeType":{"$ref":"nonEmptyString"},"depth":{"type":"integer"},"isCollapsed":{"type":"boolean"}},"required":["id","title","treeType","nodeType","depth"]},"template":{"value":{"nodeType":"documentFragment","_id":"documentfragment-ef8b71e9e8db8874ee65c0d1689fe4bb"},"children":[{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-group","data-tag":"nodeTag"},"_id":"element-df74e914aba8ea2785f295f5d5de634b"},"children":[{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-6601358f50588fbf7fe7cf28fe434d5a"},"children":[]},{"value":{"nodeType":"element","tagName":"header","attributes":{},"_id":"element-1dddb3684c735133c2c10b349a5df241"},"children":[{"value":{"nodeType":"element","tagName":"span","attributes":{"data-text":"title"},"_id":"element-a6adae9bac8b90e5c760d391279e8c7b"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-e0807f6f84b4ac80edcbe0c15f06e851"},"children":[]},{"value":{"nodeType":"element","tagName":"div","attributes":{"class":"toolbar-group__children"},"_id":"element-50e1077ae22e7f640a75c9c555a046be"},"children":[{"value":{"nodeType":"text","nodeValue":"\n    ","_id":"text-482dfa617a701d4c4f5d4175c9e6fa49"},"children":[]},{"value":{"nodeType":"element","tagName":"ul","attributes":{},"_id":"element-d7c22cc4542b488bae265ba253ba294b"},"children":[]},{"value":{"nodeType":"text","nodeValue":"\n  ","_id":"text-eab3fd2feca695e91a988ae2000655bb"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-ee0b7dd9c60e387f28769fc203cd4963"},"children":[]}]},{"value":{"nodeType":"text","nodeValue":"\n","_id":"text-1224a5af9486d8c32dc502006ade9f0c"},"children":[]}]},"transform":{"nodeTag":[{"$if":[{"$value":"isCollapsed"},{"addClass":"toolbar-group--collapsed"}]},{"attr":["id",{"$value":"id"}]},{"attr":["data-treeType",{"$value":"treeType"}]},{"attr":["data-nodeType",{"$value":"nodeType"}]},{"attr":["data-depth",{"$value":"depth"}]}]}}},"datas":{"data-small":{"value":{"nodeType":"fragment","_id":"fragment-e8d0915d6b361cdc45ade8243a925fe3"},"children":[{"value":{"nodeType":"tag","name":"strong","attr":{},"_id":"tag-9e19a4a49cb820b3c9de2657d111106e"},"children":[]},{"value":{"nodeType":"tag","name":"h2","attr":{"id":"myHeader","class":"primary-header"},"_id":"h2-fc3ad02e943cb8979ed95f008254e7c4"},"children":[{"value":{"data":"Hello ","nodeType":"text","_id":"text-e8430e778578dcb8a5cef17fcfdd9675"},"children":[]},{"value":{"nodeType":"text","data":"Chris","_id":"text-dfdea7742a24d7dccece3f0c6ca8ec80"},"children":[]}]}]},"toolbar-test":{"value":{"nodeType":"toolbar-group","name":"Composer"},"children":[{"value":{"nodeType":"toolbar-group","name":"File"},"children":[{"value":{"nodeType":"toolbar-button","name":"New"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Open"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Save"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Publish"},"children":[]}]},{"value":{"nodeType":"toolbar-group","name":"Create"},"children":[{"value":{"nodeType":"toolbar-group","name":"Container"},"children":[{"value":{"nodeType":"toolbar-button","name":"Box"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Grid"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Columns"},"children":[]}]},{"value":{"nodeType":"toolbar-group","name":"Leaf"},"children":[{"value":{"nodeType":"toolbar-button","name":"Header"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Text"},"children":[]},{"value":{"nodeType":"toolbar-button","name":"Image"},"children":[]}]}]},{"value":{"nodeType":"toolbar-group","name":"Edit"},"children":[]},{"value":{"nodeType":"toolbar-group","name":"View"},"children":[]}]}}}
},{}],2:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Tree = require('1tree');
var defaultAdapter = require('1tree/dist/adapter/default');

var basePlugins = Object.keys(Tree.plugins).map(function (key) {
  return Tree.plugins[key];
});

var Mtree = function Mtree() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var excludeBase = args.some(function (arg) {
    return typeof arg === 'boolean' && arg;
  });

  var adapter = defaultAdapter;
  var plugins = excludeBase ? [] : basePlugins;

  args.forEach(function (arg) {
    if (Array.isArray(arg)) {
      plugins = arg.concat(plugins);
    } else if (typeof arg === 'function') {
      plugins = [arg].concat(plugins);
    } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {
      adapter = arg;
    }
  });

  return Tree.adapter(adapter, plugins);
};

module.exports = Mtree;
},{"1tree":77,"1tree/dist/adapter/default":27}],3:[function(require,module,exports){
'use strict'

module.exports = require( './dist' )

},{"./dist":2}],4:[function(require,module,exports){
'use strict';

var extendValue = function extendValue(fn, node, value) {
  var existingValue = fn.value(node);
  var newValue = Object.assign({}, existingValue, value);
  fn.value(node, newValue);
};

module.exports = extendValue;
},{}],5:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var TreeFactory = require('1tree-factory');
var plugins = require('./plugins');
var createTreePlugin = require('./plugins/createTree');

var JsonTree = TreeFactory.apply(undefined, _toConsumableArray(plugins));

// added afterwards to ensure createTree plugin already exists, as it wraps it
JsonTree.plugin(createTreePlugin);

module.exports = JsonTree;
},{"./plugins":8,"./plugins/createTree":6,"1tree-factory":3}],6:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isRawTree = function isRawTree(obj) {
  return obj !== null && obj !== undefined && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && _typeof(obj.value) === 'object' && Array.isArray(obj.children);
};

var createTreePlugin = function createTreePlugin(fn) {
  var originalCreateTree = fn.createTree;

  var createTree = function createTree(rootValue) {
    var asRaw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!asRaw && !isRawTree(rootValue)) rootValue = fn.fromJson(fn, rootValue);

    return originalCreateTree(rootValue);
  };

  createTree.def = originalCreateTree.def;

  return Object.assign(fn, { createTree: createTree });
};

module.exports = createTreePlugin;
},{}],7:[function(require,module,exports){
'use strict';

var T = require('mtype');
var typenames = require('../typenames');
var extendValue = require('../extendValue');

var valueTypes = typenames.valueTypes;


var t = T();

var fromJsonPlugin = function fromJsonPlugin(fn) {
  var fromJson = function fromJson(fn, jsonObj) {
    var nodeType = t.of(jsonObj);
    var value = { nodeType: nodeType };

    if (valueTypes.includes(nodeType)) value.nodeValue = jsonObj;

    var node = fn.createNode(value);

    if (nodeType === 'array') {
      jsonObj.forEach(function (el) {
        var childNode = fromJson(fn, el);

        /*
          unsafe child append - but it's OK because this tree type is standard
          value: object, children: array
        */
        node.children.push(childNode);
      });
    } else if (nodeType === 'object') {
      var propertyNames = Object.keys(jsonObj);

      propertyNames.forEach(function (name) {
        var propertyValue = jsonObj[name];
        var valueNode = fromJson(fn, propertyValue);

        extendValue(fn, valueNode, { propertyName: name });

        node.children.push(valueNode);
      });
    }

    return node;
  };

  fromJson.def = {
    argTypes: ['fn', 'any'],
    returnType: 'node',
    requires: ['createNode'],
    categories: ['meta', 'plugin']
  };

  Object.assign(fn, { fromJson: fromJson });
};

module.exports = fromJsonPlugin;
},{"../extendValue":4,"../typenames":15,"mtype":191}],8:[function(require,module,exports){
'use strict';

var fromJson = require('./fromJson');
var toJson = require('./toJson');
var properties = require('./properties');
var isEmpty = require('./isEmpty');
var slug = require('./slug');
var treeType = require('./treeType');
var types = require('./types');

module.exports = [fromJson, toJson, properties, isEmpty, slug, treeType, types];
},{"./fromJson":7,"./isEmpty":9,"./properties":10,"./slug":11,"./toJson":12,"./treeType":13,"./types":14}],9:[function(require,module,exports){
'use strict';

var typenames = require('../typenames');

var containerTypes = typenames.containerTypes;


var isEmptyPlugin = function isEmptyPlugin(fn) {
  var isEmpty = function isEmpty(fn, node) {
    var nodeType = fn.nodeType(fn, node);

    return !containerTypes.includes(nodeType);
  };

  isEmpty.def = fn.isEmpty.def;

  return Object.assign(fn, { isEmpty: isEmpty });
};

module.exports = isEmptyPlugin;
},{"../typenames":15}],10:[function(require,module,exports){
'use strict';

//replace with fn.isObject, isString etc.

var isObjectNode = function isObjectNode(fn, node) {
  var nodeType = fn.nodeType(fn, node);

  return nodeType === 'object';
};

var enforceObject = function enforceObject(fn, node, fname) {
  if (!isObjectNode(fn, node)) throw new Error(fname + ' can only be called on an object node');
};

var propertiesPlugin = function propertiesPlugin(fn) {
  var getProperty = function getProperty(fn, node, propertyName) {
    enforceObject(fn, node, 'getProperty');

    var children = fn.getChildren(node);

    var property = children.find(function (siblingNode) {
      var siblingValue = fn.value(siblingNode);
      var siblingPropertyName = siblingValue.propertyName;

      return siblingPropertyName === propertyName;
    });

    return property;
  };

  getProperty.def = {
    argTypes: ['fn', 'node', 'string'],
    returnType: 'node',
    requires: ['getChildren', 'value'],
    categories: ['meta', 'plugin']
  };

  var setProperty = function setProperty(fn, root, parentNode, childNode, propertyName) {
    enforceObject(fn, parentNode, 'setProperty');

    var existing = fn.getProperty(fn, parentNode, propertyName);

    var childNodeValue = fn.value(childNode);
    childNodeValue.propertyName = propertyName;
    fn.value(childNode, childNodeValue);

    if (existing) {
      fn.insertBefore(fn, root, parentNode, childNode, existing);
      fn.remove(fn, root, existing);

      return childNode;
    }

    return fn.append(fn, root, parentNode, childNode);
  };

  setProperty.def = {
    argTypes: ['fn', 'rootNode', 'node', 'node', 'string'],
    returnType: 'node',
    requires: ['getProperty', 'value', 'insertBefore', 'append'],
    categories: ['meta', 'plugin']
  };

  var hasProperty = function hasProperty(fn, node, propertyName) {
    enforceObject(fn, node, 'hasProperty');

    var property = fn.getProperty(fn, node, propertyName);

    return !!property;
  };

  hasProperty.def = {
    argTypes: ['fn', 'node', 'string'],
    returnType: 'boolean',
    requires: ['getProperty'],
    categories: ['meta', 'plugin']
  };

  var removeProperty = function removeProperty(fn, root, node, propertyName) {
    enforceObject(fn, node, 'removeProperty');

    var property = fn.getProperty(fn, node, propertyName);

    if (!property) throw new Error('Object node does not have a property "' + propertyName + '"');

    return fn.remove(fn, root, property);
  };

  removeProperty.def = {
    argTypes: ['fn', 'rootNode', 'node', 'string'],
    returnType: 'node',
    requires: ['getProperty', 'remove'],
    categories: ['meta', 'plugin']
  };

  var keys = function keys(fn, node) {
    enforceObject(fn, node, 'keys');

    var children = fn.getChildren(node);

    var keys = children.map(function (childNode) {
      var value = fn.value(childNode);

      return value.propertyName;
    });

    return keys;
  };

  keys.def = {
    argTypes: ['fn', 'node'],
    returnType: '[string]',
    requires: ['getChildren', 'value'],
    categories: ['meta', 'plugin']
  };

  var values = function values(fn, node) {
    enforceObject(fn, node, 'values');

    var children = fn.getChildren(node);

    var values = children.map(function (childNode) {
      var value = fn.value(childNode);

      return value.nodeValue;
    });

    return values;
  };

  values.def = {
    argTypes: ['fn', 'node'],
    returnType: '[any]',
    requires: ['getChildren', 'value'],
    categories: ['meta', 'plugin']
  };

  var renameProperty = function renameProperty(fn, node, propertyName, newPropertyName) {
    enforceObject(fn, node, 'renameProperty');

    var property = fn.getProperty(fn, node, propertyName);

    if (!property) throw new Error('Object node does not have a property "' + propertyName + '"');

    var propertyValue = fn.value(property);
    propertyValue.propertyName = newPropertyName;
    fn.value(property, propertyValue);

    return property;
  };

  renameProperty.def = {
    argTypes: ['fn', 'node', 'string', 'string'],
    returnType: 'node',
    requires: ['getProperty', 'value'],
    categories: ['meta', 'plugin']
  };

  return Object.assign(fn, {
    getProperty: getProperty, setProperty: setProperty, hasProperty: hasProperty, removeProperty: removeProperty, keys: keys, values: values,
    renameProperty: renameProperty
  });
};

module.exports = propertiesPlugin;
},{}],11:[function(require,module,exports){
'use strict';

var slugPlugin = function slugPlugin(fn) {
  var originalSlug = fn.slug;

  var slug = function slug(fn, root, node) {
    if (root === node) return '';

    var parent = fn.getParent(fn, root, node);
    var parentValue = fn.value(parent);
    var nodeType = parentValue.nodeType;


    if (nodeType === 'object') {
      var value = fn.value(node);
      var propertyName = value.propertyName;


      return propertyName;
    }

    return String(fn.index(fn, root, node));
  };

  slug.def = originalSlug.def;

  return Object.assign(fn, { slug: slug });
};

module.exports = slugPlugin;
},{}],12:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var typenames = require('../typenames');

var valueTypes = typenames.valueTypes;


var unnamedProperty = 'New property ';

var toJsonPlugin = function toJsonPlugin(fn) {
  var toJson = function toJson(fn, node) {
    var nodeType = fn.nodeType(fn, node);

    if (nodeType === 'null') return null;

    if (valueTypes.includes(nodeType)) {
      var value = fn.value(node);

      return value.nodeValue;
    }

    if (nodeType === 'array') {
      var children = fn.getChildren(node);

      return children.map(function (childNode) {
        return toJson(fn, childNode);
      });
    }

    if (nodeType === 'object') {
      var _ret = function () {
        var children = fn.getChildren(node);

        var unnamedCount = 0;

        return {
          v: children.reduce(function (result, nameValueNode) {
            var value = fn.value(nameValueNode);
            var propertyName = value.propertyName;


            if (propertyName === undefined) {
              propertyName = unnamedProperty + unnamedCount;
              unnamedCount++;
            }

            var propertyValue = toJson(fn, nameValueNode);

            result[propertyName] = propertyValue;

            return result;
          }, {})
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    throw new Error('Unexpected node');
  };

  toJson.def = {
    argTypes: ['fn', 'node'],
    returnType: 'any',
    requires: ['nodeType', 'value', 'getChildren'],
    categories: ['meta', 'plugin']
  };

  return Object.assign(fn, { toJson: toJson });
};

module.exports = toJsonPlugin;
},{"../typenames":15}],13:[function(require,module,exports){
'use strict';

var treeTypePlugin = function treeTypePlugin(fn) {
  var treeType = function treeType() {
    return 'json';
  };

  treeType.def = {
    argType: [],
    returnType: 'string',
    requires: [],
    categories: ['meta', 'plugin']
  };

  return Object.assign(fn, { treeType: treeType });
};

module.exports = treeTypePlugin;
},{}],14:[function(require,module,exports){
'use strict';

var utils = require('mojule-utils');
var typenames = require('../typenames');

var allTypes = typenames.allTypes;
var capitalizeFirstLetter = utils.capitalizeFirstLetter;


var typesPlugin = function typesPlugin(fn) {
  allTypes.forEach(function (typename) {
    var fname = 'is' + capitalizeFirstLetter(typename);

    fn[fname] = function (fn, node) {
      var nodeType = fn.nodeType(fn, node);

      return nodeType === typename;
    };

    fn[fname].def = {
      argTypes: ['fn', 'node'],
      returnType: 'boolean',
      requires: ['nodeType'],
      categories: ['meta', 'plugin']
    };
  });

  return fn;
};

module.exports = typesPlugin;
},{"../typenames":15,"mojule-utils":178}],15:[function(require,module,exports){
'use strict';

var valueTypes = ['string', 'number', 'boolean'];
var containerTypes = ['object', 'array'];
var allTypes = valueTypes.concat(containerTypes).concat(['null']);

module.exports = { valueTypes: valueTypes, containerTypes: containerTypes, allTypes: allTypes };
},{}],16:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":5,"dup":3}],17:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var TreeFactory = require('1tree-factory');
var plugins = require('./plugins');
var createTree = require('./plugins/createTree');

var SchemaTree = TreeFactory.apply(undefined, _toConsumableArray(plugins));

SchemaTree.plugin(createTree);

module.exports = SchemaTree;
},{"./plugins":20,"./plugins/createTree":18,"1tree-factory":3}],18:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isRawTree = function isRawTree(obj) {
  return obj !== null && obj !== undefined && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && _typeof(obj.value) === 'object' && Array.isArray(obj.children);
};

var createTreePlugin = function createTreePlugin(fn) {
  var originalCreateTree = fn.createTree;

  var createTree = function createTree(rootValue) {
    var asRaw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!asRaw && !isRawTree(rootValue)) rootValue = fn.fromSchema(fn, rootValue);

    return originalCreateTree(rootValue);
  };

  createTree.def = originalCreateTree.def;

  return Object.assign(fn, { createTree: createTree });
};

module.exports = createTreePlugin;
},{}],19:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Tree = require('1tree');

/*
  We're going to cheat slightly and sacrifice some performance for the sake of
  dev time by just using the default tree and then wrapping that in a plugin,
  because I'm tired and there's a lot to do.
*/

var createsNesting = {
  object: ['properties', 'additionalProperties', 'definitions', 'patternProperties', 'dependencies', 'allOf', 'anyOf', 'oneOf', 'not'],
  array: ['items']
};

createsNesting.any = createsNesting.object.concat(createsNesting.array);
createsNesting.union = createsNesting.any;

var valueMapper = function valueMapper(schema) {
  var value = Object.assign({}, schema);

  if (Array.isArray(schema.type)) {
    value.type = 'union';
    value.typesUnion = schema.type.slice();
  } else if (typeof schema.type !== 'string') {
    value.type = 'any';
  }

  return value;
};

var nestingMapper = function nestingMapper(schema) {
  var value = valueMapper(schema);

  var createsNestingDef = createsNesting[value.type];

  createsNestingDef.forEach(function (propertyName) {
    delete value[propertyName];
  });

  return value;
};

var nodeValueMappers = {
  string: valueMapper,
  number: valueMapper,
  integer: valueMapper,
  boolean: valueMapper,
  null: valueMapper,
  object: nestingMapper,
  array: nestingMapper,
  any: nestingMapper
};

var extendValue = function extendValue(node, value) {
  return node.value(Object.assign({}, node.value(), value));
};

var createPropertyNode = function createPropertyNode(schema, node, propertyName) {
  var propertySchema = schema.properties[propertyName];
  var propertyNode = toNode(propertySchema, node);

  extendValue(propertyNode, { propertyName: propertyName });

  return propertyNode;
};

var createAdditionalPropertiesNode = function createAdditionalPropertiesNode(schema, node) {
  var additionalPropertiesSchema = schema.additionalProperties;
  var additionalPropertiesNode = toNode(additionalPropertiesSchema, node);

  extendValue(additionalPropertiesNode, { additionalPropertiesSchema: true });

  return additionalPropertiesNode;
};

var createPatternPropertyNode = function createPatternPropertyNode(schema, node, pattern) {
  var patternPropertySchema = schema.patternProperties[pattern];
  var patternPropertyNode = toNode(patternPropertySchema, node);

  extendValue(patternPropertyNode, { propertyPattern: pattern });

  return patternPropertyNode;
};

var createCombiningNode = function createCombiningNode(combineSchema, node, combineName) {
  var combineNode = toNode(combineSchema, node);

  extendValue(combineNode, _defineProperty({}, combineName, true));

  return combineNode;
};

var createItemsNode = function createItemsNode(schema, node) {
  var itemsSchema = schema.items;
  var itemsNode = toNode(itemsSchema, node);

  extendValue(itemsNode, { arrayItem: true });

  return itemsNode;
};

var createItemTupleNode = function createItemTupleNode(tupleSchema, node, index) {
  var itemTupleNode = toNode(tupleSchema, node);

  extendValue(itemTupleNode, { arrayIndex: index });

  return itemTupleNode;
};

var combineArrayTypes = ['anyOf', 'allOf', 'oneOf'];

var childrenPopulators = {
  object: function object(schema, node) {
    if (schema.properties) {
      var propertyNames = Object.keys(schema.properties);

      propertyNames.forEach(function (propertyName) {
        var propertyNode = createPropertyNode(schema, node, propertyName);
        node.append(propertyNode);
      });
    }

    if (typeof schema.additionalProperties === 'boolean') {
      var value = node.value();

      value.additionalProperties = schema.additionalProperties;

      node.value(value);
    } else if (_typeof(schema.additionalProperties) === 'object') {
      var additionalPropertiesNode = createAdditionalPropertiesNode(schema, node);

      node.append(additionalPropertiesNode);
    }

    if (schema.definitions) throw new Error('definitions not supported');

    if (schema.patternProperties) {
      var patterns = Object.keys(schema.patternProperties);

      patterns.forEach(function (pattern) {
        var patternPropertyNode = createPatternPropertyNode(schema, node, pattern);
        node.append(patternPropertyNode);
      });
    }

    if (schema.dependencies) throw new Error('dependencies not supported');

    combineArrayTypes.forEach(function (combineName) {
      if (schema[combineName]) {
        var combineDef = schema[combineName];

        combineDef.forEach(function (combineSchema) {
          var combineNode = createCombiningNode(combineSchema, node, combineName);

          node.append(combineNode);
        });
      }
    });

    if (schema.not) {
      var combineSchema = schema.not;
      var combineNode = createCombiningNode(combineSchema, node, 'not');

      node.append(combineNode);
    }
  },
  array: function array(schema, node) {
    if (Array.isArray(schema.items)) {
      schema.items.forEach(function (tupleSchema, index) {
        var itemTupleNode = createItemTupleNode(tupleSchema, node, index);

        node.append(itemTupleNode);
      });
    } else if (_typeof(schema.items) === 'object') {
      var itemsNode = createItemsNode(schema, node);

      node.append(itemsNode);
    }
  },
  any: function any(schema, node) {
    childrenPopulators.object(schema, node);
    childrenPopulators.array(schema, node);
  }
};

var containerNodeTypes = Object.keys(childrenPopulators);

var toNode = function toNode(schema, parent) {
  var create = parent ? parent.createNode : Tree.createRoot;

  var schemaType = typeof schema.type === 'string' ? schema.type : 'any';
  var valueMapper = nodeValueMappers[schemaType];
  var value = valueMapper(schema);
  var node = create(value);

  if (containerNodeTypes.includes(schemaType)) {
    var childrenPopulator = childrenPopulators[schemaType];

    childrenPopulator(schema, node);
  }

  return node;
};

var toTree = function toTree(schema) {
  return toNode(schema, null);
};

var fromSchemaPlugin = function fromSchemaPlugin(fn) {
  var fromSchema = function fromSchema(fn, schema) {
    var treeNode = toTree(schema);

    return treeNode.get();
  };

  fromSchema.def = {
    argTypes: ['fn', 'object'],
    returnType: 'node',
    requires: ['createTree'],
    categories: ['plugin']
  };

  return Object.assign(fn, { fromSchema: fromSchema });
};

module.exports = fromSchemaPlugin;
},{"1tree":77}],20:[function(require,module,exports){
'use strict';

var fromSchema = require('./fromSchema');
var toSchema = require('./toSchema');
var slug = require('./slug');
var treeType = require('./treeType');

module.exports = [fromSchema, toSchema, slug, treeType];
},{"./fromSchema":19,"./slug":21,"./toSchema":22,"./treeType":23}],21:[function(require,module,exports){
'use strict';

var slugPlugin = function slugPlugin(fn) {
  var originalSlug = fn.slug;

  var slug = function slug(fn, root, node) {
    if (root === node) return '';

    var value = fn.value(node);
    var propertyName = value.propertyName;


    return propertyName || originalSlug(fn, root, node);
  };

  slug.def = originalSlug.def;

  return Object.assign(fn, { slug: slug });
};

module.exports = slugPlugin;
},{}],22:[function(require,module,exports){
'use strict';

// see comment in fromSchema

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var valueMapper = function valueMapper(node) {
  var value = node.value();

  var schema = Object.assign({}, value);

  if (value.type === 'union') {
    schema.type = value.typesUnion;

    delete schema.typesUnion;
  } else if (value.type === 'any') {
    delete schema.type;
  }

  return schema;
};

var deleteFromValue = function deleteFromValue(node, propertyName) {
  var value = node.value();

  delete value[propertyName];

  node.value(value);
};

var propertyPopulators = {
  propertyName: function propertyName(node, schema) {
    if (_typeof(schema.properties) !== 'object') schema.properties = {};

    var value = node.value();
    var propertyName = value.propertyName;


    deleteFromValue(node, 'propertyName');

    schema.properties[propertyName] = toJson(node);
  },
  propertyPattern: function propertyPattern(node, schema) {
    if (_typeof(schema.patternProperties) !== 'object') schema.patternProperties = {};

    var value = node.value();
    var pattern = value.propertyPattern;

    deleteFromValue(node, 'propertyPattern');

    schema.patternProperties[pattern] = toJson(node);
  },
  additionalPropertiesSchema: function additionalPropertiesSchema(node, schema) {
    deleteFromValue(node, 'additionalPropertiesSchema');

    schema.additionalProperties = toJson(node);
  },
  arrayItem: function arrayItem(node, schema) {
    deleteFromValue(node, 'arrayItem');

    schema.items = toJson(node);
  },
  arrayIndex: function arrayIndex(node, schema) {
    if (!Array.isArray(schema.items)) schema.items = [];

    var value = node.value();
    var arrayIndex = value.arrayIndex;


    deleteFromValue(node, 'arrayIndex');

    schema.items[arrayIndex] = toJson(node);
  },
  anyOf: function anyOf(node, schema) {
    if (!Array.isArray(schema.anyOf)) schema.anyOf = [];

    deleteFromValue(node, 'anyOf');

    var childSchema = toJson(node);

    schema.anyOf.push(childSchema);
  },
  allOf: function allOf(node, schema) {
    if (!Array.isArray(schema.allOf)) schema.allOf = [];

    deleteFromValue(node, 'allOf');

    var childSchema = toJson(node);

    schema.allOf.push(childSchema);
  },
  oneOf: function oneOf(node, schema) {
    if (!Array.isArray(schema.oneOf)) schema.oneOf = [];

    deleteFromValue(node, 'oneOf');

    var childSchema = toJson(node);

    schema.oneOf.push(childSchema);
  },
  not: function not(node, schema) {
    deleteFromValue(node, 'not');

    schema.not = toJson(node);
  }
};

var populatorProperties = Object.keys(propertyPopulators);

var nestingMapper = function nestingMapper(node) {
  var schema = valueMapper(node);

  var children = node.getChildren();

  children.forEach(function (childNode) {
    var value = childNode.value();

    var populateFor = populatorProperties.filter(function (propertyName) {
      return propertyName in value;
    });

    populateFor.forEach(function (propertyName) {
      var populator = propertyPopulators[propertyName];

      populator(childNode, schema);
    });
  });

  return schema;
};

var valueMappers = {
  object: nestingMapper,
  array: nestingMapper,
  any: nestingMapper,
  union: nestingMapper,
  string: valueMapper,
  number: valueMapper,
  boolean: valueMapper,
  integer: valueMapper,
  null: valueMapper
};

var toJson = function toJson(node) {
  node = node.clone();

  var value = node.value();
  var schemaType = value.type;
  var mapper = valueMappers[schemaType];

  return mapper(node);
};

var toSchemaPlugin = function toSchemaPlugin(fn) {
  var toSchema = function toSchema(fn, node) {
    var wrappedNode = fn.createTree(node);

    return toJson(wrappedNode);
  };

  toSchema.def = {
    argTypes: ['fn', 'node'],
    returnType: 'object',
    requires: ['createTree'],
    categories: ['plugin']
  };

  return Object.assign(fn, { toSchema: toSchema });
};

module.exports = toSchemaPlugin;
},{}],23:[function(require,module,exports){
'use strict';

var treeTypePlugin = function treeTypePlugin(fn) {
  var treeType = function treeType() {
    return 'schema';
  };

  treeType.def = {
    argType: [],
    returnType: 'string',
    requires: [],
    categories: ['meta', 'plugin']
  };

  return Object.assign(fn, { treeType: treeType });
};

module.exports = treeTypePlugin;
},{}],24:[function(require,module,exports){
'use strict'

module.exports = require( './dist' )

},{"./dist":17}],25:[function(require,module,exports){
'use strict';

module.exports = {
  createNode: function createNode(value) {
    return {
      value: value,
      children: []
    };
  },
  argTypes: ['nodeValue'],
  returnType: 'node',
  categories: ['manipulation', 'adapter']
};
},{}],26:[function(require,module,exports){
'use strict';

module.exports = {
  getChildren: function getChildren(node) {
    return node.children;
  },
  argTypes: ['node'],
  returnType: '[node]',
  categories: ['traversal', 'adapter']
};
},{}],27:[function(require,module,exports){
'use strict';

var createNode = require('./createNode');
var getChildren = require('./getChildren');
var insertBefore = require('./insertBefore');
var remove = require('./remove');
var value = require('./value');

module.exports = { createNode: createNode, getChildren: getChildren, insertBefore: insertBefore, remove: remove, value: value };
},{"./createNode":25,"./getChildren":26,"./insertBefore":28,"./remove":29,"./value":30}],28:[function(require,module,exports){
'use strict';

module.exports = {
  insertBefore: function insertBefore(fn, root, parentNode, childNode, referenceNode) {
    if (root) fn.remove(fn, root, childNode);

    if (referenceNode) {
      var referenceIndex = parentNode.children.indexOf(referenceNode);

      parentNode.children.splice(referenceIndex, 0, childNode);
    } else {
      parentNode.children.push(childNode);
    }

    return childNode;
  },
  argTypes: ['fn', 'rootNode', 'node', 'node', 'node'],
  returnType: 'node',
  requires: ['remove'],
  categories: ['manipulation', 'adapter']
};
},{}],29:[function(require,module,exports){
'use strict';

module.exports = {
  remove: function remove(fn, root, node) {
    var parentNode = fn.getParent(fn, root, node);

    if (!parentNode) return;

    var index = parentNode.children.indexOf(node);

    parentNode.children.splice(index, 1);

    return node;
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['getParent'],
  categories: ['manipulation', 'adapter']
};
},{}],30:[function(require,module,exports){
'use strict';

module.exports = {
  value: function value(node, _value) {
    if (_value !== undefined) {
      node.value = _value;
    }

    return node.value;
  },
  argTypes: ['node', 'nodeValue?'],
  returnType: 'nodeValue',
  categories: ['manipulation', 'adapter']
};
},{}],31:[function(require,module,exports){
'use strict';

module.exports = {
  createNode: function createNode() {
    throw new Error('Adapter does not implement createNode');
  },
  argTypes: ['nodeValue'],
  returnType: 'node',
  categories: ['manipulation', 'adapter']
};
},{}],32:[function(require,module,exports){
'use strict';

module.exports = {
  getChildren: function getChildren() {
    throw new Error('Adapter does not implement getChildren');
  },
  argTypes: ['node'],
  returnType: '[node]',
  categories: ['traversal', 'adapter']
};
},{}],33:[function(require,module,exports){
'use strict';

module.exports = {
  insertBefore: function insertBefore() {
    throw new Error('Adapter does not implement insertBefore');
  },
  argTypes: ['fn', 'rootNode', 'node', 'node', 'node'],
  returnType: 'node',
  requires: ['remove'],
  categories: ['manipulation', 'adapter']
};
},{}],34:[function(require,module,exports){
'use strict';

module.exports = {
  remove: function remove() {
    throw new Error('Adapter does not implement remove');
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['getParent'],
  categories: ['manipulation', 'adapter']
};
},{}],35:[function(require,module,exports){
'use strict';

module.exports = {
  value: function value() {
    throw new Error('Adapter does not implement value');
  },
  argTypes: ['node', 'nodeValue?'],
  returnType: 'nodeValue',
  categories: ['manipulation', 'adapter']
};
},{}],36:[function(require,module,exports){
'use strict';

var append = require('./manipulation/append');
var empty = require('./manipulation/empty');
var insertAfter = require('./manipulation/insertAfter');
var insertAt = require('./manipulation/insertAt');
var prepend = require('./manipulation/prepend');
var removeAt = require('./manipulation/removeAt');
var replaceChild = require('./manipulation/replaceChild');
var unwrap = require('./manipulation/unwrap');
var wrap = require('./manipulation/wrap');

var ancestors = require('./traversal/ancestors');
var atPath = require('./traversal/atPath');
var childAt = require('./traversal/childAt');
var closest = require('./traversal/closest');
var contains = require('./traversal/contains');
var descendents = require('./traversal/descendents');
var find = require('./traversal/find');
var findAll = require('./traversal/findAll');
var firstChild = require('./traversal/firstChild');
var getParent = require('./traversal/getParent');
var getPath = require('./traversal/getPath');
var hasChildren = require('./traversal/hasChildren');
var index = require('./traversal/index');
var isEmpty = require('./traversal/isEmpty');
var lastChild = require('./traversal/lastChild');
var nextSibling = require('./traversal/nextSibling');
var previousSibling = require('./traversal/previousSibling');
var siblings = require('./traversal/siblings');
var slug = require('./traversal/slug');
var walk = require('./traversal/walk');
var walkUp = require('./traversal/walkUp');

var createNode = require('./adapter/createNode');
var getChildren = require('./adapter/getChildren');
var insertBefore = require('./adapter/insertBefore');
var remove = require('./adapter/remove');
var value = require('./adapter/value');

module.exports = {
  append: append, atPath: atPath, empty: empty, insertAfter: insertAfter, insertAt: insertAt, prepend: prepend, removeAt: removeAt, replaceChild: replaceChild,
  unwrap: unwrap, wrap: wrap, ancestors: ancestors, childAt: childAt, closest: closest, contains: contains, descendents: descendents, find: find,
  findAll: findAll, firstChild: firstChild, getParent: getParent, getPath: getPath, hasChildren: hasChildren, index: index, isEmpty: isEmpty,
  lastChild: lastChild, nextSibling: nextSibling, previousSibling: previousSibling, siblings: siblings, slug: slug, walk: walk, walkUp: walkUp,
  createNode: createNode, getChildren: getChildren, insertBefore: insertBefore, remove: remove, value: value
};
},{"./adapter/createNode":31,"./adapter/getChildren":32,"./adapter/insertBefore":33,"./adapter/remove":34,"./adapter/value":35,"./manipulation/append":37,"./manipulation/empty":38,"./manipulation/insertAfter":39,"./manipulation/insertAt":40,"./manipulation/prepend":41,"./manipulation/removeAt":42,"./manipulation/replaceChild":43,"./manipulation/unwrap":44,"./manipulation/wrap":45,"./traversal/ancestors":46,"./traversal/atPath":47,"./traversal/childAt":48,"./traversal/closest":49,"./traversal/contains":50,"./traversal/descendents":51,"./traversal/find":52,"./traversal/findAll":53,"./traversal/firstChild":54,"./traversal/getParent":55,"./traversal/getPath":56,"./traversal/hasChildren":57,"./traversal/index":58,"./traversal/isEmpty":59,"./traversal/lastChild":60,"./traversal/nextSibling":61,"./traversal/previousSibling":62,"./traversal/siblings":63,"./traversal/slug":64,"./traversal/walk":65,"./traversal/walkUp":66}],37:[function(require,module,exports){
'use strict';

module.exports = {
  append: function append(fn, root, parentNode, childNode) {
    return fn.insertBefore(fn, root, parentNode, childNode);
  },
  argTypes: ['fn', 'rootNode', 'node', 'node'],
  returnType: 'node',
  requires: ['insertBefore'],
  categories: ['manipulation']
};
},{}],38:[function(require,module,exports){
'use strict';

module.exports = {
  empty: function empty(fn, root, parentNode) {
    var children = fn.getChildren(parentNode).slice();

    return children.reduce(function (removed, node) {
      removed.push(fn.remove(fn, parentNode, node));

      return removed;
    }, []);
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: '[node]',
  requires: ['getChildren', 'remove'],
  categories: ['manipulation']
};
},{}],39:[function(require,module,exports){
'use strict';

module.exports = {
  insertAfter: function insertAfter(fn, root, parentNode, childNode, referenceNode) {
    var children = fn.getChildren(parentNode);
    var referenceIndex = children.indexOf(referenceNode);
    var beforeNode = children[referenceIndex + 1];

    return fn.insertBefore(fn, root, parentNode, childNode, beforeNode);
  },
  argTypes: ['fn', 'rootNode', 'node', 'node', 'node'],
  returnType: 'node',
  requires: ['getChildren', 'insertBefore'],
  categories: ['manipulation']
};
},{}],40:[function(require,module,exports){
'use strict';

module.exports = {
  insertAt: function insertAt(fn, root, parentNode, childNode, index) {
    var children = fn.getChildren(parentNode);
    var referenceNode = children[index];

    return fn.insertBefore(fn, root, parentNode, childNode, referenceNode);
  },
  argTypes: ['fn', 'rootNode', 'node', 'node', 'integer'],
  returnType: 'node',
  requires: ['getChildren', 'insertBefore'],
  categories: ['manipulation']
};
},{}],41:[function(require,module,exports){
'use strict';

module.exports = {
  prepend: function prepend(fn, root, parentNode, childNode) {
    var children = fn.getChildren(parentNode);

    // if child[ 0 ] is undefined this is the same as append
    return fn.insertBefore(fn, root, parentNode, childNode, children[0]);
  },
  argTypes: ['fn', 'rootNode', 'node', 'node'],
  returnType: 'node',
  requires: ['getChildren', 'insertBefore'],
  categories: ['manipulation']
};
},{}],42:[function(require,module,exports){
'use strict';

module.exports = {
  removeAt: function removeAt(fn, root, parentNode, index) {
    var children = fn.getChildren(parentNode);
    var childNode = children[index];

    return fn.remove(fn, root, childNode);
  },
  argTypes: ['fn', 'rootNode', 'node', 'integer'],
  returnType: 'node',
  requires: ['getChildren', 'remove'],
  categories: ['manipulation']
};
},{}],43:[function(require,module,exports){
'use strict';

module.exports = {
  replaceChild: function replaceChild(fn, root, parentNode, newNode, oldNode) {
    fn.insertBefore(fn, root, parentNode, newNode, oldNode);

    return fn.remove(fn, root, oldNode);
  },
  argTypes: ['fn', 'rootNode', 'node', 'node', 'node'],
  returnType: 'node',
  requires: ['insertBefore', 'remove'],
  categories: ['manipulation']
};
},{}],44:[function(require,module,exports){
'use strict';

module.exports = {
  unwrap: function unwrap(fn, root, node) {
    var parent = fn.getParent(fn, root, node);
    var grandparent = fn.getParent(fn, root, parent);
    var children = fn.getChildren(parent);

    children.forEach(function (child) {
      return fn.insertBefore(fn, root, grandparent, child, parent);
    });

    return fn.remove(fn, root, parent);
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['getParent', 'getChildren', 'insertBefore', 'remove'],
  categories: ['manipulation']
};
},{}],45:[function(require,module,exports){
'use strict';

module.exports = {
  wrap: function wrap(fn, root, node, newNode) {
    var parent = fn.getParent(fn, root, node);

    fn.insertBefore(fn, root, parent, newNode, node);
    fn.append(fn, root, newNode, node);

    return newNode;
  },
  argTypes: ['fn', 'rootNode', 'node', 'node'],
  returnType: 'node',
  requires: ['getParent', 'insertBefore', 'append'],
  categories: ['manipulation']
};
},{}],46:[function(require,module,exports){
'use strict';

module.exports = {
  ancestors: function ancestors(fn, root, node) {
    var parentNodes = [];

    var parent = fn.getParent(fn, root, node);

    if (parent) fn.walkUp(fn, root, parent, function (n) {
      parentNodes.push(n);
    });

    return parentNodes;
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: '[node]',
  requires: ['getParent', 'walkUp']
};
},{}],47:[function(require,module,exports){
'use strict';

module.exports = {
  atPath: function atPath(fn, root, path) {
    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';

    var node = root;

    var slugs = path.split(separator).filter(function (s) {
      return s !== '';
    });

    slugs.forEach(function (slug) {
      if (node) {
        var children = fn.getChildren(node);

        node = children.find(function (childNode) {
          return fn.slug(fn, root, childNode) === slug;
        });
      }
    });

    return node;
  },
  argTypes: ['fn', 'rootNode', 'string', 'string'],
  returnType: 'node',
  requires: ['walkUp', 'slug'],
  categories: ['traversal']
};
},{}],48:[function(require,module,exports){
'use strict';

module.exports = {
  childAt: function childAt(fn, node, i) {
    return fn.getChildren(node)[i];
  },
  argTypes: ['fn', 'node', 'integer'],
  returnType: 'node',
  requires: ['getChildren'],
  categories: ['traversal']
};
},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  closest: function closest(fn, root, node, predicate) {
    var targetNode = void 0;

    fn.walkUp(fn, root, node, function (currentNode) {
      if (predicate(currentNode)) {
        targetNode = currentNode;

        return true;
      }
    });

    return targetNode;
  },
  argTypes: ['fn', 'rootNode', 'node', 'node => boolean'],
  returnType: 'node',
  requires: ['walkUp'],
  categories: ['traversal']
};
},{}],50:[function(require,module,exports){
'use strict';

module.exports = {
  contains: function contains(fn, node, predicate) {
    return !!fn.find(fn, node, predicate);
  },
  argTypes: ['fn', 'node', 'node => boolean'],
  returnType: 'boolean',
  requires: ['find'],
  categories: ['traversal']
};
},{}],51:[function(require,module,exports){
'use strict';

module.exports = {
  descendents: function descendents(fn, node) {
    return fn.findAll(fn, node, function (n) {
      return n !== node;
    });
  },
  argTypes: ['fn', 'node'],
  returnType: '[node]',
  requires: ['findAll'],
  categories: ['traversal']
};
},{}],52:[function(require,module,exports){
'use strict';

module.exports = {
  find: function find(fn, node, predicate) {
    var targetNode = void 0;

    fn.walk(fn, node, function (currentNode) {
      if (predicate(currentNode)) {
        targetNode = currentNode;

        return true;
      }
    });

    return targetNode;
  },
  argTypes: ['fn', 'node', 'node => boolean'],
  returnType: 'node',
  requires: ['walk'],
  categories: ['traversal']
};
},{}],53:[function(require,module,exports){
'use strict';

module.exports = {
  findAll: function findAll(fn, node, predicate) {
    var nodes = [];

    fn.walk(fn, node, function (currentNode) {
      if (predicate(currentNode)) {
        nodes.push(currentNode);
      }
    });

    return nodes;
  },
  argTypes: ['fn', 'node', 'node => boolean'],
  returnType: '[node]',
  requires: ['walk'],
  categories: ['traversal']
};
},{}],54:[function(require,module,exports){
'use strict';

module.exports = {
  firstChild: function firstChild(fn, node) {
    return fn.getChildren(node)[0];
  },
  argTypes: ['fn', 'node'],
  returnType: 'node',
  requires: ['getChildren'],
  categories: ['traversal']
};
},{}],55:[function(require,module,exports){
'use strict';

/*
  This is horrifically inefficient, however, given that a root is present this
  will *always* work. The performance issue is mitigated by the parent-map
  plugin, which wraps getParent, insertBefore etc.
*/

module.exports = {
  getParent: function getParent(fn, root, node) {
    return fn.find(fn, root, function (currentNode) {
      return fn.getChildren(currentNode).includes(node);
    });
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['find', 'getChildren'],
  categories: ['traversal']
};
},{}],56:[function(require,module,exports){
'use strict';

module.exports = {
  getPath: function getPath(fn, root, node) {
    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';

    if (root === node) return separator;

    var slugs = [];

    fn.walkUp(fn, root, node, function (n) {
      var slug = fn.slug(fn, root, n);

      if (slug.includes(separator)) {
        var message = 'Node slugs should not contain the separator string "' + separator + '"';

        throw new Error(message);
      }

      slugs.unshift(slug);
    });

    return slugs.join(separator);
  },
  argTypes: ['fn', 'rootNode', 'node', 'string'],
  returnType: 'string',
  requires: ['walkUp', 'slug'],
  categories: ['traversal']
};
},{}],57:[function(require,module,exports){
'use strict';

module.exports = {
  hasChildren: function hasChildren(fn, node) {
    return fn.getChildren(node).length > 0;
  },
  argTypes: ['fn', 'node'],
  returnType: 'boolean',
  requires: ['getChildren'],
  categories: ['traversal']
};
},{}],58:[function(require,module,exports){
'use strict';

module.exports = {
  index: function index(fn, root, node) {
    if (root === node) return 0;

    var parent = fn.getParent(fn, root, node);
    var children = fn.getChildren(parent);

    return children.indexOf(node);
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'integer',
  requires: ['getParent', 'getChildren'],
  categories: ['traversal']
};
},{}],59:[function(require,module,exports){
'use strict';

module.exports = {
  isEmpty: function isEmpty(fn, node) {
    return false;
  }, //eslint-disable-line no-unused-vars
  argTypes: ['fn', 'node'],
  returnType: 'boolean',
  requires: [],
  categories: ['traversal']
};
},{}],60:[function(require,module,exports){
'use strict';

module.exports = {
  lastChild: function lastChild(fn, node) {
    var children = fn.getChildren(node);

    return children[children.length - 1];
  },
  argTypes: ['fn', 'node'],
  returnType: 'node',
  requires: ['getChildren'],
  categories: ['traversal']
};
},{}],61:[function(require,module,exports){
'use strict';

module.exports = {
  nextSibling: function nextSibling(fn, root, node) {
    var parent = fn.getParent(fn, root, node);
    var children = fn.getChildren(parent);

    var index = children.indexOf(node);

    return children[index + 1];
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['getParent', 'getChildren'],
  categories: ['traversal']
};
},{}],62:[function(require,module,exports){
'use strict';

module.exports = {
  previousSibling: function previousSibling(fn, root, node) {
    var parent = fn.getParent(fn, root, node);
    var children = fn.getChildren(parent);

    var index = children.indexOf(node);

    return children[index - 1];
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'node',
  requires: ['getParent', 'getChildren'],
  categories: ['traversal']
};
},{}],63:[function(require,module,exports){
'use strict';

module.exports = {
  siblings: function siblings(fn, root, node) {
    var parent = fn.getParent(fn, root, node);
    var children = fn.getChildren(parent);

    return children.filter(function (child) {
      return child !== node;
    });
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: '[node]',
  requires: ['getParent', 'getChildren'],
  categories: ['traversal']
};
},{}],64:[function(require,module,exports){
'use strict';

module.exports = {
  slug: function slug(fn, root, node) {
    return root === node ? '' : String(fn.index(fn, root, node));
  },
  argTypes: ['fn', 'rootNode', 'node'],
  returnType: 'string',
  requires: ['index'],
  categories: ['traversal']
};
},{}],65:[function(require,module,exports){
'use strict';

module.exports = {
  walk: function walk(fn, node, callback) {
    var current = void 0,
        parent = void 0,
        depth = void 0,
        i = void 0,
        children = void 0,
        stop = void 0;
    var nodes = [node];
    var parents = [null];
    var depths = [0];

    while (nodes.length) {
      current = nodes.pop();
      parent = parents.pop();
      depth = depths.pop();

      stop = callback(current, parent, depth);

      if (stop) break;

      children = fn.getChildren(current);

      for (i = children.length - 1; i >= 0; i--) {
        nodes.push(children[i]);
        parents.push(current);
        depths.push(depth + 1);
      }
    }
  },
  argTypes: ['fn', 'node', '( node, node, integer ) => boolean'],
  requires: ['getChildren'],
  categories: ['traversal']
};
},{}],66:[function(require,module,exports){
'use strict';

module.exports = {
  walkUp: function walkUp(fn, root, node, callback) {
    var stop = callback(node);

    if (!stop) {
      var parent = fn.getParent(fn, root, node);
      while (parent && !stop) {
        stop = callback(parent);
        if (!stop) parent = fn.getParent(fn, root, parent);
      }
    }
  },
  argTypes: ['fn', 'rootNode', 'node', 'node => boolean'],
  requires: ['getParent'],
  categories: ['traversal']
};
},{}],67:[function(require,module,exports){
'use strict';

var baseDefs = require('./defs');

var mapper = function mapper(defs) {
  var makeFn = function makeFn(name) {
    var fnDef = defs[name];
    var fn = fnDef[name];

    fn.def = fnDef;

    return fn;
  };

  var fnames = Object.keys(defs);

  return fnames.reduce(function (fns, name) {
    fns[name] = makeFn(name);

    return fns;
  }, {});
};

var fnFactory = function fnFactory(adapter) {
  var adapterDefs = Object.keys(adapter).reduce(function (defs, fname) {
    var adapterDef = adapter[fname];

    if (typeof adapterDef === 'function') {
      var fn = adapterDef;
      adapterDef = adapterDef.def || baseDefs[fname] || {};
      adapterDef[fname] = fn;
    }

    defs[fname] = adapterDef;

    return defs;
  }, {});

  return mapper(Object.assign({}, baseDefs, adapterDefs));
};

module.exports = fnFactory;
},{"./defs":36}],68:[function(require,module,exports){
'use strict';

require('./polyfills');

var defaultAdapter = require('./adapter/default');
var fnFactory = require('./fn-factory');

var meta = require('./plugins/meta');
var parentMap = require('./plugins/parent-map');
var serializer = require('./plugins/serializer');
var wrapNodes = require('./plugins/wrap-nodes');
var accepts = require('./plugins/accepts');
var nodeType = require('./plugins/nodeType');
var id = require('./plugins/id');

var pluginMap = { parentMap: parentMap, accepts: accepts, nodeType: nodeType, id: id, serializer: serializer, meta: meta, wrapNodes: wrapNodes };
var pluginArray = Object.keys(pluginMap).map(function (key) {
  return pluginMap[key];
});

var treeFactory = function treeFactory(adapter, plugins) {
  var fn = fnFactory(adapter);

  if (Array.isArray(plugins)) plugins.forEach(function (plugin) {
    return plugin(fn);
  });

  // create wrapped API
  var Tree = function Tree(root) {
    return fn.createTree(root);
  };

  var fnames = Object.keys(fn);

  fnames.forEach(function (fname) {
    var func = fn[fname];
    var def = func.def || {};
    var argTypes = Array.isArray(def.argTypes) ? def.argTypes : [];

    Tree[fname] = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (argTypes.includes('fn')) {
        return func.apply(undefined, [fn].concat(args));
      }

      return func.apply(undefined, args);
    };
  });

  Tree.createRoot = function (value) {
    return Tree(Tree.createNode(value));
  };
  Tree.fn = fn;
  Tree.adapter = treeFactory;
  Tree.plugin = function (plugin) {
    return plugin(fn);
  };
  Tree.plugins = pluginMap;

  return Tree;
};

module.exports = treeFactory(defaultAdapter, pluginArray);
},{"./adapter/default":27,"./fn-factory":67,"./plugins/accepts":69,"./plugins/id":70,"./plugins/meta":71,"./plugins/nodeType":72,"./plugins/parent-map":73,"./plugins/serializer":74,"./plugins/wrap-nodes":75,"./polyfills":76}],69:[function(require,module,exports){
'use strict';

var acceptsNode = function acceptsNode(fn) {
  var accepts = function accepts(fn, node, childNode) {
    return !fn.isEmpty(fn, node);
  }; //eslint-disable-line no-unused-vars

  accepts.def = {
    argTypes: ['fn', 'node', 'node'],
    returnType: 'boolean',
    require: ['isEmpty'],
    categories: ['node', 'plugin']
  };

  var originalInsertBefore = fn.insertBefore;

  var insertBefore = function insertBefore(fn, root, parentNode, childNode, referenceNode) {
    if (!fn.accepts(fn, parentNode, childNode)) throw new Error('Node cannot accept this child');

    return originalInsertBefore(fn, root, parentNode, childNode, referenceNode);
  };

  insertBefore.def = originalInsertBefore.def;

  return Object.assign(fn, { accepts: accepts, insertBefore: insertBefore });
};

module.exports = acceptsNode;
},{}],70:[function(require,module,exports){
'use strict';

var utils = require('mojule-utils');

var lazyId = function lazyId(fn) {
  var id = function id(fn, node) {
    var value = fn.value(node);

    if (value._id) return value._id;

    var nodeType = fn.nodeType(fn, node);
    var id = utils.id(nodeType);

    value._id = id;

    fn.value(node, value);

    return id;
  };

  id.def = {
    argTypes: ['fn', 'node'],
    returnType: 'string',
    require: ['value', 'nodeType'],
    categories: ['node', 'plugin']
  };

  return Object.assign(fn, { id: id });
};

module.exports = lazyId;
},{"mojule-utils":178}],71:[function(require,module,exports){
'use strict';

/*
  Get/set runtime data for nodes that aren't written to the nodes themselves

  For example, when visualising trees you might want to allow the user to
  collapse or expand nodes for the duration of the session, but not actually
  modify the nodes themselves
*/

var metaPlugin = function metaPlugin(fn) {
  var metaMap = new Map();

  var meta = function meta(fn, node, key, value) {
    if (!metaMap.has(node)) {
      metaMap.set(node, {});
    }

    var obj = metaMap.get(node);

    if (value !== undefined) {
      obj[key] = value;
    }

    return obj[key];
  };

  meta.def = {
    argTypes: ['fn', 'node', 'string', 'any'],
    returnType: 'any',
    requires: [],
    categories: ['meta', 'plugin']
  };

  return Object.assign(fn, { meta: meta });
};

module.exports = metaPlugin;
},{}],72:[function(require,module,exports){
'use strict';

var getNodeType = function getNodeType(fn) {
  var nodeType = function nodeType(fn, node) {
    var value = fn.value(node);

    if (typeof value.nodeType === 'string' && value.nodeType.length > 0) return value.nodeType;

    return 'treeNode';
  };

  nodeType.def = {
    argTypes: ['fn', 'node'],
    returnType: 'string',
    require: ['value'],
    categories: ['node', 'plugin']
  };

  return Object.assign(fn, { nodeType: nodeType });
};

module.exports = getNodeType;
},{}],73:[function(require,module,exports){
'use strict';

var parentMap = function parentMap(fn) {
  var parents = new Map();

  var original = {
    insertBefore: fn.insertBefore,
    remove: fn.remove,
    getParent: fn.getParent
  };

  var insertBefore = function insertBefore(fn, root, parentNode, childNode, referenceNode) {
    var value = original.insertBefore(fn, root, parentNode, childNode, referenceNode);

    parents.set(childNode, parentNode);

    return value;
  };

  var remove = function remove(fn, root, node) {
    var value = original.remove(fn, root, node);

    parents.set(node, null);

    return value;
  };

  var getParent = function getParent(fn, root, node) {
    var parent = parents.get(node);

    if (!parent && original.getParent) {
      parent = original.getParent(fn, root, node);
      parents.set(node, parent);
    }

    return parent;
  };

  var wrapped = { insertBefore: insertBefore, remove: remove, getParent: getParent };

  Object.keys(wrapped).forEach(function (fname) {
    wrapped[fname].def = Object.assign({
      wraps: original[fname]
    }, original[fname].def);

    wrapped[fname].def.categories.push('parentMap', 'plugin');
  });

  return Object.assign(fn, wrapped);
};

module.exports = parentMap;
},{}],74:[function(require,module,exports){
'use strict';

var cloneObj = function cloneObj(obj) {
  return JSON.parse(JSON.stringify(obj));
};

var serializer = function serializer(fn) {
  var serialize = function serialize(node) {
    return {
      value: fn.value(node),
      children: fn.getChildren(node).map(serialize)
    };
  };

  serialize.def = {
    argTypes: ['node'],
    returnType: 'object',
    requires: ['value', 'getChildren'],
    categories: ['serializer', 'plugin']
  };

  var deserialize = function deserialize(obj) {
    var parentNode = fn.createNode(obj.value);

    if (Array.isArray(obj.children)) {
      obj.children.forEach(function (child) {
        fn.append(fn, null, parentNode, deserialize(child));
      });
    }

    return parentNode;
  };

  deserialize.def = {
    argTypes: ['object'],
    returnType: 'node',
    requires: ['createNode', 'append'],
    categories: ['serializer', 'plugin']
  };

  var clone = function clone(fn, node) {
    return fn.deserialize(cloneObj(fn.serialize(node)));
  };

  clone.def = {
    argTypes: ['fn', 'node'],
    returnType: 'node',
    requires: ['serialize', 'deserialize'],
    categories: ['clone', 'plugin']
  };

  return Object.assign(fn, { serialize: serialize, deserialize: deserialize, clone: clone });
};

module.exports = serializer;
},{}],75:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var utils = require('mojule-utils');
var clone = utils.clone;


var signatureToDef = function signatureToDef(sig) {
  var segs = sig.split('=>');
  var argTypes = segs[0].replace('(', '').replace(')', '').split(',').map(function (arg) {
    return arg.trim();
  });
  var returnType = segs[1].trim();

  return { argTypes: argTypes, returnType: returnType };
};

var argsMap = function argsMap(fn, argTypes, map) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var wrappedArgs = argTypes.map(function (typeName, i) {
      var value = args[i];

      if (map[typeName]) {
        return map[typeName](value);
      }

      return value;
    });

    return fn.apply(undefined, _toConsumableArray(wrappedArgs));
  };
};

var wrapNodes = function wrapNodes(_fn) {
  var fnames = Object.keys(_fn);

  var wrappedFn = function wrappedFn(root, _node, fname) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var func = _fn[fname];
      var def = func.def || {};
      var argTypes = def && Array.isArray(def.argTypes) ? def.argTypes : [];

      var firstNode = false;

      var curryMap = {
        fn: function fn() {
          return _fn;
        },
        rootNode: function rootNode() {
          return root;
        },
        node: function node() {
          if (!firstNode) {
            firstNode = true;
            return _node;
          }

          return args.shift().get();
        },
        any: function any() {
          return args.shift();
        }
      };

      var argMap = {
        rootNode: function rootNode(n) {
          return wrappedNode(root, n);
        },
        node: function node(n) {
          return wrappedNode(root, n);
        }
      };

      var curried = argTypes.map(function (t) {
        if (curryMap[t]) return curryMap[t]();

        if (t.indexOf('=>') !== -1) {
          var _def = signatureToDef(t);
          var fnArg = args.shift();

          return argsMap(fnArg, _def.argTypes, argMap);
        }

        return curryMap.any();
      });

      var result = func.apply(undefined, _toConsumableArray(curried));

      if (def.returnType === 'node') {
        result = wrappedNode(root, result);
      } else if (def.returnType === '[node]') {
        result = result.map(function (n) {
          return wrappedNode(root, n);
        });
      }

      return result;
    };
  };

  var wrappedNode = function wrappedNode(root, node) {
    if (node === null || node === undefined) return node;

    var wrapped = fnames.reduce(function (wrappedNode, fname) {
      wrappedNode[fname] = wrappedFn(root, node, fname);

      return wrappedNode;
    }, {});

    wrapped.get = function () {
      return node;
    };
    wrapped.getRoot = function () {
      return root;
    };

    // assist with debugging
    Object.defineProperty(wrapped, '_value', {
      get: function get() {
        return clone(_fn.value(node));
      }
    });
    Object.defineProperty(wrapped, '_children', {
      get: function get() {
        return clone(_fn.getChildren(node));
      }
    });

    return wrapped;
  };

  var createTree = function createTree(root) {
    return wrappedNode(root, root);
  };

  createTree.def = {
    argTypes: ['nodeValue'],
    returnType: 'wrappedNode',
    requires: ['createNode'],
    categories: ['wrapped-nodes', 'plugin']
  };

  return Object.assign(_fn, { createTree: createTree });
};

module.exports = wrapNodes;
},{"mojule-utils":178}],76:[function(require,module,exports){
'use strict';

/*eslint-disable */
if (!Array.prototype.includes) {
  Array.prototype.includes = function (searchElement /*, fromIndex*/) {
    'use strict';

    var O = Object(this);
    var len = parseInt(O.length) || 0;
    if (len === 0) {
      return false;
    }
    var n = parseInt(arguments[1]) || 0;
    var k;
    if (n >= 0) {
      k = n;
    } else {
      k = len + n;
      if (k < 0) {
        k = 0;
      }
    }
    var currentElement;
    while (k < len) {
      currentElement = O[k];
      if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
        return true;
      }
      k++;
    }
    return false;
  };
}
/*eslint-enable */
},{}],77:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":68,"dup":3}],78:[function(require,module,exports){
module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }

},{}],79:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],80:[function(require,module,exports){
module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};
},{}],81:[function(require,module,exports){

},{}],82:[function(require,module,exports){
(function (global){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"buffer":83}],83:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":79,"ieee754":137,"isarray":140}],84:[function(require,module,exports){
'use strict';

var ticky = require('ticky');

module.exports = function debounce (fn, args, ctx) {
  if (!fn) { return; }
  ticky(function run () {
    fn.apply(ctx || null, args || []);
  });
};

},{"ticky":210}],85:[function(require,module,exports){
'use strict';

var atoa = require('atoa');
var debounce = require('./debounce');

module.exports = function emitter (thing, options) {
  var opts = options || {};
  var evt = {};
  if (thing === undefined) { thing = {}; }
  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }
    return thing;
  };
  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!
    thing.on(type, fn);
    return thing;
  };
  thing.off = function (type, fn) {
    var c = arguments.length;
    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];
      if (!et) { return thing; }
      et.splice(et.indexOf(fn), 1);
    }
    return thing;
  };
  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };
  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;
      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }
      et.forEach(function emitter (listen) {
        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }
        if (listen._once) { thing.off(type, listen); }
      });
      return thing;
    };
  };
  return thing;
};

},{"./debounce":84,"atoa":78}],86:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":139}],87:[function(require,module,exports){
(function (global){
'use strict';

var customEvent = require('custom-event');
var eventmap = require('./eventmap');
var doc = global.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!global.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

module.exports = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy (el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard (el, type, fn) {
  return el.attachEvent('on' + type, wrap(el, type, fn));
}

function removeEventEasy (el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard (el, type, fn) {
  var listener = unwrap(el, type, fn);
  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent (el, type, model) {
  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }
  function makeClassicEvent () {
    var e;
    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }
    return e;
  }
  function makeCustomEvent () {
    return new customEvent(type, { detail: model });
  }
}

function wrapperFactory (el, type, fn) {
  return function wrapper (originalEvent) {
    var e = originalEvent || global.event;
    e.target = e.target || e.srcElement;
    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap (el, type, fn) {
  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap (el, type, fn) {
  var i = find(el, type, fn);
  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory
    return wrapper;
  }
}

function find (el, type, fn) {
  var i, item;
  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];
    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./eventmap":88,"custom-event":98}],88:[function(require,module,exports){
(function (global){
'use strict';

var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in global) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

module.exports = eventmap;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],89:[function(require,module,exports){
'use strict'

module.exports = adapterFactory;

function adapterFactory(implementation){
	ensureImplementation(implementation);

	var adapter = {}

	var baseAdapter = {
		removeSubsets: function (nodes){
			return removeSubsets(adapter, nodes);
		},
		existsOne: function(test, elems){
			return existsOne(adapter, test, elems);
		},
		getSiblings: function(elem){
			return getSiblings(adapter, elem);
		},
		hasAttrib: function(elem, name){
			return hasAttrib(adapter, elem, name);
		},
		findOne: function(test, arr){
			return findOne(adapter, test, arr);
		},
		findAll: function(test, elems){
			return findAll(adapter, test, elems)
		}
	};

	Object.assign(adapter, baseAdapter, implementation);

	return adapter;
}

var expectImplemented = [
	"isTag", "getAttributeValue", "getChildren", "getName", "getParent",
	"getText"
];

function ensureImplementation(implementation){
	if(!implementation)	throw new TypeError("Expected implementation")

	var notImplemented = expectImplemented.filter(function(fname){
		return typeof implementation[fname] !== "function";
	});

	if(notImplemented.length){
		var notList = "(" + notImplemented.join(", ") + ")";
		var message = "Expected functions " + notList + " to be implemented";
		throw new Error(message);
	}
}

function removeSubsets(adapter, nodes){
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while(--idx > -1){
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while(ancestor){
			if(nodes.indexOf(ancestor) > -1){
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = adapter.getParent(ancestor)
		}

		// If the node has been found to be unique, re-insert it.
		if(replace){
			nodes[idx] = node;
		}
	}

	return nodes;
}

function existsOne(adapter, test, elems){
	return elems.some(function(elem){
		return adapter.isTag(elem) ?
			test(elem) || adapter.existsOne(test, adapter.getChildren(elem)) :
			false;
	});
}

function getSiblings(adapter, elem){
	var parent = adapter.getParent(elem);
	return parent && adapter.getChildren(parent);
}


function hasAttrib(adapter, elem, name){
	return adapter.getAttributeValue(elem,name) !== undefined
}

function findOne(adapter, test, arr){
	var elem = null;

	for(var i = 0, l = arr.length; i < l && !elem; i++){
		if(test(arr[i])){
			elem = arr[i];
		} else {
			var childs = adapter.getChildren(arr[i]);
			if(childs && childs.length > 0){
				elem = adapter.findOne(test, childs);
			}
		}
	}

	return elem;
}

function findAll(adapter, test, elems){
	var result = [];

	for(var i = 0, j = elems.length; i < j; i++){
		if(!adapter.isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);
		var childs = adapter.getChildren(elems[i]);
		if(childs) result = result.concat(adapter.findAll(test, childs));
	}

	return result;
}

},{}],90:[function(require,module,exports){
"use strict";

module.exports = CSSselect;

var DomUtils       = require("domutils"),
	falseFunc      = require("boolbase").falseFunc,
	compileFactory = require("./lib/compile.js"),
	defaultCompile = compileFactory(DomUtils);

function adapterCompile(adapter){
	return adapter === DomUtils ? defaultCompile : compileFactory(adapter);
}

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
		options = options || {}
		options.adapter = options.adapter || DomUtils;
		var compile = adapterCompile(options.adapter);

		if(typeof query !== "function") query = compile.compileUnsafe(query, options, elems);
		if(query.shouldTestNextSiblings) elems = appendNextSiblings((options && options.context) || elems, options.adapter);
		if(!Array.isArray(elems)) elems = options.adapter.getChildren(elems);
		else elems = options.adapter.removeSubsets(elems);
		return searchFunc(query, elems, options);
	};
}

function getNextSiblings(elem, adapter){
	var siblings = adapter.getSiblings(elem);
	if(!Array.isArray(siblings)) return [];
	siblings = siblings.slice(0);
	while(siblings.shift() !== elem);
	return siblings;
}

function appendNextSiblings(elems, adapter){
	// Order matters because jQuery seems to check the children before the siblings
	if(!Array.isArray(elems)) elems = [elems];
	var newElems = elems.slice(0);

	for(var i = 0, len = elems.length; i < len; i++){
		var nextSiblings = getNextSiblings(newElems[i], adapter);
		newElems.push.apply(newElems, nextSiblings);
	}
	return newElems;
}

var selectAll = getSelectorFunc(function selectAll(query, elems, options){
	return (query === falseFunc || !elems || elems.length === 0) ? [] : options.adapter.findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems, options){
	return (query === falseFunc || !elems || elems.length === 0) ? null : options.adapter.findOne(query, elems);
});

function is(elem, query, options){
	options = options || {}
	options.adapter = options.adapter || DomUtils;
	var compile = adapterCompile(options.adapter);
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = defaultCompile;
CSSselect.filters = defaultCompile.Pseudos.filters;
CSSselect.pseudos = defaultCompile.Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = defaultCompile;
CSSselect.iterate = selectAll;

//hooks
CSSselect._compileUnsafe = defaultCompile.compileUnsafe;
CSSselect._compileToken = defaultCompile.compileToken;

},{"./lib/compile.js":92,"boolbase":80,"domutils":105}],91:[function(require,module,exports){
var falseFunc = require("boolbase").falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

function factory(adapter){
	/*
		attribute selectors
	*/
	var attributeRules = {
		__proto__: null,
		equals: function(next, data){
			var name  = data.name,
				value = data.value;

			if(data.ignoreCase){
				value = value.toLowerCase();

				return function equalsIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null && attr.toLowerCase() === value && next(elem);
				};
			}

			return function equals(elem){
				return adapter.getAttributeValue(elem, name) === value && next(elem);
			};
		},
		hyphen: function(next, data){
			var name  = data.name,
				value = data.value,
				len = value.length;

			if(data.ignoreCase){
				value = value.toLowerCase();

				return function hyphenIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null &&
							(attr.length === len || attr.charAt(len) === "-") &&
							attr.substr(0, len).toLowerCase() === value &&
							next(elem);
				};
			}

			return function hyphen(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null &&
						attr.substr(0, len) === value &&
						(attr.length === len || attr.charAt(len) === "-") &&
						next(elem);
			};
		},
		element: function(next, data){
			var name = data.name,
				value = data.value;

			if(/\s/.test(value)){
				return falseFunc;
			}

			value = value.replace(reChars, "\\$&");

			var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
				flags = data.ignoreCase ? "i" : "",
				regex = new RegExp(pattern, flags);

			return function element(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		},
		exists: function(next, data){
			var name = data.name;
			return function exists(elem){
				return adapter.hasAttrib(elem, name) && next(elem);
			};
		},
		start: function(next, data){
			var name  = data.name,
				value = data.value,
				len = value.length;

			if(len === 0){
				return falseFunc;
			}

			if(data.ignoreCase){
				value = value.toLowerCase();

				return function startIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
				};
			}

			return function start(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len) === value && next(elem);
			};
		},
		end: function(next, data){
			var name  = data.name,
				value = data.value,
				len   = -value.length;

			if(len === 0){
				return falseFunc;
			}

			if(data.ignoreCase){
				value = value.toLowerCase();

				return function endIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
				};
			}

			return function end(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.substr(len) === value && next(elem);
			};
		},
		any: function(next, data){
			var name  = data.name,
				value = data.value;

			if(value === ""){
				return falseFunc;
			}

			if(data.ignoreCase){
				var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

				return function anyIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null && regex.test(attr) && next(elem);
				};
			}

			return function any(elem){
				var attr = adapter.getAttributeValue(elem, name);
				return attr != null && attr.indexOf(value) >= 0 && next(elem);
			};
		},
		not: function(next, data){
			var name  = data.name,
				value = data.value;

			if(value === ""){
				return function notEmpty(elem){
					return !!adapter.getAttributeValue(elem, name) && next(elem);
				};
			} else if(data.ignoreCase){
				value = value.toLowerCase();

				return function notIC(elem){
					var attr = adapter.getAttributeValue(elem, name);
					return attr != null && attr.toLowerCase() !== value && next(elem);
				};
			}

			return function not(elem){
				return adapter.getAttributeValue(elem, name) !== value && next(elem);
			};
		}
	};

	return {
		compile: function(next, data, options){
			if(options && options.strict && (
				data.ignoreCase || data.action === "not"
			)) throw new Error("Unsupported attribute selector");
			return attributeRules[data.action](next, data);
		},
		rules: attributeRules
	};
}

module.exports = factory;

},{"boolbase":80}],92:[function(require,module,exports){
/*
	compiles a selector to an executable function
*/

module.exports = compileFactory;

var parse          = require("css-what"),
	BaseFuncs      = require("boolbase"),
	sortRules      = require("./sort.js"),
	procedure      = require("./procedure.json"),
	rulesFactory   = require("./general.js"),
	pseudosFactory = require("./pseudos.js"),
	trueFunc       = BaseFuncs.trueFunc,
	falseFunc      = BaseFuncs.falseFunc;

function compileFactory(adapter){
	var Pseudos     = pseudosFactory(adapter),
		filters     = Pseudos.filters,
		Rules 			= rulesFactory(adapter, Pseudos);

	function compile(selector, options, context){
		var next = compileUnsafe(selector, options, context);
		return wrap(next);
	}

	function wrap(next){
		return function base(elem){
			return adapter.isTag(elem) && next(elem);
		};
	}

	function compileUnsafe(selector, options, context){
		var token = parse(selector, options);
		return compileToken(token, options, context);
	}

	function includesScopePseudo(t){
		return t.type === "pseudo" && (
			t.name === "scope" || (
				Array.isArray(t.data) &&
				t.data.some(function(data){
					return data.some(includesScopePseudo);
				})
			)
		);
	}

	var DESCENDANT_TOKEN = {type: "descendant"},
		FLEXIBLE_DESCENDANT_TOKEN = {type: "_flexibleDescendant"},
		SCOPE_TOKEN = {type: "pseudo", name: "scope"},
		PLACEHOLDER_ELEMENT = {};

	//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
	//http://www.w3.org/TR/selectors4/#absolutizing
	function absolutize(token, context){
		//TODO better check if context is document
		var hasContext = !!context && !!context.length && context.every(function(e){
			return e === PLACEHOLDER_ELEMENT || !!adapter.getParent(e);
		});


		token.forEach(function(t){
			if(t.length > 0 && isTraversal(t[0]) && t[0].type !== "descendant"){
				//don't return in else branch
			} else if(hasContext && !includesScopePseudo(t)){
				t.unshift(DESCENDANT_TOKEN);
			} else {
				return;
			}

			t.unshift(SCOPE_TOKEN);
		});
	}

	function compileToken(token, options, context){
		token = token.filter(function(t){ return t.length > 0; });

		token.forEach(sortRules);

		var isArrayContext = Array.isArray(context);

		context = (options && options.context) || context;

		if(context && !isArrayContext) context = [context];

		absolutize(token, context);

		var shouldTestNextSiblings = false;

		var query = token
			.map(function(rules){
				if(rules[0] && rules[1] && rules[0].name === "scope"){
					var ruleType = rules[1].type;
					if(isArrayContext && ruleType === "descendant") rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
					else if(ruleType === "adjacent" || ruleType === "sibling") shouldTestNextSiblings = true;
				}
				return compileRules(rules, options, context);
			})
			.reduce(reduceRules, falseFunc);

		query.shouldTestNextSiblings = shouldTestNextSiblings;

		return query;
	}

	function isTraversal(t){
		return procedure[t.type] < 0;
	}

	function compileRules(rules, options, context){
		return rules.reduce(function(func, rule){
			if(func === falseFunc) return func;
			return Rules[rule.type](func, rule, options, context);
		}, options && options.rootFunc || trueFunc);
	}

	function reduceRules(a, b){
		if(b === falseFunc || a === trueFunc){
			return a;
		}
		if(a === falseFunc || b === trueFunc){
			return b;
		}

		return function combine(elem){
			return a(elem) || b(elem);
		};
	}

	function containsTraversal(t){
		return t.some(isTraversal);
	}

	//:not, :has and :matches have to compile selectors
	//doing this in lib/pseudos.js would lead to circular dependencies,
	//so we add them here
	filters.not = function(next, token, options, context){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict)
		};

		if(opts.strict){
			if(token.length > 1 || token.some(containsTraversal)){
				throw new Error("complex selectors in :not aren't allowed in strict mode");
			}
		}

		var func = compileToken(token, opts, context);

		if(func === falseFunc) return next;
		if(func === trueFunc)  return falseFunc;

		return function(elem){
			return !func(elem) && next(elem);
		};
	};

	filters.has = function(next, token, options){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict)
		};

		//FIXME: Uses an array as a pointer to the current element (side effects)
		var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;

		var func = compileToken(token, opts, context);

		if(func === falseFunc) return falseFunc;
		if(func === trueFunc){
			return function(elem){
				return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
			};
		}

		func = wrap(func);

		if(context){
			return function has(elem){
				return next(elem) && (
					(context[0] = elem), adapter.existsOne(func, adapter.getChildren(elem))
				);
			};
		}

		return function has(elem){
			return next(elem) && adapter.existsOne(func, adapter.getChildren(elem));
		};
	};

	filters.matches = function(next, token, options, context){
		var opts = {
			xmlMode: !!(options && options.xmlMode),
			strict: !!(options && options.strict),
			rootFunc: next
		};

		return compileToken(token, opts, context);
	};

	compile.compileToken = compileToken;
	compile.compileUnsafe = compileUnsafe;
	compile.Pseudos = Pseudos;

	return compile;
}

},{"./general.js":93,"./procedure.json":94,"./pseudos.js":95,"./sort.js":96,"boolbase":80,"css-what":97}],93:[function(require,module,exports){
var attributeFactory = require("./attributes.js");

function generalFactory(adapter, Pseudos){
	/*
		all available rules
	*/
	return {
		__proto__: null,

		attribute: attributeFactory(adapter).compile,
		pseudo: Pseudos.compile,

		//tags
		tag: function(next, data){
			var name = data.name;
			return function tag(elem){
				return adapter.getName(elem) === name && next(elem);
			};
		},

		//traversal
		descendant: function(next){
			return function descendant(elem){

				var found = false;

				while(!found && (elem = adapter.getParent(elem))){
					found = next(elem);
				}

				return found;
			};
		},
		_flexibleDescendant: function(next){
			// Include element itself, only used while querying an array
			return function descendant(elem){

				var found = next(elem);

				while(!found && (elem = adapter.getParent(elem))){
					found = next(elem);
				}

				return found;
			};
		},
		parent: function(next, data, options){
			if(options && options.strict) throw new Error("Parent selector isn't part of CSS3");

			return function parent(elem){
				return adapter.getChildren(elem).some(test);
			};

			function test(elem){
				return adapter.isTag(elem) && next(elem);
			}
		},
		child: function(next){
			return function child(elem){
				var parent = adapter.getParent(elem);
				return !!parent && next(parent);
			};
		},
		sibling: function(next){
			return function sibling(elem){
				var siblings = adapter.getSiblings(elem);

				for(var i = 0; i < siblings.length; i++){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						if(next(siblings[i])) return true;
					}
				}

				return false;
			};
		},
		adjacent: function(next){
			return function adjacent(elem){
				var siblings = adapter.getSiblings(elem),
					lastElement;

				for(var i = 0; i < siblings.length; i++){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						lastElement = siblings[i];
					}
				}

				return !!lastElement && next(lastElement);
			};
		},
		universal: function(next){
			return next;
		}
	};
}

module.exports = generalFactory;

},{"./attributes.js":91}],94:[function(require,module,exports){
module.exports={
  "universal": 50,
  "tag": 30,
  "attribute": 1,
  "pseudo": 0,
  "descendant": -1,
  "child": -1,
  "parent": -1,
  "sibling": -1,
  "adjacent": -1
}

},{}],95:[function(require,module,exports){
/*
	pseudo selectors

	---

	they are available in two forms:
	* filters called when the selector
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var getNCheck         = require("nth-check"),
	BaseFuncs         = require("boolbase"),
	attributesFactory = require("./attributes.js"),
	trueFunc          = BaseFuncs.trueFunc,
	falseFunc         = BaseFuncs.falseFunc;

function filtersFactory(adapter){
	var attributes  = attributesFactory(adapter),
		checkAttrib = attributes.rules.equals;

	//helper methods
	function equals(a, b){
		if(typeof adapter.equals === "function") return adapter.equals(a, b);

		return a === b;
	}

	function getAttribFunc(name, value){
		var data = {name: name, value: value};
		return function attribFunc(next){
			return checkAttrib(next, data);
		};
	}

	function getChildFunc(next){
		return function(elem){
			return !!adapter.getParent(elem) && next(elem);
		};
	}

	var filters = {
		contains: function(next, text){
			return function contains(elem){
				return next(elem) && adapter.getText(elem).indexOf(text) >= 0;
			};
		},
		icontains: function(next, text){
			var itext = text.toLowerCase();
			return function icontains(elem){
				return next(elem) &&
					adapter.getText(elem).toLowerCase().indexOf(itext) >= 0;
			};
		},

		//location specific methods
		"nth-child": function(next, rule){
			var func = getNCheck(rule);

			if(func === falseFunc) return func;
			if(func === trueFunc)  return getChildFunc(next);

			return function nthChild(elem){
				var siblings = adapter.getSiblings(elem);

				for(var i = 0, pos = 0; i < siblings.length; i++){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						else pos++;
					}
				}

				return func(pos) && next(elem);
			};
		},
		"nth-last-child": function(next, rule){
			var func = getNCheck(rule);

			if(func === falseFunc) return func;
			if(func === trueFunc)  return getChildFunc(next);

			return function nthLastChild(elem){
				var siblings = adapter.getSiblings(elem);

				for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						else pos++;
					}
				}

				return func(pos) && next(elem);
			};
		},
		"nth-of-type": function(next, rule){
			var func = getNCheck(rule);

			if(func === falseFunc) return func;
			if(func === trueFunc)  return getChildFunc(next);

			return function nthOfType(elem){
				var siblings = adapter.getSiblings(elem);

				for(var pos = 0, i = 0; i < siblings.length; i++){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						if(adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;
					}
				}

				return func(pos) && next(elem);
			};
		},
		"nth-last-of-type": function(next, rule){
			var func = getNCheck(rule);

			if(func === falseFunc) return func;
			if(func === trueFunc)  return getChildFunc(next);

			return function nthLastOfType(elem){
				var siblings = adapter.getSiblings(elem);

				for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
					if(adapter.isTag(siblings[i])){
						if(siblings[i] === elem) break;
						if(adapter.getName(siblings[i]) === adapter.getName(elem)) pos++;
					}
				}

				return func(pos) && next(elem);
			};
		},

		//TODO determine the actual root element
		root: function(next){
			return function(elem){
				return !adapter.getParent(elem) && next(elem);
			};
		},

		scope: function(next, rule, options, context){
			if(!context || context.length === 0){
				//equivalent to :root
				return filters.root(next);
			}

			if(context.length === 1){
				//NOTE: can't be unpacked, as :has uses this for side-effects
				return function(elem){
					return equals(context[0], elem) && next(elem);
				};
			}

			return function(elem){
				return context.indexOf(elem) >= 0 && next(elem);
			};
		},

		//jQuery extensions (others follow as pseudos)
		checkbox: getAttribFunc("type", "checkbox"),
		file: getAttribFunc("type", "file"),
		password: getAttribFunc("type", "password"),
		radio: getAttribFunc("type", "radio"),
		reset: getAttribFunc("type", "reset"),
		image: getAttribFunc("type", "image"),
		submit: getAttribFunc("type", "submit")
	};
	return filters;
}

function pseudosFactory(adapter){
	//helper methods
	function getFirstElement(elems){
		for(var i = 0; elems && i < elems.length; i++){
			if(adapter.isTag(elems[i])) return elems[i];
		}
	}

	//while filters are precompiled, pseudos get called when they are needed
	var pseudos = {
		empty: function(elem){
			return !adapter.getChildren(elem).some(function(elem){
				return adapter.isTag(elem) || elem.type === "text";
			});
		},

		"first-child": function(elem){
			return getFirstElement(adapter.getSiblings(elem)) === elem;
		},
		"last-child": function(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = siblings.length - 1; i >= 0; i--){
				if(siblings[i] === elem) return true;
				if(adapter.isTag(siblings[i])) break;
			}

			return false;
		},
		"first-of-type": function(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) return true;
					if(adapter.getName(siblings[i]) === adapter.getName(elem)) break;
				}
			}

			return false;
		},
		"last-of-type": function(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = siblings.length - 1; i >= 0; i--){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) return true;
					if(adapter.getName(siblings[i]) === adapter.getName(elem)) break;
				}
			}

			return false;
		},
		"only-of-type": function(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = 0, j = siblings.length; i < j; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem) continue;
					if(adapter.getName(siblings[i]) === adapter.getName(elem)) return false;
				}
			}

			return true;
		},
		"only-child": function(elem){
			var siblings = adapter.getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i]) && siblings[i] !== elem) return false;
			}

			return true;
		},

		//:matches(a, area, link)[href]
		link: function(elem){
			return adapter.hasAttrib(elem, "href");
		},
		visited: falseFunc, //seems to be a valid implementation
		//TODO: :any-link once the name is finalized (as an alias of :link)

		//forms
		//to consider: :target

		//:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
		selected: function(elem){
			if(adapter.hasAttrib(elem, "selected")) return true;
			else if(adapter.getName(elem) !== "option") return false;

			//the first <option> in a <select> is also selected
			var parent = adapter.getParent(elem);

			if(
				!parent ||
				adapter.getName(parent) !== "select" ||
				adapter.hasAttrib(parent, "multiple")
			) return false;

			var siblings = adapter.getChildren(parent),
				sawElem  = false;

			for(var i = 0; i < siblings.length; i++){
				if(adapter.isTag(siblings[i])){
					if(siblings[i] === elem){
						sawElem = true;
					} else if(!sawElem){
						return false;
					} else if(adapter.hasAttrib(siblings[i], "selected")){
						return false;
					}
				}
			}

			return sawElem;
		},
		//https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
		//:matches(
		//  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
		//  optgroup[disabled] > option),
		// fieldset[disabled] * //TODO not child of first <legend>
		//)
		disabled: function(elem){
			return adapter.hasAttrib(elem, "disabled");
		},
		enabled: function(elem){
			return !adapter.hasAttrib(elem, "disabled");
		},
		//:matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)
		checked: function(elem){
			return adapter.hasAttrib(elem, "checked") || pseudos.selected(elem);
		},
		//:matches(input, select, textarea)[required]
		required: function(elem){
			return adapter.hasAttrib(elem, "required");
		},
		//:matches(input, select, textarea):not([required])
		optional: function(elem){
			return !adapter.hasAttrib(elem, "required");
		},

		//jQuery extensions

		//:not(:empty)
		parent: function(elem){
			return !pseudos.empty(elem);
		},
		//:matches(h1, h2, h3, h4, h5, h6)
		header: function(elem){
			var name = adapter.getName(elem);
			return name === "h1" ||
					name === "h2" ||
					name === "h3" ||
					name === "h4" ||
					name === "h5" ||
					name === "h6";
		},

		//:matches(button, input[type=button])
		button: function(elem){
			var name = adapter.getName(elem);
			return name === "button" ||
					name === "input" &&
					adapter.getAttributeValue(elem, "type") === "button";
		},
		//:matches(input, textarea, select, button)
		input: function(elem){
			var name = adapter.getName(elem);
			return name === "input" ||
					name === "textarea" ||
					name === "select" ||
					name === "button";
		},
		//input:matches(:not([type!='']), [type='text' i])
		text: function(elem){
			var attr;
			return adapter.getName(elem) === "input" && (
				!(attr = adapter.getAttributeValue(elem, "type")) ||
				attr.toLowerCase() === "text"
			);
		}
	};

	return pseudos;
}

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1 && name !== "scope"){
			throw new Error("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new Error("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//FIXME this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

function factory(adapter){
	var pseudos = pseudosFactory(adapter);
	var filters = filtersFactory(adapter);

	return {
		compile: function(next, data, options, context){
			var name = data.name,
				subselect = data.data;

			if(options && options.strict && !re_CSS3.test(name)){
				throw new Error(":" + name + " isn't part of CSS3");
			}

			if(typeof filters[name] === "function"){
				verifyArgs(filters[name], name,  subselect);
				return filters[name](next, subselect, options, context);
			} else if(typeof pseudos[name] === "function"){
				var func = pseudos[name];
				verifyArgs(func, name, subselect);

				if(next === trueFunc) return func;

				return function pseudoArgs(elem){
					return func(elem, subselect) && next(elem);
				};
			} else {
				throw new Error("unmatched pseudo-class :" + name);
			}
		},
		filters: filters,
		pseudos: pseudos
	};
}

module.exports = factory;

},{"./attributes.js":91,"boolbase":80,"nth-check":193}],96:[function(require,module,exports){
module.exports = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = require("./procedure.json");

var attributes = {
	__proto__: null,
	exists: 10,
	equals: 8,
	not: 7,
	start: 6,
	end: 6,
	any: 5,
	hyphen: 4,
	element: 4
};

function sortByProcedure(arr){
	var procs = arr.map(getProcedure);
	for(var i = 1; i < arr.length; i++){
		var procNew = procs[i];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
			var token = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = token;
			procs[j + 1] = procs[j];
			procs[j] = procNew;
		}
	}
}

function getProcedure(token){
	var proc = procedure[token.type];

	if(proc === procedure.attribute){
		proc = attributes[token.action];

		if(proc === attributes.equals && token.name === "id"){
			//prefer ID selectors (eg. #ID)
			proc = 9;
		}

		if(token.ignoreCase){
			//ignoreCase adds some overhead, prefer "normal" token
			//this is a binary operation, to ensure it's still an int
			proc >>= 1;
		}
	} else if(proc === procedure.pseudo){
		if(!token.data){
			proc = 3;
		} else if(token.name === "has" || token.name === "contains"){
			proc = 0; //expensive in any case
		} else if(token.name === "matches" || token.name === "not"){
			proc = 0;
			for(var i = 0; i < token.data.length; i++){
				//TODO better handling of complex selectors
				if(token.data[i].length !== 1) continue;
				var cur = getProcedure(token.data[i][0]);
				//avoid executing :has or :contains
				if(cur === 0){
					proc = 0;
					break;
				}
				if(cur > proc) proc = cur;
			}
			if(token.data.length > 1 && proc > 0) proc -= 1;
		} else {
			proc = 1;
		}
	}
	return proc;
}

},{"./procedure.json":94}],97:[function(require,module,exports){
"use strict";

module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(") counter++;
							else if(selector.charAt(pos) === ")") counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}

},{}],98:[function(require,module,exports){
(function (global){

var NativeCustomEvent = global.CustomEvent;

function useNative () {
  try {
    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
    return  'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {
  }
  return false;
}

/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */

module.exports = useNative() ? NativeCustomEvent :

// IE >= 9
'function' === typeof document.createEvent ? function CustomEvent (type, params) {
  var e = document.createEvent('CustomEvent');
  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }
  return e;
} :

// IE <= 8
function CustomEvent (type, params) {
  var e = document.createEventObject();
  e.type = type;
  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }
  return e;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],99:[function(require,module,exports){
/*
  Module dependencies
*/
var ElementType = require('domelementtype');
var entities = require('entities');

/*
  Boolean Attributes
*/
var booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  required: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    if (!value && booleanAttributes[key]) {
      output += key;
    } else {
      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

},{"domelementtype":100,"entities":114}],100:[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};
},{}],101:[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

},{}],102:[function(require,module,exports){
var ElementType = require("domelementtype");

var re_whitespace = /\s+/g;
var NodePrototype = require("./lib/node");
var ElementPrototype = require("./lib/element");

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}

	if (this._options.withDomLvl1) {
		element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;

},{"./lib/element":103,"./lib/node":104,"domelementtype":101}],103:[function(require,module,exports){
// DOM-Level-1-compliant structure
var NodePrototype = require('./node');
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{"./node":104}],104:[function(require,module,exports){
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{}],105:[function(require,module,exports){
var DomUtils = module.exports;

[
	require("./lib/stringify"),
	require("./lib/traversal"),
	require("./lib/manipulation"),
	require("./lib/querying"),
	require("./lib/legacy"),
	require("./lib/helpers")
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});

},{"./lib/helpers":106,"./lib/legacy":107,"./lib/manipulation":108,"./lib/querying":109,"./lib/stringify":110,"./lib/traversal":111}],106:[function(require,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};

},{}],107:[function(require,module,exports){
var ElementType = require("domelementtype");
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};

},{"domelementtype":101}],108:[function(require,module,exports){
exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};



},{}],109:[function(require,module,exports){
var isTag = require("domelementtype").isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}

},{"domelementtype":101}],110:[function(require,module,exports){
var ElementType = require("domelementtype"),
    getOuterHTML = require("dom-serializer"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}

},{"dom-serializer":99,"domelementtype":101}],111:[function(require,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],112:[function(require,module,exports){
'use strict';

var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass (className) {
  var cached = cache[className];
  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }
  return cached;
}

function addClass (el, className) {
  var current = el.className;
  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass (el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

module.exports = {
  add: addClass,
  rm: rmClass
};

},{}],113:[function(require,module,exports){
(function (global){
'use strict';

var emitter = require('contra/emitter');
var crossvent = require('crossvent');
var classes = require('./classes');
var doc = document;
var documentElement = doc.documentElement;

function dragula (initialContainers, options) {
  var len = arguments.length;
  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }
  var _mirror; // mirror image
  var _source; // source container
  var _item; // item being dragged
  var _offsetX; // reference x
  var _offsetY; // reference y
  var _moveX; // reference move x
  var _moveY; // reference move y
  var _initialSibling; // reference sibling when grabbed
  var _currentSibling; // reference sibling now
  var _copy; // item used for copying
  var _renderTimer; // timer for setTimeout renderMirrorImage
  var _lastDropTarget = null; // last container item was over
  var _grabbed; // holds mousedown context until first mousemove

  var o = options || {};
  if (o.moves === void 0) { o.moves = always; }
  if (o.accepts === void 0) { o.accepts = always; }
  if (o.invalid === void 0) { o.invalid = invalidTarget; }
  if (o.containers === void 0) { o.containers = initialContainers || []; }
  if (o.isContainer === void 0) { o.isContainer = never; }
  if (o.copy === void 0) { o.copy = false; }
  if (o.copySortSource === void 0) { o.copySortSource = false; }
  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
  if (o.direction === void 0) { o.direction = 'vertical'; }
  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();

  return drake;

  function isContainer (el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements (remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8
    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy () {
    events(true);
    release({});
  }

  function preventGrabbed (e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab (e) {
    _moveX = e.clientX;
    _moveY = e.clientY;

    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }
    var item = e.target;
    var context = canStart(item);
    if (!context) {
      return;
    }
    _grabbed = context;
    eventualMovements();
    if (e.type === 'mousedown') {
      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved (e) {
    if (!_grabbed) {
      return;
    }
    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    }
    // truthy check fixes #239, equality fixes #207
    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }
    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed
    eventualMovements(true);
    movements();
    end();
    start(grabbed);

    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;

    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart (item) {
    if (drake.dragging && _mirror) {
      return;
    }
    if (isContainer(item)) {
      return; // don't drag container itself
    }
    var handle = item;
    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }
      item = getParent(item); // drag target should be a top element
      if (!item) {
        return;
      }
    }
    var source = getParent(item);
    if (!source) {
      return;
    }
    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));
    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove (item) {
    return !!canStart(item);
  }

  function manualStart (item) {
    var context = canStart(item);
    if (context) {
      start(context);
    }
  }

  function start (context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);

    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget () {
    return false;
  }

  function end () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab () {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release (e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop (item, target) {
    var parent = getParent(item);
    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }
    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }
    cleanup();
  }

  function remove () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var parent = getParent(item);
    if (parent) {
      parent.removeChild(item);
    }
    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel (revert) {
    if (!drake.dragging) {
      return;
    }
    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);
    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }
    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }
    cleanup();
  }

  function cleanup () {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();
    if (item) {
      classes.rm(item, 'gu-transit');
    }
    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }
    drake.dragging = false;
    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }
    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement (target, s) {
    var sibling;
    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }
    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget (elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;
    while (target && !accepted()) {
      target = getParent(target);
    }
    return target;

    function accepted () {
      var droppable = isContainer(target);
      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);
      if (initial) {
        return true; // should always be able to drop it right back where it was
      }
      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag (e) {
    if (!_mirror) {
      return;
    }
    e.preventDefault();

    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;

    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';

    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }
    var parent = getParent(item);
    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }
      return;
    }
    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);
    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }
      return;
    }
    if (
      (reference === null && changed) ||
      reference !== item &&
      reference !== nextEl(item)
    ) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }
    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
    function over () { if (changed) { moved('over'); } }
    function out () { if (_lastDropTarget) { moved('out'); } }
  }

  function spillOver (el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut (el) {
    if (drake.dragging) { classes.add(el, 'gu-hide'); }
  }

  function renderMirrorImage () {
    if (_mirror) {
      return;
    }
    var rect = _item.getBoundingClientRect();
    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage () {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild (dropTarget, target) {
    var immediate = target;
    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }
    if (immediate === documentElement) {
      return null;
    }
    return immediate;
  }

  function getReference (dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside () { // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;
      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();
        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
      }
      return null;
    }

    function inside () { // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();
      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }
      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve (after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy (item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy (el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };
  if (global.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (global.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton (e) {
  if (e.touches !== void 0) { return e.touches.length; }
  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
  if (e.buttons !== void 0) { return e.buttons; }
  var button = e.button;
  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
  }
}

function getOffset (el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll (scrollProp, offsetProp) {
  if (typeof global[offsetProp] !== 'undefined') {
    return global[offsetProp];
  }
  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }
  return doc.body[scrollProp];
}

function getElementBehindPoint (point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never () { return false; }
function always () { return true; }
function getRectWidth (rect) { return rect.width || (rect.right - rect.left); }
function getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }
function getParent (el) { return el.parentNode === doc ? null : el.parentNode; }
function isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }
function isEditable (el) {
  if (!el) { return false; } // no parents were editable
  if (el.contentEditable === 'false') { return false; } // stop the lookup
  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
  return isEditable(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl (el) {
  return el.nextElementSibling || manually();
  function manually () {
    var sibling = el;
    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);
    return sibling;
  }
}

function getEventHost (e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }
  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }
  return e;
}

function getCoord (coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX', // IE8
    pageY: 'clientY' // IE8
  };
  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }
  return host[coord];
}

module.exports = dragula;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./classes":112,"contra/emitter":85,"crossvent":87}],114:[function(require,module,exports){
var encode = require("./lib/encode.js"),
    decode = require("./lib/decode.js");

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":115,"./lib/encode.js":117}],115:[function(require,module,exports){
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap    = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};
},{"../maps/entities.json":119,"../maps/legacy.json":120,"../maps/xml.json":121,"./decode_codepoint.js":116}],116:[function(require,module,exports){
var decodeMap = require("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

},{"../maps/decode.json":118}],117:[function(require,module,exports){
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":119,"../maps/xml.json":121}],118:[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],119:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],120:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],121:[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],123:[function(require,module,exports){
module.exports={
  "html": {
    "content": [ "<head>", "<body>" ],
    "singular": true
  },
  "head": {
    "content": [ "metadata content" ],
    "parent": [ "<html>" ],
    "singular": true
  },
  "body": {
    "categories": [ "sectioning root" ],
    "content": [ "flow content" ],
    "parent": [ "<html>" ],
    "singular": true
  },

  "title": {
    "categories": [ "metadata content" ],
    "content": [ "text" ],
    "parent": [ "<head>" ],
    "singular": true
  },
  "base": {
    "categories": [ "metadata content" ],
    "parent": [ "<head>" ],
    "singular": true
  },
  "link": {
    "categories": [ "metadata content" ],
    "parent": [ "<head>" ]
  },
  "meta": {
    "categories": [ "metadata content" ],
    "parent": [ "<head>" ]
  },
  "style": {
    "categories": [ "metadata content" ],
    "content": [ "text" ],
    "parent": [ "<head>" ]
  },

  "address": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<address>", "heading content", "sectioning content", "<header>", "<footer>" ]
  },
  "article": {
    "categories": [ "flow content", "sectioning content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<main>" ],
    "nospec": [ "4.01" ]
  },
  "aside": {
    "categories": [ "flow content", "sectioning content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<main>" ],
    "nospec": [ "4.01" ]
  },
  "footer": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<footer>", "<header>", "<main>" ],
    "nospec": [ "4.01" ]
  },
  "header": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<footer>", "<header>", "<main>" ],
    "nospec": [ "4.01" ]
  },
  "h1": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "h2": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "h3": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "h4": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "h5": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "h6": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "nav": {
    "categories": [ "flow content", "sectioning content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<main>" ],
    "nospec": [ "4.01" ]
  },

  "blockquote": {
    "categories": [ "flow content", "sectioning root", "palpable content" ],
    "content": [ "flow content" ]
  },
  "dd": {
    "content": [ "flow content" ],
    "parent": [ "<dl>" ],
    "previous": [ "<dt>", "<dd>" ]
  },
  "div": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ]
  },
  "dl": {
    "categories": [ "flow content" ],
    "content": [ "<dt>", "<dd>" ]
  },
  "dt": {
    "content": [ "flow content" ],
    "parent": [ "<dl>" ],
    "disallow": [ "<footer>", "<header>", "sectioning content", "heading content" ],
    "next": [ "<dt>", "<dd>" ]
  },
  "figcaption": {
    "content": [ "flow content" ],
    "parent": [ "<figure>" ],
    "position": [ "first", "last" ],
    "nospec": [ "4.01" ]
  },
  "figure": {
    "categories": [ "flow content", "sectioning root", "palpable content" ],
    "content": [ "flow content", "<figcaption>" ],
    "nospec": [ "4.01" ]
  },
  "hr": {
    "categories": [ "flow content" ]
  },
  "li": {
    "content": [ "flow content" ],
    "parent": [ "<ul>", "<ol>", "<menu>" ]
  },
  "main": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ],
    "nospec": [ "4.01" ]
  },
  "ol": {
    "categories": [ "flow content" ],
    "content": [ "<li>" ],
    "states": {
      ":not(:empty)": {
        "categories": [ "palpable content" ]
      }
    }
  },
  "p": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "pre": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "section": {
    "categories": [ "flow content", "sectioning content", "palpable content" ],
    "content": [ "flow content" ],
    "nospec": [ "4.01" ]
  },
  "ul": {
    "categories": [ "flow content" ],
    "content": [ "<li>" ],
    "states": {
      ":not(:empty)": {
        "categories": [ "palpable content" ]
      }
    }
  },

  "a": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "flow content", "phrasing content" ],
    "disallow": [ "interactive content" ],
    "states": {
      "[href]" : {
        "categories": [ "interactive content" ]
      }
    }
  },
  "abbr": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "b": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "bdi": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "bdo": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "br": {
    "categories": [ "flow content", "phrasing content" ]
  },
  "cite": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "code": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "data": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "dfn": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "disallow": [ "<dfn>" ]
  },
  "em": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "i": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "kbd": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "mark": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "q": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "rp": {
    "content": [ "phrasing content" ],
    "parent": [ "<ruby>" ],
    "nospec": [ "4.01" ]
  },
  "rt": {
    "content": [ "phrasing content" ],
    "parent": [ "<ruby>", "<rtc>" ],
    "nospec": [ "4.01" ]
  },
  "rtc": {
    "content": [ "phrasing content", "<rt>" ],
    "parent": [ "<ruby>" ],
    "nospec": [ "4.01" ]
  },
  "ruby": {
    "categories": [ "flow content", "phrasing content" ],
    "content": [ "phrasing content", "<rp>", "<rt>", "<rtc>" ],
    "nospec": [ "4.01" ]
  },
  "s": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "samp": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "small": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "span": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "strong": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "sub": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "sup": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "time": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "u": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "var": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "wbr": {
    "categories": [ "flow content", "phrasing content" ],
    "nospec": [ "4.01" ]
  },

  "area": {
    "categories": [ "flow content", "phrasing content" ],
    "ancestor": [ "<map>" ]
  },
  "audio": {
    "categories": [ "flow content", "phrasing content", "embedded content" ],
    "content": [ "transparent", "<track>" ],
    "disallow": [ "<audio>", "<video>" ],
    "states": {
      "[controls]": {
        "categories": [ "interactive content", "palpable content" ]
      },
      ":not([src])": {
        "content": [ "<source>" ]
      }
    },
    "nospec": [ "4.01" ]
  },
  "map": {
    "categories": [ "flow content", "phrasing content", "palpable content" ],
    "content": [ "transparent", "<area>" ]
  },
  "track": {
    "parent": [ "<audio>", "<video>" ],
    "nospec": [ "4.01" ]
  },
  "video": {
    "categories": [ "flow content", "phrasing content", "embedded content" ],
    "content": [ "transparent", "<track>" ],
    "disallow": [ "<audio>", "<video>" ],
    "states": {
      "[controls]": {
        "categories": [ "interactive content", "palpable content" ]
      },
      ":not([src])": {
        "content": [ "<source>" ]
      }
    },
    "nospec": [ "4.01" ]
  },

  "embed": {
    "categories": [ "flow content", "phrasing content", "embedded content", "interactive content", "palpable content" ],
    "nospec": [ "4.01" ]
  },
  "iframe": {
    "categories": [ "flow content", "phrasing content", "embedded content", "interactive content", "palpable content" ],
    "content": [ "phrasing content" ],
    "disallow": [ "<script>" ]
  },
  "img": {
    "categories": [ "flow content", "phrasing content", "embedded content", "palpable content" ],
    "states": {
      "[usemap]": {
        "categories": [ "interactive content" ]
      }
    }
  },
  "object": {
    "categories": [ "flow content", "phrasing content", "embedded content", "palpable content", "form-associated content", "listed", "submittable" ],
    "content": [ "transparent", "<param>" ],
    "states": {
      "[usemap]": {
        "categories": [ "interactive content" ]
      }
    }
  },
  "param": {
    "parent": [ "<object>" ]
  },
  "source": {
    "parent": [ "<picture>", "<audio>", "<video>" ],
    "position": [ "first" ],
    "nospec": [ "4.01" ]
  },

  "canvas": {
    "categories": [ "flow content", "phrasing content", "embedded content", "palpable content" ],
    "content": [ "transparent" ],
    "nospec": [ "4.01" ]
  },
  "noscript": {
    "categories": [ "flow content", "phrasing content", "metadata content" ],
    "disallow": [ "<noscript>" ],
    "states": {
      "head > noscript": {
        "content": [ "<link>", "<style>", "<meta>" ]
      },
      ":not( head > noscript )": {
        "content": [ "transparent" ]
      }
    }
  },
  "script": {
    "categories": [ "flow content", "phrasing content", "metadata content" ],
    "content": [ "text" ]
  },
  "template": {
    "categories": [ "metadata content", "flow content", "phrasing content" ],
    "content": [ "metadata content", "flow content" ],
    "parent": [ "body", "head", "colgroup" ],
    "nospec": [ "4.01" ]
  },

  "del": {
    "categories": [ "flow content", "phrasing content" ],
    "content": [ "transparent" ]
  },
  "ins": {
    "categories": [ "flow content", "phrasing content" ],
    "content": [ "transparent" ]
  },

  "caption": {
    "content": [ "flow content" ],
    "parent": [ "<table>" ],
    "position": [ "first" ]
  },
  "col": {
    "parent": [ "<colgroup>" ]
  },
  "colgroup": {
    "parent": [ "<table>" ],
    "states": {
      ":not([span])": {
        "content": [ "<col>" ]
      }
    }
  },
  "table": {
    "categories": [ "flow content" ],
    "content": [ "<caption>", "<colgroup>", "<thead>", "<tbody>", "<tfoot>", "<tr>" ]
  },
  "tbody": {
    "content": [ "<tr>" ],
    "parent": [ "<table>" ]
  },
  "td": {
    "content": [ "flow content", "phrasing content" ],
    "parent": [ "<tr>" ]
  },
  "tfoot": {
    "content": [ "<tr>" ],
    "parent": [ "<table>" ]
  },
  "th": {
    "content": [ "phrasing content" ],
    "parent": [ "<tr>" ]
  },
  "thead": {
    "content": [ "<tr>" ],
    "parent": [ "<table>" ]
  },
  "tr": {
    "content": [ "<th>", "<td>" ],
    "parent": [ "<table>", "<thead>", "<tbody>", "<tfoot>" ]
  },

  "button": {
    "categories": [ "flow content", "phrasing content", "interactive content", "form-associated content", "listed", "labelable", "submittable", "palpable content" ],
    "content": [ "phrasing content" ]
  },
  "datalist": {
    "categories": [ "flow content", "phrasing content" ],
    "content": [ "phrasing content", "<option>" ],
    "nospec": [ "4.01" ]
  },
  "fieldset": {
    "categories": [ "flow content", "sectioning root", "form-associated content", "listed", "palpable content" ],
    "content": [ "<legend>", "flow content" ]
  },
  "form": {
    "categories": [ "flow content", "palpable content" ],
    "content": [ "flow content" ],
    "disallow": [ "<form>" ]
  },
  "input": {
    "categories": [ "flow content", "phrasing content", "form-associated content", "listed", "submittable", "resettable" ],
    "states": {
      ":not([type=hidden])": {
        "categories": [ "labelable", "palpable content" ]
      }
    }
  },
  "label": {
    "categories": [ "flow content", "phrasing content", "interactive content", "form-associated content", "palpable content" ],
    "content": [ "phrasing content" ],
    "disallow": [ "<label>" ]
  },
  "legend": {
    "content": [ "phrasing content" ],
    "parent": [ "<fieldset>" ],
    "position": [ "first" ]
  },
  "meter": {
    "categories": [ "flow content", "phrasing content", "form-associated content", "labelable", "palpable content" ],
    "content": [ "phrasing content" ],
    "disallow": [ "<meter>" ],
    "nospec": [ "4.01" ]
  },
  "optgroup": {
    "content": [ "<option>" ],
    "parent": [ "<select>" ]
  },
  "option": {
    "content": [ "text" ],
    "parent": [ "<select>", "<optgroup>", "<datalist>" ]
  },
  "output": {
    "categories": [ "flow content", "phrasing content", "form-associated content", "listed", "labelable", "resettable", "palpable content" ],
    "content": [ "phrasing content" ],
    "nospec": [ "4.01" ]
  },
  "progress": {
    "categories": [ "flow content", "phrasing content", "form-associated content", "labelable", "palpable content" ],
    "content": [ "phrasing content" ],
    "disallow": [ "<progress>" ],
    "nospec": [ "4.01" ]
  },
  "select": {
    "categories": [ "flow content", "phrasing content", "interactive content", "form-associated content", "listed", "labelable", "submittable", "resettable" ],
    "content": [ "<optgroup>", "<option>" ]
  },
  "textarea": {
    "categories": [ "flow content", "phrasing content", "interactive content", "form-associated content", "listed", "labelable", "submittable", "resettable" ],
    "content": [ "text" ]
  },

  "details": {
    "categories": [ "flow content", "sectioning root", "interactive content", "palpable content" ],
    "content": [ "<summary>", "flow content" ],
    "nospec": [ "4.01", "5" ],
    "experimental": true
  },
  "dialog": {
    "categories": [ "flow content", "sectioning root" ],
    "content": [ "flow content" ],
    "nospec": [ "4.01", "5" ],
    "experimental": true
  },
   "hgroup": {
    "categories": [ "flow content", "heading content", "palpable content" ],
    "content": [ "<h1>", "<h2>", "<h3>", "<h4>", "<h5>", "<h6>" ],
    "nospec": [ "4.01", "5" ],
    "experimental": true
  },
  "menu": {
    "categories": [ "flow content" ],
    "states": {
      "[type=list], :not([type])": {
        "categories": [ "palpable content" ],
        "content": [ "flow content", "<li>", "<script>", "<template>" ]
      },
      "[type=menu]": {
        "content": [ "<script>", "<template>", "<menu>", "<menuitem>", "<hr>" ]
      }
    },
    "nospec": [ "4.01", "5" ],
    "experimental": true
  },
  "menuitem": {
    "parent": [ "<menu>" ],
    "nospec": [ "4.01", "5" ],
    "experimental": true
  },
  "picture": {
    "categories": [ "flow content", "phrasing content", "embedded content" ],
    "content": [ "<source>", "<img>" ],
    "nospec": [ "4.01", "5", "5.1" ],
    "experimental": true
  },
  "shadow": {
    "content": [ "flow content" ],
    "nospec": [ "4.01", "5", "5.1", "LS" ],
    "experimental": true
  },
  "summary": {
    "content": [ "phrasing content", "heading content" ],
    "parent": [ "<details>" ],
    "nospec": [ "4.01", "5" ],
    "experimental": true
  }
}

},{}],124:[function(require,module,exports){
'use strict';

var elementData = require('../data/elements.json');
var schema = require('../schema/hinfo.schema.json');

// ensure a fresh copy, in case the consumer modifies it
var hinfo = function hinfo() {
  return JSON.parse(JSON.stringify(elementData));
};

hinfo.schema = function () {
  return JSON.parse(JSON.stringify(schema));
};

module.exports = hinfo;
},{"../data/elements.json":123,"../schema/hinfo.schema.json":126}],125:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":124,"dup":3}],126:[function(require,module,exports){
module.exports={
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "html element meta data",
    "description": "schema for html element meta data",
    "type": "object",
    "patternProperties": {
        "^[a-z][a-z\\d]*$": {
            "$ref": "#/definitions/elementDef"
        }
    },
    "additionalProperties": false,
    "definitions": {
        "elementDef": {
            "type": "object",
            "properties": {
                "categories": {
                    "$ref": "#/definitions/categoryArrayDef"
                },
                "content": {
                    "$ref": "#/definitions/stringArrayDef"
                },
                "parent": {
                    "$ref": "#/definitions/stringArrayDef"
                },
                "disallow": {
                    "$ref": "#/definitions/stringArrayDef"
                },
                "ancestor": {
                    "$ref": "#/definitions/stringArrayDef"
                },
                "position": {
                    "$ref": "#/definitions/positionArrayDef"
                },
                "previous": {
                    "$ref": "#/definitions/tagArrayDef"
                },
                "next": {
                    "$ref": "#/definitions/tagArrayDef"
                },
                "states": {
                    "$ref": "#/definitions/stateDef"
                },
                "nospec": {
                    "$ref": "#/definitions/nospecDef"
                },
                "singular": {
                    "type": "boolean"
                },
                "experimental": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "stringArrayDef": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true
        },
        "tagArrayDef": {
            "type": "array",
            "items": {
                "type": "string",
                "pattern": "^<[a-z][a-z0-9]*>$"
            },
            "uniqueItems": true
        },
        "categoryArrayDef": {
            "type": "array",
            "items": {
                "enum": [
                    "embedded content",
                    "flow content",
                    "form-associated content",
                    "heading content",
                    "interactive content",
                    "labelable",
                    "listed",
                    "metadata content",
                    "palpable content",
                    "phrasing content",
                    "resettable",
                    "sectioning content",
                    "sectioning root",
                    "submittable"
                ]
            },
            "uniqueItems": true
        },
        "positionArrayDef": {
            "type": "array",
            "items": {
                "enum": [
                    "first",
                    "last"
                ]
            },
            "uniqueItems": true
        },
        "stateDef": {
            "type": "object",
            "patternProperties": {
                "^[\\w\\d :=,<>\\(\\)\\[\\]]+$": {
                    "type": "object",
                    "properties": {
                        "categories": {
                            "$ref": "#/definitions/stringArrayDef"
                        },
                        "content": {
                            "$ref": "#/definitions/stringArrayDef"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "nospecDef": {
            "type": "array",
            "minItems": 1,
            "items": {
                "enum": [
                    "4.01",
                    "5",
                    "5.1",
                    "LS"
                ]
            },
            "uniqueItems": true
        }
    }
}
},{}],127:[function(require,module,exports){
'use strict';

var hinfo = require('hinfo');

var nodeDefs = {
  '#document': {
    'content': ['#documentType', '<html>']
  },
  '#documentType': {
    'parent': ['#document']
  },
  '#text': {
    'categories': ['flow content', 'phrasing content', 'palpable content']
  },
  '#comment': {
    'categories': ['flow content']
  },
  '#documentFragment': {
    'content': ['flow content']
  }
};

var ensureArray = function ensureArray(obj, name) {
  if (!Array.isArray(obj[name])) obj[name] = [];
};

var ensureProperties = function ensureProperties(def) {
  ensureArray(def, 'categories');
  ensureArray(def, 'content');
  ensureArray(def, 'parent');
};

var defaultDefs = Object.assign(hinfo(), nodeDefs);

var Html = function Html() {
  var defs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDefs;

  defs = JSON.parse(JSON.stringify(defs));

  var _tagNames = Object.keys(defs);

  var hasCategory = function hasCategory(tagName, categoryName) {
    return defs[tagName].categories.includes(categoryName);
  };

  var predicates = {
    empty: function empty(tagName) {
      return defs[tagName].content.length === 0;
    },
    metadata: function metadata(tagName) {
      return hasCategory(tagName, 'metadata content');
    },
    inline: function inline(tagName) {
      return hasCategory(tagName, 'phrasing content');
    },
    embedded: function embedded(tagName) {
      return hasCategory(tagName, 'embedded content');
    },
    block: function block(tagName) {
      return hasCategory(tagName, 'flow content') && !predicates.inline(tagName);
    },
    container: function container(tagName) {
      return !predicates.empty(tagName);
    }
  };

  var doesAccept = function doesAccept(tagName, childTagName) {
    if (predicates.empty(tagName)) return false;

    var def = defs[tagName];
    var childDef = defs[childTagName];

    if (childDef.parent.includes('<' + tagName + '>')) return true;

    if (def.content.includes('<' + childTagName + '>') || def.content.includes('#' + childTagName)) return true;

    return childDef.categories.some(function (category) {
      return def.content.includes(category);
    });
  };

  var predicateNames = Object.keys(predicates);

  var maps = {
    accepts: {}
  };

  predicateNames.forEach(function (name) {
    return maps[name] = {};
  });

  var allCategories = [];

  _tagNames.forEach(function (tagName) {
    var def = defs[tagName];

    ensureProperties(def);

    allCategories = allCategories.concat(def.categories);

    predicateNames.forEach(function (predicateName) {
      return maps[predicateName][tagName] = predicates[predicateName](tagName);
    });

    maps.accepts[tagName] = {};

    _tagNames.forEach(function (childTagName) {
      ensureProperties(defs[childTagName]);

      maps.accepts[tagName][childTagName] = doesAccept(tagName, childTagName);
    });
  });

  var _categoryNames = Array.from(new Set(allCategories)).sort();

  var api = {
    tagNames: function tagNames() {
      return _tagNames;
    },
    categoryNames: function categoryNames() {
      return _categoryNames;
    },
    isEmpty: function isEmpty(tagName) {
      return maps.empty[tagName];
    },
    isMetadata: function isMetadata(tagName) {
      return maps.metadata[tagName];
    },
    isInline: function isInline(tagName) {
      return maps.inline[tagName];
    },
    isEmbedded: function isEmbedded(tagName) {
      return maps.embedded[tagName];
    },
    isBlock: function isBlock(tagName) {
      return maps.block[tagName];
    },
    isContainer: function isContainer(tagName) {
      return maps.container[tagName];
    },
    accepts: function accepts(tagName, childTagName) {
      return maps.accepts[tagName][childTagName];
    },
    def: function def(tagName) {
      if (defs[tagName]) return JSON.parse(JSON.stringify(defs[tagName]));
    }
  };

  return api;
};

module.exports = Html;
},{"hinfo":125}],128:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":127,"dup":3}],129:[function(require,module,exports){
module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};

},{"./":136}],130:[function(require,module,exports){
var index = require("./index.js"),
    DomHandler = index.DomHandler,
    DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

require("inherits")(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value){
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function(){
	var feed = {},
	    feedRoot = getOneElement(isValidFeed, this.dom),
	    tmp, childs;

	if(feedRoot){
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
				if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else {
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;

},{"./index.js":136,"inherits":138}],131:[function(require,module,exports){
var Tokenizer = require("./Tokenizer.js");

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, th:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	h1      : { p:true },
	h2      : { p:true },
	h3      : { p:true },
	h4      : { p:true },
	h5      : { p:true },
	h6      : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true,

	//common self closing svg elements
	path: true,
	circle: true,
	ellipse: true,
	line: true,
	rect: true,
	use: true,
	stop: true,
	polyline: true,
	polygon: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
									!!this._options.lowerCaseTags :
									!this._options.xmlMode;
	this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
									!!this._options.lowerCaseAttributeNames :
									!this._options.xmlMode;

	if(this._options.Tokenizer) {
		Tokenizer = this._options.Tokenizer;
	}
	this._tokenizer = new Tokenizer(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

require("inherits")(Parser, require("events").EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;

},{"./Tokenizer.js":134,"events":122,"inherits":138}],132:[function(require,module,exports){
module.exports = ProxyHandler;

function ProxyHandler(cbs){
	this._cbs = cbs || {};
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});
},{"./":136}],133:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./WritableStream.js");

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

require("inherits")(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = require("../").EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});
},{"../":136,"./WritableStream.js":135,"inherits":138}],134:[function(require,module,exports){
module.exports = Tokenizer;

var decodeCodePoint = require("entities/lib/decode_codepoint.js"),
    entityMap = require("entities/maps/entities.json"),
    legacyMap = require("entities/maps/legacy.json"),
    xmlMap    = require("entities/maps/xml.json"),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decodeCodePoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._bufferOffset += this._index;
		this._index = 0;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._bufferOffset += this._index;
			this._index = 0;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};

},{"entities/lib/decode_codepoint.js":116,"entities/maps/entities.json":119,"entities/maps/legacy.json":120,"entities/maps/xml.json":121}],135:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./Parser.js"),
    WritableStream = require("stream").Writable || require("readable-stream").Writable,
    StringDecoder = require("string_decoder").StringDecoder,
    Buffer = require("buffer").Buffer;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);
	var decoder = this._decoder = new StringDecoder();

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end(decoder.end());
	});
}

require("inherits")(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	if(chunk instanceof Buffer) chunk = this._decoder.write(chunk);
	this._parser.write(chunk);
	cb();
};
},{"./Parser.js":131,"buffer":83,"inherits":138,"readable-stream":81,"stream":208,"string_decoder":209}],136:[function(require,module,exports){
var Parser = require("./Parser.js"),
    DomHandler = require("domhandler");

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: require("./Tokenizer.js"),
	ElementType: require("domelementtype"),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", require("./FeedHandler.js"));
	},
	get Stream(){
		return defineProp("Stream", require("./Stream.js"));
	},
	get WritableStream(){
		return defineProp("WritableStream", require("./WritableStream.js"));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", require("./ProxyHandler.js"));
	},
	get DomUtils(){
		return defineProp("DomUtils", require("domutils"));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", require("./CollectingHandler.js"));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options){
		var handler = new DomHandler(options);
		new Parser(handler, options).end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler(options);
		new Parser(handler, options).end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};

},{"./CollectingHandler.js":129,"./FeedHandler.js":130,"./Parser.js":131,"./ProxyHandler.js":132,"./Stream.js":133,"./Tokenizer.js":134,"./WritableStream.js":135,"domelementtype":101,"domhandler":102,"domutils":105}],137:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],138:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],139:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],140:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],141:[function(require,module,exports){
'use strict';

var Mtree = require('1tree-factory');

var createTree = require('./plugins/createTree');
var insertBefore = require('./plugins/insertBefore');
var dom = require('./plugins/dom');
var parse = require('./plugins/parse');
var select = require('./plugins/select');
var stringify = require('./plugins/stringify');
var types = require('./plugins/types');
var vdom = require('./plugins/vdom');

var Htree = Mtree(dom, parse, select, stringify, types, vdom);

// add afterwards because the original createTree doesn't exist until now
Htree.plugin(createTree);
// add afterwards so that it wraps parentMap and not the other way round
Htree.plugin(insertBefore);

module.exports = Htree;
},{"./plugins/createTree":144,"./plugins/dom":147,"./plugins/insertBefore":149,"./plugins/parse":150,"./plugins/select":152,"./plugins/stringify":153,"./plugins/types":154,"./plugins/vdom":155,"1tree-factory":3}],142:[function(require,module,exports){
'use strict';

var EntityNode = require('mtype-node');

var DomHandler = function DomHandler(options) {
  var state = State(options);

  var handler = { state: state };

  var api = Api(handler);

  return api;
};

//default options
var defaultOpts = {
  normalizeWhitespace: false
};

var whitespace = /\s+/g;

var State = function State(options) {
  options = options || defaultOpts;

  var dom = EntityNode('documentFragment');
  var done = false;
  var tagStack = [];
  var parser = null;

  var state = {
    options: options, dom: dom, done: done, tagStack: tagStack, parser: parser
  };

  return state;
};

var Api = function Api(handler) {
  var oninit = function oninit(parser) {
    return handler.state.parser = parser;
  };

  var onreset = function onreset() {
    var options = handler.state.options;


    handler.state = State(options);
  };

  var onend = function onend() {
    if (handler.state.done) return;

    handler.state.done = true;
    handler.state.parser = null;
    onerror(null);
  };

  var onerror = function onerror(err) {
    if (err) throw err;
  };

  var onclosetag = function onclosetag() {
    var tagStack = handler.state.tagStack;


    tagStack.pop();
  };

  var onopentag = function onopentag(name, attribs) {
    var tagStack = handler.state.tagStack;


    var element = EntityNode('element', {
      tagName: name,
      attributes: attribs
    });

    addDomElement(handler, element);
    tagStack.push(element);
  };

  var ontext = function ontext(data) {
    var options = handler.state.options;


    var normalize = options.normalizeWhitespace || options.ignoreWhitespace ? function (str) {
      return str.replace(whitespace, ' ');
    } : function (str) {
      return str;
    };

    var previousText = findPreviousText(handler);

    if (previousText) {
      previousText.value.nodeValue = normalize(previousText.nodeValue + data);
    } else {
      data = normalize(data);

      var text = EntityNode('text', { nodeValue: data });

      addDomElement(handler, text);
    }
  };

  var oncomment = function oncomment(data) {
    var tagStack = handler.state.tagStack;


    var lastTag = tagStack[tagStack.length - 1];

    if (lastTag && lastTag.value.nodeType === 'comment') {
      lastTag.value.nodeValue += data;

      return;
    }

    var comment = EntityNode('comment', { nodeValue: data });

    addDomElement(handler, comment);
    tagStack.push(comment);
  };

  var onprocessinginstruction = function onprocessinginstruction(name, data) {
    oncomment(data);
    oncommentend();
  };

  var oncommentend = function oncommentend() {
    return handler.state.tagStack.pop();
  };

  var getDom = function getDom() {
    return handler.state.dom;
  };

  var api = {
    oninit: oninit, onreset: onreset, onend: onend, onerror: onerror, onclosetag: onclosetag, onopentag: onopentag, ontext: ontext, oncomment: oncomment,
    oncommentend: oncommentend, onprocessinginstruction: onprocessinginstruction, getDom: getDom
  };

  return api;
};

var findPreviousText = function findPreviousText(handler) {
  var _handler$state = handler.state,
      tagStack = _handler$state.tagStack,
      dom = _handler$state.dom;


  if (tagStack.length) {
    var lastTag = tagStack[tagStack.length - 1];
    var _children = lastTag.children;

    if (_children.length) {
      var _lastChild = _children[_children.length - 1];

      if (_lastChild.value.nodeType === 'text') return _lastChild;
    }
  }

  var children = dom.children;

  if (!children || !children.length) return;

  var lastChild = children[children.length - 1];

  if (lastChild.value.nodeType === 'text') return lastChild;
};

var addDomElement = function addDomElement(handler, element) {
  var _handler$state2 = handler.state,
      tagStack = _handler$state2.tagStack,
      dom = _handler$state2.dom;


  var parent = tagStack[tagStack.length - 1];
  var target = parent ? parent.children : dom.children;

  target.push(element);
};

module.exports = DomHandler;
},{"mtype-node":182}],143:[function(require,module,exports){
'use strict';

var htmlparser2 = require('htmlparser2');
var DomHandler = require('./domhandler-adapter');

var parse = function parse(str) {
  var handler = DomHandler();
  new htmlparser2.Parser(handler).end(str);

  return handler.getDom();
};

module.exports = parse;
},{"./domhandler-adapter":142,"htmlparser2":136}],144:[function(require,module,exports){
'use strict';

/*
  Extend createTree to allow creating a tree from an HTML string
*/

var parseStr = require('../../parse');

// should be added after the default plugins so that createTree exists!
var createTreeFromStr = function createTreeFromStr(fn) {
  // override createTree to allow passing a string
  var originalCreateTree = fn.createTree;

  var createTree = function createTree(rootValue) {
    if (typeof rootValue === 'string') rootValue = parseStr(rootValue);

    return originalCreateTree(rootValue);
  };

  createTree.def = originalCreateTree.def;

  return Object.assign(fn, { createTree: createTree });
};

module.exports = createTreeFromStr;
},{"../../parse":143}],145:[function(require,module,exports){
'use strict';

var EntityNode = require('mtype-node');
var utils = require('mojule-utils');

var capitalizeFirstLetter = utils.capitalizeFirstLetter;


var nodeMap = {
  element: function element() {
    return {
      tagName: 'div',
      attributes: {}
    };
  },
  comment: function comment() {
    return {
      nodeValue: '',
      isEmpty: true
    };
  },
  text: function text() {
    return {
      nodeValue: '',
      isEmpty: true
    };
  },
  documentType: function documentType() {
    return {
      name: 'html',
      publicId: '',
      systemId: '',
      isEmpty: true
    };
  }
};

var createDomNode = function createDomNode(fn, nodeType, value) {
  var defaultValue = nodeType in nodeMap ? nodeMap[nodeType]() : {};

  value = Object.assign({ nodeType: nodeType }, defaultValue, value || {});

  var entityNode = EntityNode(nodeType, value);

  var node = fn.createNode(entityNode.value);

  var capNodeType = capitalizeFirstLetter(nodeType);
  var assertName = 'assert' + capNodeType;

  fn[assertName](node);

  return node;
};

var createDomNodeDef = function createDomNodeDef(nodeType, argTypes) {
  return {
    argTypes: argTypes,
    returnType: 'node',
    requires: ['createNode', 'assert' + capitalizeFirstLetter(nodeType)],
    categories: ['create', 'plugin']
  };
};

var create = function create(fn) {
  var createElement = function createElement(tagName, attributes) {
    attributes = attributes || {};

    return createDomNode(fn, 'element', { tagName: tagName, attributes: attributes });
  };

  createElement.def = createDomNodeDef('element', ['string', 'object']);

  var createComment = function createComment(nodeValue) {
    return createDomNode(fn, 'element', { nodeValue: nodeValue });
  };

  createComment.def = createDomNodeDef('comment', ['string']);

  var createDocument = function createDocument() {
    return createDomNode(fn, 'document');
  };

  createDocument.def = createDomNodeDef('document', []);

  var createDocumentFragment = function createDocumentFragment() {
    return createDomNode(fn, 'documentFragment');
  };

  createDocumentFragment.def = createDomNodeDef('documentFragment', []);

  var createText = function createText(nodeValue) {
    return createDomNode(fn, 'text', {
      nodeValue: String(nodeValue)
    });
  };

  createText.def = createDomNodeDef('text', ['string']);

  var createDocumentType = function createDocumentType(name, publicId, systemId) {
    return createDomNode(fn, 'documentType', { name: name, publicId: publicId, systemId: systemId });
  };

  createDocumentType.def = createDomNodeDef('documentType', ['string', 'string', 'string']);

  var plugins = {
    createText: createText, createElement: createElement, createComment: createComment, createDocument: createDocument,
    createDocumentFragment: createDocumentFragment, createDocumentType: createDocumentType
  };

  return Object.assign(fn, plugins);
};

module.exports = create;
},{"mojule-utils":178,"mtype-node":182}],146:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var utils = require('mojule-utils');

var clone = utils.clone;


var element = function element(fn) {
  var attributes = function attributes(node, attributeMap) {
    fn.assertElement(node);

    var nodeValue = fn.value(node);

    if ((typeof attributeMap === 'undefined' ? 'undefined' : _typeof(attributeMap)) === 'object') {
      Object.keys(attributeMap).forEach(function (attributeName) {
        var attributeValue = attributeMap[attributeName];

        fn.attr(node, attributeName, attributeValue);
      });
    }

    if (nodeValue.attributes === undefined) return {};

    return clone(nodeValue.attributes);
  };

  attributes.def = {
    argTypes: ['node', 'object?'],
    returnType: 'object',
    requires: ['value', 'assertElement', 'attr'],
    categories: ['dom', 'attributes', 'plugins']
  };

  var tagName = function tagName(node, value) {
    fn.assertElement(node);

    var nodeValue = fn.value(node);

    if (value !== undefined) {
      nodeValue.tagName = value;

      fn.value(node, nodeValue);
    }

    return nodeValue.tagName;
  };

  tagName.def = {
    argTypes: ['node', 'string'],
    returnType: 'string',
    requires: ['value', 'assertElement'],
    categories: ['dom', 'tagName', 'plugins']
  };

  var attr = function attr(node, name, value) {
    fn.assertElement(node);

    var nodeValue = fn.value(node);

    if (value !== undefined) {
      if (nodeValue.attributes === undefined) nodeValue.attributes = {};

      nodeValue.attributes[name] = value.toString();

      fn.value(node, nodeValue);
    }

    if (_typeof(nodeValue.attributes) === 'object') return nodeValue.attributes[name];
  };

  attr.def = {
    argTypes: ['node', 'string', 'string'],
    returnType: 'string',
    requires: ['value', 'assertElement'],
    categories: ['dom', 'attr', 'plugins']
  };

  var hasAttr = function hasAttr(node, name) {
    fn.assertElement(node);

    return fn.attr(node, name) !== undefined;
  };

  hasAttr.def = {
    argTypes: ['node', 'string'],
    returnType: 'boolean',
    requires: ['value', 'assertElement'],
    categories: ['dom', 'hasAttr', 'plugins']
  };

  var removeAttr = function removeAttr(node, name) {
    fn.assertElement(node);

    var nodeValue = fn.value(node);

    if (_typeof(nodeValue.attributes) === 'object') delete nodeValue.attributes[name];

    fn.value(node, nodeValue);
  };

  removeAttr.def = {
    argTypes: ['node', 'string'],
    requires: ['value', 'assertElement'],
    categories: ['dom', 'removeAttr', 'plugins']
  };

  var clearAttrs = function clearAttrs(node) {
    fn.assertElement(node);

    var nodeValue = fn.value(node);

    nodeValue.attributes = {};

    fn.value(node, nodeValue);
  };

  clearAttrs.def = {
    argTypes: ['node'],
    requires: ['value', 'assertElement'],
    categories: ['dom', 'clearAttrs', 'plugins']
  };

  var clearClasses = function clearClasses(node) {
    fn.assertElement(node);

    fn.attr(node, 'class', '');
  };

  clearClasses.def = {
    argTypes: ['node'],
    requires: ['value', 'assertElement'],
    categories: ['dom', 'clearClasses', 'plugins']
  };

  var classNames = function classNames(node) {
    fn.assertElement(node);

    var classNames = fn.attr(node, 'class');

    if (typeof classNames === 'string') return classNames.split(' ');

    return [];
  };

  classNames.def = {
    argTypes: ['node'],
    returnType: '[string]',
    requires: ['attr', 'assertElement'],
    categories: ['dom', 'classNames', 'plugins']
  };

  var hasClass = function hasClass(node, className) {
    fn.assertElement(node);

    return fn.classNames(node).some(function (name) {
      return name === className;
    });
  };

  hasClass.def = {
    argTypes: ['node', 'string'],
    returnType: 'boolean',
    requires: ['classNames', 'assertElement'],
    categories: ['dom', 'hasClass', 'plugins']
  };

  var addClass = function addClass(node, className) {
    fn.assertElement(node);

    className = className.trim();

    var existing = fn.classNames(node);

    existing.push(className);

    fn.attr(node, 'class', existing.join(' '));

    return node;
  };

  addClass.def = {
    argTypes: ['node', 'string'],
    returnType: 'node',
    requires: ['classNames', 'attr', 'assertElement'],
    categories: ['dom', 'addClass', 'plugins']
  };

  var removeClass = function removeClass(node, className) {
    fn.assertElement(node);

    className = className.trim();

    var existing = fn.classNames(node).filter(function (name) {
      return name !== className;
    });

    fn.attr(node, 'class', existing.join(' '));

    return node;
  };

  removeClass.def = {
    argTypes: ['node', 'string'],
    returnType: 'node',
    requires: ['classNames', 'attr', 'assertElement'],
    categories: ['dom', 'removeClass', 'plugins']
  };

  var toggleClass = function toggleClass(node, className, shouldHave) {
    fn.assertElement(node);

    var alreadyHas = fn.hasClass(node, className);

    if (typeof shouldHave !== 'boolean') return fn.toggleClass(node, className, !alreadyHas);

    if (alreadyHas) {
      if (shouldHave) return node;

      return fn.removeClass(node, className);
    }

    if (shouldHave) return fn.addClass(node, className);

    return node;
  };

  toggleClass.def = {
    argTypes: ['node', 'string', 'boolean'],
    returnType: 'node',
    requires: ['hasClass', 'removeClass', 'addClass', 'assertElement'],
    categories: ['dom', 'toggleClass', 'plugins']
  };

  var plugins = {
    attributes: attributes, attr: attr, hasAttr: hasAttr, removeAttr: removeAttr, classNames: classNames, hasClass: hasClass, addClass: addClass,
    removeClass: removeClass, toggleClass: toggleClass, tagName: tagName, clearAttrs: clearAttrs, clearClasses: clearClasses
  };

  return Object.assign(fn, plugins);
};

module.exports = element;
},{"mojule-utils":178}],147:[function(require,module,exports){
'use strict';

var element = require('./element');
var create = require('./create');
var node = require('./node');

var dom = function dom(fn) {
  element(fn);
  create(fn);
  node(fn);
};

module.exports = dom;
},{"./create":145,"./element":146,"./node":148}],148:[function(require,module,exports){
'use strict';

var Html = require('html-node');

var html = Html();

var emptyNodeTypes = ['text', 'comment', 'documentType'];

var nodeNameMap = {
  element: function element(fn, node) {
    return fn.tagName(node);
  },
  documentType: function documentType(fn, node) {
    var value = fn.value(node);

    return value.name;
  }
};

var nodePlugins = function nodePlugins(fn) {
  var nodeType = function nodeType(fn, node) {
    var value = fn.value(node);

    return value.nodeType;
  };

  nodeType.def = {
    argTypes: ['fn', 'node'],
    returnType: 'string',
    requires: ['value'],
    categories: ['node', 'plugin']
  };

  var nodeName = function nodeName(fn, node) {
    var nodeType = fn.nodeType(fn, node);

    if (nodeType in nodeNameMap) return nodeNameMap[nodeType](fn, node);

    return '#' + nodeType;
  };

  nodeName.def = {
    argTypes: ['fn', 'node'],
    returnType: 'string',
    requires: ['nodeType'],
    categories: ['node', 'plugin']
  };

  var isEmpty = function isEmpty(fn, node) {
    var nodeType = fn.nodeType(fn, node);

    if (emptyNodeTypes.includes(nodeType)) return true;

    if (nodeType === 'element') {
      var tagName = fn.tagName(node);

      return html.isEmpty(tagName);
    }

    // assumes remaining node types should be able to have children, is this true?
    return false;
  };

  isEmpty.def = {
    argType: ['fn', 'node'],
    returnType: 'boolean',
    require: ['nodeType', 'tagName'],
    categories: ['node', 'plugin']
  };

  var accepts = function accepts(fn, node, childNode) {
    var isEmpty = fn.isEmpty(fn, node);

    if (isEmpty) return false;

    var nodeType = fn.nodeType(fn, node);
    var childNodeType = fn.nodeType(fn, childNode);

    if (childNodeType === 'documentType') return nodeType === 'document';

    if (nodeType === 'element') {
      if (childNodeType === 'text' || childNodeType === 'comment') return true;

      var _nodeName = fn.nodeName(fn, node);
      var childName = fn.nodeName(fn, childNode);

      return html.accepts(_nodeName, childName);
    }

    // assumes non-elements that can have child nodes can have any child node,
    // is this true?
    return true;
  };

  accepts.def = {
    argType: ['fn', 'node', 'node'],
    returnType: 'boolean',
    require: ['isEmpty', 'nodeType', 'nodeName'],
    categories: ['node', 'plugin']
  };

  return Object.assign(fn, { nodeType: nodeType, nodeName: nodeName, isEmpty: isEmpty, accepts: accepts });
};

module.exports = nodePlugins;
},{"html-node":128}],149:[function(require,module,exports){
'use strict';

var insertBeforeWrapper = function insertBeforeWrapper(fn) {
  var originalInsertBefore = fn.insertBefore;

  var insertBefore = function insertBefore(fn, root, parentNode, childNode, referenceNode) {
    // TODO
    // handle document fragments
    // handle combining text elements
    return originalInsertBefore(fn, root, parentNode, childNode, referenceNode);
  };

  insertBefore.def = originalInsertBefore.def;

  return Object.assign(fn, { insertBefore: insertBefore });
};

module.exports = insertBeforeWrapper;
},{}],150:[function(require,module,exports){
'use strict';

var parseStr = require('../../parse');

var parser = function parser(fn) {
  var parse = function parse(str) {
    return fn.deserialize(parseStr(str));
  };

  parse.def = {
    argTypes: ['string'],
    returnType: 'node',
    requires: ['deserialize'],
    categories: ['parser', 'plugin']
  };

  return Object.assign(fn, { parse: parse });
};

module.exports = parser;
},{"../../parse":143}],151:[function(require,module,exports){
'use strict';

var baseAdapter = require('css-select-base-adapter');

var Adapter = function Adapter(fn, root) {
  var isTag = function isTag(node) {
    var value = fn.value(node);

    return value && value.nodeType === 'element';
  };

  var getAttributeValue = function getAttributeValue(node, name) {
    var value = fn.value(node);

    if (value && value.attributes) return value.attributes[name];
  };

  var getChildren = function getChildren(node) {
    return fn.getChildren(node);
  };

  var getName = function getName(node) {
    var value = fn.value(node);

    if (value) return value.tagName;
  };

  var getParent = function getParent(node) {
    return fn.getParent(fn, root, node);
  };

  var getText = function getText(node) {
    if (Array.isArray(node)) return node.map(getText).join('');

    if (isTag(node)) return getText(getChildren(node));

    var value = fn.value(node);

    if (value && value.nodeType === 'text') return value.nodeValue;

    return '';
  };

  var adapter = {
    isTag: isTag, getAttributeValue: getAttributeValue, getChildren: getChildren, getName: getName, getParent: getParent, getText: getText
  };

  return baseAdapter(adapter);
};

module.exports = Adapter;
},{"css-select-base-adapter":89}],152:[function(require,module,exports){
'use strict';

var Adapter = require('./htmlparser2-adapter');
var Select = require('../../select');

var Selecter = function Selecter(fn, root) {
  return Select(Adapter(fn, root));
};

var querySelector = function querySelector(fn) {
  var select = function select(fn, root, node, query) {
    return Selecter(fn, root).select(node, query);
  };

  select.def = {
    argTypes: ['fn', 'rootNode', 'node', 'string'],
    returnType: 'node',
    requires: ['value', 'getChildren', 'getParent'],
    categories: ['query', 'select', 'plugins']
  };

  var selectAll = function selectAll(fn, root, node, query) {
    return Selecter(fn, root).selectAll(node, query);
  };

  selectAll.def = {
    argTypes: ['fn', 'rootNode', 'node', 'string'],
    returnType: '[node]',
    requires: ['value', 'getChildren', 'getParent'],
    categories: ['query', 'select', 'plugins']
  };

  var matches = function matches(fn, root, node, query) {
    return Selecter(fn, root).matches(node, query);
  };

  matches.def = {
    argTypes: ['fn', 'rootNode', 'node', 'string'],
    returnType: 'boolean',
    requires: ['value', 'getChildren', 'getParent'],
    categories: ['query', 'select', 'plugins']
  };

  var plugin = { select: select, selectAll: selectAll, matches: matches };

  return Object.assign(fn, plugin);
};

module.exports = querySelector;
},{"../../select":157,"./htmlparser2-adapter":151}],153:[function(require,module,exports){
'use strict';

var stringifyNode = require('../../stringify');

var stringifier = function stringifier(fn) {
  var stringify = function stringify(node) {
    return stringifyNode(node);
  };

  stringify.def = {
    argTypes: ['node'],
    returnType: 'string',
    requires: [],
    categories: ['stringify', 'plugin']
  };

  return Object.assign(fn, { stringify: stringify });
};

module.exports = stringifier;
},{"../../stringify":158}],154:[function(require,module,exports){
'use strict';

var Validator = require('mtype-tv4');
var schema = require('../../schema');
var utils = require('mojule-utils');

var capitalizeFirstLetter = utils.capitalizeFirstLetter;

// could get this from the names, but better to be explicit

var nodeTypes = ['text', 'element', 'comment', 'document', 'documentType', 'documentFragment'];

var validator = Validator(schema);
var t = Validator.mtype(validator);

var isType = function isType(node, typename) {
  return t.is(node, typename);
};

isType.def = {
  argTypes: ['node', 'string'],
  returnType: 'boolean',
  requires: [],
  categories: ['type', 'plugin']
};

var types = function types(fn) {
  var assertType = function assertType(node, typename) {
    if (!fn.isType(node, typename)) {
      var result = validator.validateMultiple(node, schema[typename]);
      var errors = JSON.stringify(result.errors);

      throw new TypeError('Expected node to be ' + typename + '; ' + errors);
    }
  };

  assertType.def = {
    argTypes: ['node', 'string'],
    requires: ['isType'],
    categories: ['type', 'plugin']
  };

  var plugins = { isType: isType, assertType: assertType };

  // add isDocument, isText etc
  nodeTypes.forEach(function (typename) {
    var capTypename = capitalizeFirstLetter(typename);
    var isName = 'is' + capTypename;
    var assertName = 'assert' + capTypename;

    plugins[isName] = function (node) {
      return fn.isType(node, typename);
    };
    plugins[isName].def = isType.def;

    plugins[assertName] = function (node) {
      return fn.assertType(node, typename);
    };
    plugins[assertName].def = assertType.def;
  });

  return Object.assign(fn, plugins);
};

module.exports = types;
},{"../../schema":156,"mojule-utils":178,"mtype-tv4":188}],155:[function(require,module,exports){
'use strict';

var morphdom = require('morphdom');
var Vnode = require('../../vdom');

var morphdomPlugin = function morphdomPlugin(fn) {
  var patchDom = function patchDom(node, targetEl, options) {
    //Vnode expects wrapped node!
    var wrapped = fn.createTree(node);
    var vdom = Vnode(wrapped);

    morphdom(targetEl, vdom, options);
  };

  patchDom.def = {
    argTypes: ['node', 'object', 'object'],
    requires: ['createTree'],
    categories: ['patch', 'plugin']
  };

  return Object.assign(fn, { morphdom: patchDom });
};

module.exports = morphdomPlugin;
},{"../../vdom":159,"morphdom":179}],156:[function(require,module,exports){
'use strict';

var entityNode = require('mtype-node/schema/entityNode.schema.json');
var entityNodeValue = require('mtype-node/schema/entityNodeValue.schema.json');
var emptyNode = require('mtype-node/schema/emptyNode.schema.json');
var parentNode = require('mtype-node/schema/parentNode.schema.json');

var comment = require('../../schema/comment.schema.json');
var commentValue = require('../../schema/commentValue.schema.json');
var documentFragment = require('../../schema/documentFragment.schema.json');
var documentFragmentValue = require('../../schema/documentFragmentValue.schema.json');
var document = require('../../schema/document.schema.json');
var documentValue = require('../../schema/documentValue.schema.json');
var documentType = require('../../schema/documentType.json');
var documentTypeValue = require('../../schema/documentTypeValue.schema.json');
var element = require('../../schema/element.schema.json');
var elementValue = require('../../schema/elementValue.schema.json');
var text = require('../../schema/text.schema.json');
var textValue = require('../../schema/textValue.schema.json');

var schema = {
  comment: comment, commentValue: commentValue, documentFragment: documentFragment,
  documentFragmentValue: documentFragmentValue, document: document, documentValue: documentValue, documentType: documentType,
  documentTypeValue: documentTypeValue, element: element, elementValue: elementValue, text: text, textValue: textValue,

  entityNode: entityNode, entityNodeValue: entityNodeValue, emptyNode: emptyNode, parentNode: parentNode
};

module.exports = schema;
},{"../../schema/comment.schema.json":161,"../../schema/commentValue.schema.json":162,"../../schema/document.schema.json":163,"../../schema/documentFragment.schema.json":164,"../../schema/documentFragmentValue.schema.json":165,"../../schema/documentType.json":166,"../../schema/documentTypeValue.schema.json":167,"../../schema/documentValue.schema.json":168,"../../schema/element.schema.json":169,"../../schema/elementValue.schema.json":170,"../../schema/text.schema.json":171,"../../schema/textValue.schema.json":172,"mtype-node/schema/emptyNode.schema.json":183,"mtype-node/schema/entityNode.schema.json":184,"mtype-node/schema/entityNodeValue.schema.json":185,"mtype-node/schema/parentNode.schema.json":186}],157:[function(require,module,exports){
'use strict';

var CSSselect = require('css-select');

var Select = function Select(adapter) {
  var options = { adapter: adapter };

  var select = function select(node, selector) {
    return CSSselect.selectOne(selector, node, options);
  };

  var selectAll = function selectAll(node, selector) {
    return CSSselect(selector, node, options);
  };

  var matches = function matches(node, selector) {
    return CSSselect.is(node, selector, options);
  };

  var api = {
    select: select, selectAll: selectAll, matches: matches
  };

  return api;
};

module.exports = Select;
},{"css-select":90}],158:[function(require,module,exports){
'use strict';

var Html = require('html-node');
var utils = require('mojule-utils');

var escapeHtml = utils.escapeHtml;


var info = Html();

var stringify = function stringify(node) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var html = '';

  var nodeType = node.value.nodeType;


  if (nodeType === 'text') html += escapeHtml(node.value.nodeValue);

  if (nodeType === 'comment') html += '<!--' + node.value.nodeValue + '-->';

  if (nodeType === 'element') {
    (function () {
      var _node$value = node.value,
          tagName = _node$value.tagName,
          attributes = _node$value.attributes;


      html += '<' + tagName;

      if (attributes) Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        html += ' ' + name;

        if (value) html += '="' + value + '"';
      });

      html += info.isEmpty(tagName) ? ' />' : '>';

      depth++;
    })();
  }

  if (nodeType === 'documentType') {
    var _node$value2 = node.value,
        name = _node$value2.name,
        publicId = _node$value2.publicId,
        systemId = _node$value2.systemId;


    html += '<!doctype ' + name;

    if (publicId) {
      html += ' public "' + publicId + '"';
    }

    if (systemId) {
      html += ' "' + systemId + '"';
    }

    html += '>';
  }

  if (Array.isArray(node.children)) node.children.forEach(function (child) {
    return html += stringify(child, depth);
  });

  if (nodeType === 'element' && !info.isEmpty(node.value.tagName)) {
    html += '</' + node.value.tagName + '>';
  }

  return html;
};

module.exports = stringify;
},{"html-node":128,"mojule-utils":178}],159:[function(require,module,exports){
'use strict';

var Vnode = function Vnode(node) {
  if (node === null || node === undefined) {
    return node;
  }

  var vnode = {
    get firstChild() {
      return Vnode(node.firstChild());
    },

    get nextSibling() {
      return Vnode(node.nextSibling());
    },

    get nodeType() {
      return node.nodeType();
    },

    get nodeName() {
      return node.nodeName();
    },

    // should be something for svg or math etc.!
    get namespaceURI() {
      return 'http://www.w3.org/1999/xhtml';
    },

    get nodeValue() {
      var value = node.value();

      return value.nodeValue || '';
    },

    get value() {
      var value = node.value();

      return value.value;
    },

    get selected() {
      var value = node.value();

      return !!value.selected;
    },

    get disabled() {
      var value = node.value();

      return !!value.disabled;
    },

    // should be something for svg or math etc.!
    // hasAttributeNS: ( namespaceURI, name ) => {
    hasAttributeNS: function hasAttributeNS(namespaceURI) {
      return namespaceURI === vnode.namespaceURI;
    },

    assignAttributes: function assignAttributes(targetNode) {
      var attributes = node.attributes();

      Object.keys(attributes).forEach(function (name) {
        return targetNode.setAttribute(name, attributes[name]);
      });
    },

    actualize: function actualize(document) {
      return _actualize[vnode.nodeType](document, vnode);
    }
  };

  return vnode;
};

var addChildren = function addChildren(document, el, vnode) {
  var child = vnode.firstChild;

  while (child) {
    el.appendChild(child.actualize(document));
    child = child.nextSibling;
  }
};

var _actualize = {
  text: function text(document, vnode) {
    return document.createTextNode(vnode.nodeValue);
  },
  comment: function comment(document, vnode) {
    return document.createComment(vnode.nodeValue);
  },
  element: function element(document, vnode) {
    var el = document.createElement(vnode.nodeName);

    vnode.assignAttributes(el);

    addChildren(document, el, vnode);

    return el;
  },
  documentFragment: function documentFragment(document, vnode) {
    var el = document.createDocumentFragment();

    addChildren(document, el, vnode);

    return el;
  }
};

module.exports = Vnode;
},{}],160:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":141,"dup":3}],161:[function(require,module,exports){
module.exports={
  "id": "comment",
  "allOf": [
    { "$ref": "emptyNode" },
    {
      "properties": {
        "value": { "$ref": "commentValue" }
      }
    }
  ]
}

},{}],162:[function(require,module,exports){
module.exports={
  "id": "commentValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "comment" ]
        },
        "nodeValue": { "type": "string" }
      },
      "required": [ "nodeType", "nodeValue" ]
    }
  ]
}
},{}],163:[function(require,module,exports){
module.exports={
  "id": "document",
  "allOf": [
    { "$ref": "parentNode" },
    {
      "properties": {
        "value": { "$ref": "documentValue" }
      }      
    }    
  ]
}

},{}],164:[function(require,module,exports){
module.exports={
  "id": "documentFragment",
  "allOf": [
    { "$ref": "parentNode" },
    {
      "properties": {
        "value": { "$ref": "documentFragmentValue" }
      }      
    }    
  ]
}

},{}],165:[function(require,module,exports){
module.exports={
  "id": "documentFragmentValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "documentFragment" ]
        }
      },
      "required": [ "nodeType" ]
    }
  ]
}

},{}],166:[function(require,module,exports){
module.exports={
  "id": "documentType",
  "allOf": [
    { "$ref": "emptyNode" },
    {
      "properties": {
        "value": { "$ref": "documentTypeValue" }
      }
    }
  ]
}

},{}],167:[function(require,module,exports){
module.exports={
  "id": "documentTypeValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "documentType" ]
        },
        "name": { "type": "string" },
        "publicId": { "type": "string" },
        "systemId": { "type": "string" }
      },
      "required": [ "nodeType", "name", "publicId", "systemId" ]
    }
  ]
}
},{}],168:[function(require,module,exports){
module.exports={
  "id": "documentValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "document" ]
        }
      },
      "required": [ "nodeType" ]
    }
  ]
}

},{}],169:[function(require,module,exports){
module.exports={
  "id": "element",
  "allOf": [
    { "$ref": "parentNode" },
    {
      "properties": {
        "value": { "$ref": "elementValue" }
      }      
    }    
  ]
}

},{}],170:[function(require,module,exports){
module.exports={
  "id": "elementValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "element" ]
        },
        "attributes": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      },
      "required": [ "nodeType", "attributes" ]
    }
  ]
}

},{}],171:[function(require,module,exports){
module.exports={
  "id": "text",
  "allOf": [
    { "$ref": "emptyNode" },
    {
      "properties": {
        "value": { "$ref": "textValue" }
      }
    }
  ]
}

},{}],172:[function(require,module,exports){
module.exports={
  "id": "textValue",
  "allOf":  [
    { "$ref": "entityNodeValue" },
    {
      "properties": {
        "nodeType": {
          "type": "string",
          "enum": [ "text" ]
        },
        "nodeValue": { "type": "string" }
      },
      "required": [ "nodeType", "nodeValue" ]
    }
  ]
}

},{}],173:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Htree = require('mojule-dom');
var utils = require('mojule-utils');

var clone = utils.clone;


var tokens = ['tag', 'text', 'html', 'if', 'not', 'each', 'empty', 'context', 'include'];

var tokenSelector = function tokenSelector(token) {
  return '[data-' + token + ']';
};
var selectors = tokens.map(tokenSelector);

var resolve = function resolve(scope, propertyName) {
  if (_typeof(scope.current) === 'object' && propertyName in scope.current) return scope.current[propertyName];

  if (propertyName === '.') return scope.current;

  if (scope.parent) return resolve(scope.parent, propertyName);
};

var actionWhitelist = ['tagName', 'attr', 'removeAttr', 'addClass', 'removeClass', 'toggleClass', 'clearAttrs', 'clearClasses', 'attributes'];

var handleAction = function handleAction(el, action) {
  return Object.keys(action).filter(function (fname) {
    return actionWhitelist.includes(fname);
  }).forEach(function (fname) {
    var args = action[fname];

    if (!Array.isArray(args)) args = [args];

    el[fname].apply(el, _toConsumableArray(args));
  });
};

var Templating = function Templating(templates) {
  var getTemplateFragment = function getTemplateFragment(name) {
    return Htree(clone(templates[name]));
  };

  var populateEl = {
    tag: function tag(el, scope, value) {
      if (value === undefined) return;

      if (!Array.isArray(value)) value = [value];

      value.forEach(function (action) {
        return handleAction(el, action);
      });
    },
    text: function text(el, scope, value) {
      el.empty();

      if (value === undefined) return;

      var textNode = el.createText(value);

      el.append(textNode);
    },
    html: function html(el, scope, value) {
      if (value === undefined) {
        el.empty();
        return;
      }

      var children = el.parse(value);

      el.append(children);
    },
    if: function _if(el, scope, value) {
      if (!value) el.empty();
    },
    not: function not(el, scope, value) {
      if (value) el.empty();
    },
    each: function each(el, scope, value) {
      if (value === undefined) {
        el.empty();

        return;
      }

      if (!Array.isArray(value)) {
        populateEl.context(el, scope, value);

        return;
      }

      var children = el.empty();

      value.forEach(function (item) {
        var childScope = {
          parent: scope,
          current: item
        };

        children.forEach(function (child) {
          el.append(child.clone());
        });

        populateNext(el, childScope);
      });
    },
    empty: function empty(el, scope, value) {
      if (value === undefined) {
        el.empty();
        return;
      }

      if (!Array.isArray(value) || value.length > 0) el.empty();
    },
    context: function context(el, scope, value) {
      if (value === undefined) return;

      var newScope = {
        parent: null,
        current: value
      };

      populateNext(el, newScope);
    },
    include: function include(el, scope, value) {
      el.empty();

      if (value === undefined) return;

      el.append(getTemplateFragment(value));
    }
  };

  var populateNext = function populateNext(template, scope) {
    var next = template.select(selectors.join(', '));

    if (!next) return template;

    var currentToken = tokens.find(function (token) {
      return next.matches(tokenSelector(token));
    });

    var attrName = 'data-' + currentToken;
    var name = next.attr(attrName);

    if (currentToken === 'include') {
      populateEl[currentToken](next, scope, name);
    } else {
      var value = resolve(scope, name);

      populateEl[currentToken](next, scope, value);

      if (value !== undefined) {
        scope = {
          parent: scope,
          current: value
        };
      }
    }

    next.removeAttr(attrName);

    return populateNext(template, scope);
  };

  var unwrapFragmentChildren = function unwrapFragmentChildren(fragment) {
    var notFragment = fragment.find(function (n) {
      return !n.matches('fragment');
    });

    if (!notFragment) return fragment;

    var fragmentParent = fragment.getParent();

    fragmentParent.insertBefore(notFragment, fragment);

    return unwrapFragmentChildren(fragment);
  };

  var unwrapNextFragment = function unwrapNextFragment(template) {
    var fragment = template.select('fragment');

    if (!fragment) return template;

    unwrapFragmentChildren(fragment);

    fragment.remove();

    return unwrapNextFragment(template);
  };

  var populate = function populate(name, model) {
    var template = getTemplateFragment(name);

    var scope = {
      parent: null,
      current: model
    };

    populateNext(template, scope);
    unwrapNextFragment(template);

    return template;
  };

  return populate;
};

Templating.getTemplates = function (htree) {
  if (typeof htree === 'string') htree = Htree(htree);

  var templateEls = htree.clone().selectAll('template[id]:not([id=""])');

  return templateEls.reduce(function (templates, el) {
    var id = el.attr('id');

    var fragment = htree.createDocumentFragment();

    el.getChildren().forEach(function (child) {
      return fragment.append(child);
    });

    templates[id] = fragment.serialize();

    return templates;
  }, {});
};

module.exports = Templating;
},{"mojule-dom":160,"mojule-utils":178}],174:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":173,"dup":3}],175:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('mojule-utils'),
    clone = _require.clone;

var Tree = require('1tree-json');

var transforms = {
  values: function values(data) {
    var model = data.model,
        transform = data.transform;


    var transformTree = Tree(transform);

    var valuePropertyNodes = transformTree.findAll(function (n) {
      return n.value().propertyName === '$value';
    });

    if (valuePropertyNodes.length === 0) return data;

    valuePropertyNodes.forEach(function (propertyNode) {
      var objectNode = propertyNode.getParent();
      var objectNodeParent = objectNode.getParent();

      var value = propertyNode.value();
      var sourcePropertyName = value.nodeValue;

      var newValueNode = sourcePropertyName in model ? Tree(model[sourcePropertyName]) : Tree('$delete');

      var propertyName = objectNode.value().propertyName;

      if (objectNodeParent.nodeType() === 'object') {
        objectNodeParent.setProperty(newValueNode, propertyName);
      } else {
        objectNodeParent.replaceChild(newValueNode, objectNode);
      }
    });

    transform = transformTree.toJson();

    return { model: model, transform: transform };
  },
  ifs: function ifs(data) {
    var model = data.model,
        transform = data.transform;


    var transformTree = Tree(transform);

    var ifPropertyNodes = transformTree.findAll(function (n) {
      return n.value().propertyName === '$if';
    });

    ifPropertyNodes.forEach(function (propertyNode) {
      var objectNode = propertyNode.getParent();
      var objectNodeParent = objectNode.getParent();

      var ifArgNodes = propertyNode.getChildren();

      var isValue = ifArgNodes[0].value().nodeValue;

      if (isValue && isValue !== '$delete') {
        var ifValueNode = ifArgNodes[1];

        var propertyName = objectNode.value().propertyName;

        if (propertyName) {
          var newValue = ifValueNode.value();
          newValue.propertyName = propertyName;
          ifValueNode.value(newValue);
        }

        if (objectNodeParent.nodeType() === 'object') {
          objectNodeParent.setProperty(ifValueNode, propertyName);
        } else {
          objectNodeParent.insertBefore(ifValueNode, objectNode);
        }
      }

      objectNode.remove();
    });

    transform = transformTree.toJson();

    return { model: model, transform: transform };
  },
  deletes: function deletes(data) {
    var model = data.model,
        transform = data.transform;


    var transformKeys = Object.keys(transform);

    transformKeys.forEach(function (propertyName) {
      if (transform[propertyName] === '$delete') {
        delete model[propertyName];
        delete transform[propertyName];
      }
    });

    return { model: model, transform: transform };
  },
  substitutes: function substitutes(data) {
    var model = data.model,
        transform = data.transform;


    var transformKeys = Object.keys(transform);

    transformKeys.forEach(function (propertyName) {
      model[propertyName] = transform[propertyName];
    });

    return { model: model, transform: transform };
  }
};

var transformMapper = function transformMapper(model, transform) {
  if (Array.isArray(model)) {
    return model.map(function (el) {
      return transformMapper(el, transform);
    });
  } else if ((typeof model === 'undefined' ? 'undefined' : _typeof(model)) !== 'object') {
    return model;
  }

  var data = clone({ model: model, transform: transform });

  Object.keys(transforms).forEach(function (transformName) {
    var fn = transforms[transformName];

    data = fn(data);
  });

  return data.model;
};

module.exports = transformMapper;
},{"1tree-json":16,"mojule-utils":178}],176:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":175,"dup":3}],177:[function(require,module,exports){
'use strict';

var clone = function clone() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return JSON.parse(JSON.stringify(obj));
};

var matches = function matches() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.keys(source).every(function (key) {
    return obj[key] === source[key];
  });
};

var id = function id() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;

  if (prefix) prefix = identifier(prefix) + '-';

  var str = prefix;

  for (var i = 0; i < length; i++) {
    str += Math.floor(Math.random() * 16).toString(16);
  }

  return str;
};

var identifier = function identifier() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var caseSensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var id = value.replace(/[^a-z0-9]/gi, '-').replace(/-{2,}/g, '-').replace(/^-/i, '').replace(/-$/i, '');

  if (!caseSensitive) id = id.toLowerCase();

  return id;
};

var escapeHtml = function escapeHtml() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var result = str.replace(/</g, '&lt;');
  return result;
};

var capitalizeFirstLetter = function capitalizeFirstLetter() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var utils = {
  id: id, identifier: identifier, matches: matches, clone: clone, escapeHtml: escapeHtml, capitalizeFirstLetter: capitalizeFirstLetter
};

module.exports = utils;
},{}],178:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":177,"dup":3}],179:[function(require,module,exports){
'use strict';

var range; // Create a range object for efficently rendering strings to elements.
var NS_XHTML = 'http://www.w3.org/1999/xhtml';

var doc = typeof document === 'undefined' ? undefined : document;

var testEl = doc ?
    doc.body || doc.createElement('div') :
    {};

// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>
// (IE7+ support) <=IE7 does not support el.hasAttribute(name)
var actualHasAttributeNS;

if (testEl.hasAttributeNS) {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.hasAttributeNS(namespaceURI, name);
    };
} else if (testEl.hasAttribute) {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.hasAttribute(name);
    };
} else {
    actualHasAttributeNS = function(el, namespaceURI, name) {
        return el.getAttributeNode(namespaceURI, name) != null;
    };
}

var hasAttributeNS = actualHasAttributeNS;


function toElement(str) {
    if (!range && doc.createRange) {
        range = doc.createRange();
        range.selectNode(doc.body);
    }

    var fragment;
    if (range && range.createContextualFragment) {
        fragment = range.createContextualFragment(str);
    } else {
        fragment = doc.createElement('body');
        fragment.innerHTML = str;
    }
    return fragment.childNodes[0];
}

/**
 * Returns true if two node's names are the same.
 *
 * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same
 *       nodeName and different namespace URIs.
 *
 * @param {Element} a
 * @param {Element} b The target element
 * @return {boolean}
 */
function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;

    if (fromNodeName === toNodeName) {
        return true;
    }

    if (toEl.actualize &&
        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */
        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {
        // If the target element is a virtual DOM node then we may need to normalize the tag name
        // before comparing. Normal HTML elements that are in the "http://www.w3.org/1999/xhtml"
        // are converted to upper case
        return fromNodeName === toNodeName.toUpperCase();
    } else {
        return false;
    }
}

/**
 * Create an element, optionally with a known namespace URI.
 *
 * @param {string} name the element name, e.g. 'div' or 'svg'
 * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of
 * its `xmlns` attribute or its inferred namespace.
 *
 * @return {Element}
 */
function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ?
        doc.createElement(name) :
        doc.createElementNS(namespaceURI, name);
}

/**
 * Copies the children of one DOM element to another DOM element
 */
function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
        var nextChild = curChild.nextSibling;
        toEl.appendChild(curChild);
        curChild = nextChild;
    }
    return toEl;
}

function morphAttrs(fromNode, toNode) {
    var attrs = toNode.attributes;
    var i;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;

    for (i = attrs.length - 1; i >= 0; --i) {
        attr = attrs[i];
        attrName = attr.name;
        attrNamespaceURI = attr.namespaceURI;
        attrValue = attr.value;

        if (attrNamespaceURI) {
            attrName = attr.localName || attrName;
            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);

            if (fromValue !== attrValue) {
                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
            }
        } else {
            fromValue = fromNode.getAttribute(attrName);

            if (fromValue !== attrValue) {
                fromNode.setAttribute(attrName, attrValue);
            }
        }
    }

    // Remove any extra attributes found on the original DOM element that
    // weren't found on the target element.
    attrs = fromNode.attributes;

    for (i = attrs.length - 1; i >= 0; --i) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            attrNamespaceURI = attr.namespaceURI;

            if (attrNamespaceURI) {
                attrName = attr.localName || attrName;

                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {
                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);
                }
            } else {
                if (!hasAttributeNS(toNode, null, attrName)) {
                    fromNode.removeAttribute(attrName);
                }
            }
        }
    }
}

function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
        fromEl[name] = toEl[name];
        if (fromEl[name]) {
            fromEl.setAttribute(name, '');
        } else {
            fromEl.removeAttribute(name, '');
        }
    }
}

var specialElHandlers = {
    /**
     * Needed for IE. Apparently IE doesn't think that "selected" is an
     * attribute when reading over the attributes using selectEl.attributes
     */
    OPTION: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'selected');
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'checked');
        syncBooleanAttrProp(fromEl, toEl, 'disabled');

        if (fromEl.value !== toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!hasAttributeNS(toEl, null, 'value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value !== newValue) {
            fromEl.value = newValue;
        }

        if (fromEl.firstChild) {
            // Needed for IE. Apparently IE sets the placeholder as the
            // node value and vise versa. This ignores an empty update.
            if (newValue === '' && fromEl.firstChild.nodeValue === fromEl.placeholder) {
                return;
            }

            fromEl.firstChild.nodeValue = newValue;
        }
    },
    SELECT: function(fromEl, toEl) {
        if (!hasAttributeNS(toEl, null, 'multiple')) {
            var selectedIndex = -1;
            var i = 0;
            var curChild = toEl.firstChild;
            while(curChild) {
                var nodeName = curChild.nodeName;
                if (nodeName && nodeName.toUpperCase() === 'OPTION') {
                    if (hasAttributeNS(curChild, null, 'selected')) {
                        selectedIndex = i;
                        break;
                    }
                    i++;
                }
                curChild = curChild.nextSibling;
            }

            fromEl.selectedIndex = i;
        }
    }
};

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;

function noop() {}

function defaultGetNodeKey(node) {
    return node.id;
}

function morphdomFactory(morphAttrs) {

    return function morphdom(fromNode, toNode, options) {
        if (!options) {
            options = {};
        }

        if (typeof toNode === 'string') {
            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {
                var toNodeHtml = toNode;
                toNode = doc.createElement('html');
                toNode.innerHTML = toNodeHtml;
            } else {
                toNode = toElement(toNode);
            }
        }

        var getNodeKey = options.getNodeKey || defaultGetNodeKey;
        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
        var onNodeAdded = options.onNodeAdded || noop;
        var onBeforeElUpdated = options.onBeforeElUpdated || noop;
        var onElUpdated = options.onElUpdated || noop;
        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
        var onNodeDiscarded = options.onNodeDiscarded || noop;
        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
        var childrenOnly = options.childrenOnly === true;

        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.
        var fromNodesLookup = {};
        var keyedRemovalList;

        function addKeyedRemoval(key) {
            if (keyedRemovalList) {
                keyedRemovalList.push(key);
            } else {
                keyedRemovalList = [key];
            }
        }

        function walkDiscardedChildNodes(node, skipKeyedNodes) {
            if (node.nodeType === ELEMENT_NODE) {
                var curChild = node.firstChild;
                while (curChild) {

                    var key = undefined;

                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {
                        // If we are skipping keyed nodes then we add the key
                        // to a list so that it can be handled at the very end.
                        addKeyedRemoval(key);
                    } else {
                        // Only report the node as discarded if it is not keyed. We do this because
                        // at the end we loop through all keyed elements that were unmatched
                        // and then discard them in one final pass.
                        onNodeDiscarded(curChild);
                        if (curChild.firstChild) {
                            walkDiscardedChildNodes(curChild, skipKeyedNodes);
                        }
                    }

                    curChild = curChild.nextSibling;
                }
            }
        }

        /**
         * Removes a DOM node out of the original DOM
         *
         * @param  {Node} node The node to remove
         * @param  {Node} parentNode The nodes parent
         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.
         * @return {undefined}
         */
        function removeNode(node, parentNode, skipKeyedNodes) {
            if (onBeforeNodeDiscarded(node) === false) {
                return;
            }

            if (parentNode) {
                parentNode.removeChild(node);
            }

            onNodeDiscarded(node);
            walkDiscardedChildNodes(node, skipKeyedNodes);
        }

        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future
        // function indexTree(root) {
        //     var treeWalker = document.createTreeWalker(
        //         root,
        //         NodeFilter.SHOW_ELEMENT);
        //
        //     var el;
        //     while((el = treeWalker.nextNode())) {
        //         var key = getNodeKey(el);
        //         if (key) {
        //             fromNodesLookup[key] = el;
        //         }
        //     }
        // }

        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future
        //
        // function indexTree(node) {
        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);
        //     var el;
        //     while((el = nodeIterator.nextNode())) {
        //         var key = getNodeKey(el);
        //         if (key) {
        //             fromNodesLookup[key] = el;
        //         }
        //     }
        // }

        function indexTree(node) {
            if (node.nodeType === ELEMENT_NODE) {
                var curChild = node.firstChild;
                while (curChild) {
                    var key = getNodeKey(curChild);
                    if (key) {
                        fromNodesLookup[key] = curChild;
                    }

                    // Walk recursively
                    indexTree(curChild);

                    curChild = curChild.nextSibling;
                }
            }
        }

        indexTree(fromNode);

        function handleNodeAdded(el) {
            onNodeAdded(el);

            var curChild = el.firstChild;
            while (curChild) {
                var nextSibling = curChild.nextSibling;

                var key = getNodeKey(curChild);
                if (key) {
                    var unmatchedFromEl = fromNodesLookup[key];
                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
                        morphEl(unmatchedFromEl, curChild);
                    }
                }

                handleNodeAdded(curChild);
                curChild = nextSibling;
            }
        }

        function morphEl(fromEl, toEl, childrenOnly) {
            var toElKey = getNodeKey(toEl);
            var curFromNodeKey;

            if (toElKey) {
                // If an element with an ID is being morphed then it is will be in the final
                // DOM so clear it out of the saved elements collection
                delete fromNodesLookup[toElKey];
            }

            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {
                return;
            }

            if (!childrenOnly) {
                if (onBeforeElUpdated(fromEl, toEl) === false) {
                    return;
                }

                morphAttrs(fromEl, toEl);
                onElUpdated(fromEl);

                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
                    return;
                }
            }

            if (fromEl.nodeName !== 'TEXTAREA') {
                var curToNodeChild = toEl.firstChild;
                var curFromNodeChild = fromEl.firstChild;
                var curToNodeKey;

                var fromNextSibling;
                var toNextSibling;
                var matchingFromEl;

                outer: while (curToNodeChild) {
                    toNextSibling = curToNodeChild.nextSibling;
                    curToNodeKey = getNodeKey(curToNodeChild);

                    while (curFromNodeChild) {
                        fromNextSibling = curFromNodeChild.nextSibling;

                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }

                        curFromNodeKey = getNodeKey(curFromNodeChild);

                        var curFromNodeType = curFromNodeChild.nodeType;

                        var isCompatible = undefined;

                        if (curFromNodeType === curToNodeChild.nodeType) {
                            if (curFromNodeType === ELEMENT_NODE) {
                                // Both nodes being compared are Element nodes

                                if (curToNodeKey) {
                                    // The target node has a key so we want to match it up with the correct element
                                    // in the original DOM tree
                                    if (curToNodeKey !== curFromNodeKey) {
                                        // The current element in the original DOM tree does not have a matching key so
                                        // let's check our lookup to see if there is a matching element in the original
                                        // DOM tree
                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {
                                            if (curFromNodeChild.nextSibling === matchingFromEl) {
                                                // Special case for single element removals. To avoid removing the original
                                                // DOM node out of the tree (since that can break CSS transitions, etc.),
                                                // we will instead discard the current node and wait until the next
                                                // iteration to properly match up the keyed target element with its matching
                                                // element in the original tree
                                                isCompatible = false;
                                            } else {
                                                // We found a matching keyed element somewhere in the original DOM tree.
                                                // Let's moving the original DOM node into the current position and morph
                                                // it.

                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through
                                                // the `removeNode()` function for the node that is being discarded so that
                                                // all lifecycle hooks are correctly invoked
                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);

                                                fromNextSibling = curFromNodeChild.nextSibling;

                                                if (curFromNodeKey) {
                                                    // Since the node is keyed it might be matched up later so we defer
                                                    // the actual removal to later
                                                    addKeyedRemoval(curFromNodeKey);
                                                } else {
                                                    // NOTE: we skip nested keyed nodes from being removed since there is
                                                    //       still a chance they will be matched up later
                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                                                }

                                                curFromNodeChild = matchingFromEl;
                                            }
                                        } else {
                                            // The nodes are not compatible since the "to" node has a key and there
                                            // is no matching keyed node in the source tree
                                            isCompatible = false;
                                        }
                                    }
                                } else if (curFromNodeKey) {
                                    // The original has a key
                                    isCompatible = false;
                                }

                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                                if (isCompatible) {
                                    // We found compatible DOM elements so transform
                                    // the current "from" node to match the current
                                    // target DOM node.
                                    morphEl(curFromNodeChild, curToNodeChild);
                                }

                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                                // Both nodes being compared are Text or Comment nodes
                                isCompatible = true;
                                // Simply update nodeValue on the original node to
                                // change the text value
                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                            }
                        }

                        if (isCompatible) {
                            // Advance both the "to" child and the "from" child since we found a match
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }

                        // No compatible match so remove the old node from the DOM and continue trying to find a
                        // match in the original DOM. However, we only do this if the from node is not keyed
                        // since it is possible that a keyed node might match up with a node somewhere else in the
                        // target tree and we don't want to discard it just yet since it still might find a
                        // home in the final DOM tree. After everything is done we will remove any keyed nodes
                        // that didn't find a home
                        if (curFromNodeKey) {
                            // Since the node is keyed it might be matched up later so we defer
                            // the actual removal to later
                            addKeyedRemoval(curFromNodeKey);
                        } else {
                            // NOTE: we skip nested keyed nodes from being removed since there is
                            //       still a chance they will be matched up later
                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                        }

                        curFromNodeChild = fromNextSibling;
                    }

                    // If we got this far then we did not find a candidate match for
                    // our "to node" and we exhausted all of the children "from"
                    // nodes. Therefore, we will just append the current "to" node
                    // to the end
                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
                        fromEl.appendChild(matchingFromEl);
                        morphEl(matchingFromEl, curToNodeChild);
                    } else {
                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
                        if (onBeforeNodeAddedResult !== false) {
                            if (onBeforeNodeAddedResult) {
                                curToNodeChild = onBeforeNodeAddedResult;
                            }

                            if (curToNodeChild.actualize) {
                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                            }
                            fromEl.appendChild(curToNodeChild);
                            handleNodeAdded(curToNodeChild);
                        }
                    }

                    curToNodeChild = toNextSibling;
                    curFromNodeChild = fromNextSibling;
                }

                // We have processed all of the "to nodes". If curFromNodeChild is
                // non-null then we still have some from nodes left over that need
                // to be removed
                while (curFromNodeChild) {
                    fromNextSibling = curFromNodeChild.nextSibling;
                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {
                        // Since the node is keyed it might be matched up later so we defer
                        // the actual removal to later
                        addKeyedRemoval(curFromNodeKey);
                    } else {
                        // NOTE: we skip nested keyed nodes from being removed since there is
                        //       still a chance they will be matched up later
                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);
                    }
                    curFromNodeChild = fromNextSibling;
                }
            }

            var specialElHandler = specialElHandlers[fromEl.nodeName];
            if (specialElHandler) {
                specialElHandler(fromEl, toEl);
            }
        } // END: morphEl(...)

        var morphedNode = fromNode;
        var morphedNodeType = morphedNode.nodeType;
        var toNodeType = toNode.nodeType;

        if (!childrenOnly) {
            // Handle the case where we are given two DOM nodes that are not
            // compatible (e.g. <div> --> <span> or <div> --> TEXT)
            if (morphedNodeType === ELEMENT_NODE) {
                if (toNodeType === ELEMENT_NODE) {
                    if (!compareNodeNames(fromNode, toNode)) {
                        onNodeDiscarded(fromNode);
                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
                    }
                } else {
                    // Going from an element node to a text node
                    morphedNode = toNode;
                }
            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node
                if (toNodeType === morphedNodeType) {
                    morphedNode.nodeValue = toNode.nodeValue;
                    return morphedNode;
                } else {
                    // Text node to something else
                    morphedNode = toNode;
                }
            }
        }

        if (morphedNode === toNode) {
            // The "to node" was not compatible with the "from node" so we had to
            // toss out the "from node" and use the "to node"
            onNodeDiscarded(fromNode);
        } else {
            morphEl(morphedNode, toNode, childrenOnly);

            // We now need to loop over any keyed nodes that might need to be
            // removed. We only do the removal if we know that the keyed node
            // never found a match. When a keyed node is matched up we remove
            // it out of fromNodesLookup and we use fromNodesLookup to determine
            // if a keyed node has been matched up or not
            if (keyedRemovalList) {
                for (var i=0, len=keyedRemovalList.length; i<len; i++) {
                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];
                    if (elToRemove) {
                        removeNode(elToRemove, elToRemove.parentNode, false);
                    }
                }
            }
        }

        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
            if (morphedNode.actualize) {
                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
            }
            // If we had to swap out the from node with a new node because the old
            // node was not compatible with the target node then we need to
            // replace the old DOM node in the original DOM tree. This is only
            // possible if the original DOM node was part of a DOM tree which
            // we know is the case if it has a parent node.
            fromNode.parentNode.replaceChild(morphedNode, fromNode);
        }

        return morphedNode;
    };
}

var morphdom = morphdomFactory(morphAttrs);

module.exports = morphdom;

},{}],180:[function(require,module,exports){
'use strict';

var Validator = require('mtype-tv4');
var utils = require('mojule-utils');
var schema = require('./schema');

var id = utils.id;


var validator = Validator(schema);
var t = Validator.mtype(validator);

var EntityNodeValue = function EntityNodeValue() {
  var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'entityNode';
  var additionalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var value = Object.assign({ nodeType: nodeType }, additionalValues);

  if (typeof value._id !== 'string') value._id = id(value.nodeType);

  if (!t.is(value, 'entityNodeValue')) throw new TypeError('Cannot create an entityNodeValue with those arguments');

  return value;
};

var EntityNode = function EntityNode() {
  var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'entityNode';
  var additionalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var value = EntityNodeValue(nodeType, additionalValues);
  var children = [];

  return { value: value, children: children };
};

EntityNode.Value = EntityNodeValue;
EntityNode.mtype = t;

module.exports = EntityNode;
},{"./schema":181,"mojule-utils":178,"mtype-tv4":188}],181:[function(require,module,exports){
'use strict';

var entityNode = require('../schema/entityNode.schema.json');
var entityNodeValue = require('../schema/entityNodeValue.schema.json');
var emptyNode = require('../schema/emptyNode.schema.json');
var parentNode = require('../schema/parentNode.schema.json');

var schema = {
  entityNode: entityNode, entityNodeValue: entityNodeValue, emptyNode: emptyNode, parentNode: parentNode
};

module.exports = schema;
},{"../schema/emptyNode.schema.json":183,"../schema/entityNode.schema.json":184,"../schema/entityNodeValue.schema.json":185,"../schema/parentNode.schema.json":186}],182:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":180,"dup":3}],183:[function(require,module,exports){
module.exports={
  "id": "emptyNode",
  "allOf": [
    { "$ref": "entityNode" },
    {
      "properties": {
        "value": { "$ref": "entityNodeValue" },
        "children": {
          "type": "array",
          "maxLength": 0
        }
      }
    }
  ]
}

},{}],184:[function(require,module,exports){
module.exports={
  "id": "entityNode",
  "type": "object",
  "properties": {
    "value": { "$ref": "entityNodeValue" }
  },
  "required": [ "value" ]
}

},{}],185:[function(require,module,exports){
module.exports={
  "id": "entityNodeValue",
  "type": "object",
  "properties": {
    "_id": {
      "type": "string",
      "minLength": 1
    },
    "nodeType": {
      "type": "string",
      "minLength": 1
    }
  },
  "required": [ "_id", "nodeType" ]
}

},{}],186:[function(require,module,exports){
module.exports={
  "id": "parentNode",
  "allOf": [
    { "$ref": "entityNode" },
    {
      "properties": {
        "children": {
          "type": "array",
          "items": { "$ref": "entityNode" }
        }
      },
      "required": [ "children" ]
    }
  ]
}

},{}],187:[function(require,module,exports){
'use strict';

var tv4 = require('tv4');
var T = require('mtype');

var Validator = function Validator() {
  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var validator = tv4.freshApi();

  var schemas = Object.keys(schema).map(function (name) {
    return schema[name];
  });

  schemas.forEach(function (schema) {
    return validator.addSchema(schema);
  });

  return validator;
};

Validator.mtype = function () {
  var validator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Validator();

  var schemaNames = validator.getSchemaUris();

  var is = schemaNames.reduce(function (map, name) {
    map[name] = function (obj) {
      return validator.validate(obj, name);
    };

    return map;
  }, {});

  return T(is);
};

module.exports = Validator;
},{"mtype":191,"tv4":211}],188:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":187,"dup":3}],189:[function(require,module,exports){
'use strict';

var jsonPredicates = require('./json-predicates');

var mtype = function mtype(typePredicates) {
  typePredicates = typePredicates || jsonPredicates;

  var keys = Object.keys(typePredicates);

  var is = function is(subject, typename) {
    return typePredicates[typename] && typePredicates[typename](subject);
  };

  var isOnly = function isOnly(subject, typename) {
    return is(subject, typename) && allOf(subject).length === 1;
  };

  var some = function some(subject) {
    for (var _len = arguments.length, typenames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      typenames[_key - 1] = arguments[_key];
    }

    return typenames.some(function (typename) {
      return is(subject, typename);
    });
  };

  var every = function every(subject) {
    for (var _len2 = arguments.length, typenames = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      typenames[_key2 - 1] = arguments[_key2];
    }

    return typenames.every(function (typename) {
      return is(subject, typename);
    });
  };

  var of = function of(subject) {
    return keys.find(function (key) {
      return is(subject, key);
    });
  };

  var allOf = function allOf(subject) {
    return keys.filter(function (key) {
      return is(subject, key);
    });
  };

  var types = function types() {
    return keys.slice();
  };

  return { is: is, isOnly: isOnly, some: some, every: every, of: of, allOf: allOf, types: types };
};

module.exports = mtype;
},{"./json-predicates":190}],190:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var jsonPredicates = {
  number: function number(subject) {
    return typeof subject === 'number' && isFinite(subject);
  },
  string: function string(subject) {
    return typeof subject === 'string';
  },
  boolean: function boolean(subject) {
    return typeof subject === 'boolean';
  },
  array: function array(subject) {
    return Array.isArray(subject);
  },
  null: function _null(subject) {
    return subject === null;
  },
  object: function object(subject) {
    return (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) === 'object' && !jsonPredicates.null(subject) && !jsonPredicates.array(subject);
  }
};

module.exports = jsonPredicates;
},{}],191:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./dist":189,"dup":3}],192:[function(require,module,exports){
module.exports = compile;

var BaseFuncs = require("boolbase"),
    trueFunc  = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}
},{"boolbase":80}],193:[function(require,module,exports){
var parse = require("./parse.js"),
    compile = require("./compile.js");

module.exports = function nthCheck(formula){
	return compile(parse(formula));
};

module.exports.parse = parse;
module.exports.compile = compile;
},{"./compile.js":192,"./parse.js":194}],194:[function(require,module,exports){
module.exports = parse;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}

},{}],195:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))

},{"_process":196}],196:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],197:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":198}],198:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":200,"./_stream_writable":202,"core-util-is":86,"inherits":138,"process-nextick-args":195}],199:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":201,"core-util-is":86,"inherits":138}],200:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))

},{"./_stream_duplex":198,"./internal/streams/BufferList":203,"_process":196,"buffer":83,"buffer-shims":82,"core-util-is":86,"events":122,"inherits":138,"isarray":140,"process-nextick-args":195,"string_decoder/":209,"util":81}],201:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":198,"core-util-is":86,"inherits":138}],202:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))

},{"./_stream_duplex":198,"_process":196,"buffer":83,"buffer-shims":82,"core-util-is":86,"events":122,"inherits":138,"process-nextick-args":195,"util-deprecate":212}],203:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};
},{"buffer":83,"buffer-shims":82}],204:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":199}],205:[function(require,module,exports){
(function (process){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,require('_process'))

},{"./lib/_stream_duplex.js":198,"./lib/_stream_passthrough.js":199,"./lib/_stream_readable.js":200,"./lib/_stream_transform.js":201,"./lib/_stream_writable.js":202,"_process":196}],206:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":201}],207:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":202}],208:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":122,"inherits":138,"readable-stream/duplex.js":197,"readable-stream/passthrough.js":204,"readable-stream/readable.js":205,"readable-stream/transform.js":206,"readable-stream/writable.js":207}],209:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":83}],210:[function(require,module,exports){
var si = typeof setImmediate === 'function', tick;
if (si) {
  tick = function (fn) { setImmediate(fn); };
} else {
  tick = function (fn) { setTimeout(fn, 0); };
}

module.exports = tick;
},{}],211:[function(require,module,exports){
/*
Author: Geraint Luff and others
Year: 2013

This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
*/
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof module !== 'undefined' && module.exports){
    // CommonJS. Define export.
    module.exports = factory();
  } else {
    // Browser globals
    global.tv4 = factory();
  }
}(this, function () {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!Object.keys) {
	Object.keys = (function () {
		var hasOwnProperty = Object.prototype.hasOwnProperty,
			hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
			dontEnums = [
				'toString',
				'toLocaleString',
				'valueOf',
				'hasOwnProperty',
				'isPrototypeOf',
				'propertyIsEnumerable',
				'constructor'
			],
			dontEnumsLength = dontEnums.length;

		return function (obj) {
			if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
				throw new TypeError('Object.keys called on non-object');
			}

			var result = [];

			for (var prop in obj) {
				if (hasOwnProperty.call(obj, prop)) {
					result.push(prop);
				}
			}

			if (hasDontEnumBug) {
				for (var i=0; i < dontEnumsLength; i++) {
					if (hasOwnProperty.call(obj, dontEnums[i])) {
						result.push(dontEnums[i]);
					}
				}
			}
			return result;
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!Object.create) {
	Object.create = (function(){
		function F(){}

		return function(o){
			if (arguments.length !== 1) {
				throw new Error('Object.create implementation only accepts one parameter.');
			}
			F.prototype = o;
			return new F();
		};
	})();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if(!Array.isArray) {
	Array.isArray = function (vArg) {
		return Object.prototype.toString.call(vArg) === "[object Array]";
	};
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
		if (this === null) {
			throw new TypeError();
		}
		var t = Object(this);
		var len = t.length >>> 0;

		if (len === 0) {
			return -1;
		}
		var n = 0;
		if (arguments.length > 1) {
			n = Number(arguments[1]);
			if (n !== n) { // shortcut for verifying if it's NaN
				n = 0;
			} else if (n !== 0 && n !== Infinity && n !== -Infinity) {
				n = (n > 0 || -1) * Math.floor(Math.abs(n));
			}
		}
		if (n >= len) {
			return -1;
		}
		var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
		for (; k < len; k++) {
			if (k in t && t[k] === searchElement) {
				return k;
			}
		}
		return -1;
	};
}

// Grungey Object.isFrozen hack
if (!Object.isFrozen) {
	Object.isFrozen = function (obj) {
		var key = "tv4_test_frozen_key";
		while (obj.hasOwnProperty(key)) {
			key += Math.random();
		}
		try {
			obj[key] = true;
			delete obj[key];
			return false;
		} catch (e) {
			return true;
		}
	};
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
	"+": true,
	"#": true,
	".": true,
	"/": true,
	";": true,
	"?": true,
	"&": true
};
var uriTemplateSuffices = {
	"*": true
};

function notReallyPercentEncode(string) {
	return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
		return "%" + doubleEncoded.substring(3);
	});
}

function uriTemplateSubstitution(spec) {
	var modifier = "";
	if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
		modifier = spec.charAt(0);
		spec = spec.substring(1);
	}
	var separator = "";
	var prefix = "";
	var shouldEscape = true;
	var showVariables = false;
	var trimEmptyString = false;
	if (modifier === '+') {
		shouldEscape = false;
	} else if (modifier === ".") {
		prefix = ".";
		separator = ".";
	} else if (modifier === "/") {
		prefix = "/";
		separator = "/";
	} else if (modifier === '#') {
		prefix = "#";
		shouldEscape = false;
	} else if (modifier === ';') {
		prefix = ";";
		separator = ";";
		showVariables = true;
		trimEmptyString = true;
	} else if (modifier === '?') {
		prefix = "?";
		separator = "&";
		showVariables = true;
	} else if (modifier === '&') {
		prefix = "&";
		separator = "&";
		showVariables = true;
	}

	var varNames = [];
	var varList = spec.split(",");
	var varSpecs = [];
	var varSpecMap = {};
	for (var i = 0; i < varList.length; i++) {
		var varName = varList[i];
		var truncate = null;
		if (varName.indexOf(":") !== -1) {
			var parts = varName.split(":");
			varName = parts[0];
			truncate = parseInt(parts[1], 10);
		}
		var suffices = {};
		while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
			suffices[varName.charAt(varName.length - 1)] = true;
			varName = varName.substring(0, varName.length - 1);
		}
		var varSpec = {
			truncate: truncate,
			name: varName,
			suffices: suffices
		};
		varSpecs.push(varSpec);
		varSpecMap[varName] = varSpec;
		varNames.push(varName);
	}
	var subFunction = function (valueFunction) {
		var result = "";
		var startIndex = 0;
		for (var i = 0; i < varSpecs.length; i++) {
			var varSpec = varSpecs[i];
			var value = valueFunction(varSpec.name);
			if (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === 'object' && Object.keys(value).length === 0)) {
				startIndex++;
				continue;
			}
			if (i === startIndex) {
				result += prefix;
			} else {
				result += (separator || ",");
			}
			if (Array.isArray(value)) {
				if (showVariables) {
					result += varSpec.name + "=";
				}
				for (var j = 0; j < value.length; j++) {
					if (j > 0) {
						result += varSpec.suffices['*'] ? (separator || ",") : ",";
						if (varSpec.suffices['*'] && showVariables) {
							result += varSpec.name + "=";
						}
					}
					result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
				}
			} else if (typeof value === "object") {
				if (showVariables && !varSpec.suffices['*']) {
					result += varSpec.name + "=";
				}
				var first = true;
				for (var key in value) {
					if (!first) {
						result += varSpec.suffices['*'] ? (separator || ",") : ",";
					}
					first = false;
					result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
					result += varSpec.suffices['*'] ? '=' : ",";
					result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
				}
			} else {
				if (showVariables) {
					result += varSpec.name;
					if (!trimEmptyString || value !== "") {
						result += "=";
					}
				}
				if (varSpec.truncate != null) {
					value = value.substring(0, varSpec.truncate);
				}
				result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21"): notReallyPercentEncode(value);
			}
		}
		return result;
	};
	subFunction.varNames = varNames;
	return {
		prefix: prefix,
		substitution: subFunction
	};
}

function UriTemplate(template) {
	if (!(this instanceof UriTemplate)) {
		return new UriTemplate(template);
	}
	var parts = template.split("{");
	var textParts = [parts.shift()];
	var prefixes = [];
	var substitutions = [];
	var varNames = [];
	while (parts.length > 0) {
		var part = parts.shift();
		var spec = part.split("}")[0];
		var remainder = part.substring(spec.length + 1);
		var funcs = uriTemplateSubstitution(spec);
		substitutions.push(funcs.substitution);
		prefixes.push(funcs.prefix);
		textParts.push(remainder);
		varNames = varNames.concat(funcs.substitution.varNames);
	}
	this.fill = function (valueFunction) {
		var result = textParts[0];
		for (var i = 0; i < substitutions.length; i++) {
			var substitution = substitutions[i];
			result += substitution(valueFunction);
			result += textParts[i + 1];
		}
		return result;
	};
	this.varNames = varNames;
	this.template = template;
}
UriTemplate.prototype = {
	toString: function () {
		return this.template;
	},
	fillFromObject: function (obj) {
		return this.fill(function (varName) {
			return obj[varName];
		});
	}
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
	this.missing = [];
	this.missingMap = {};
	this.formatValidators = parent ? Object.create(parent.formatValidators) : {};
	this.schemas = parent ? Object.create(parent.schemas) : {};
	this.collectMultiple = collectMultiple;
	this.errors = [];
	this.handleError = collectMultiple ? this.collectError : this.returnError;
	if (checkRecursive) {
		this.checkRecursive = true;
		this.scanned = [];
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
		this.scannedFrozenValidationErrors = [];
		this.validatedSchemasKey = 'tv4_validation_id';
		this.validationErrorsKey = 'tv4_validation_errors_id';
	}
	if (trackUnknownProperties) {
		this.trackUnknownProperties = true;
		this.knownPropertyPaths = {};
		this.unknownPropertyPaths = {};
	}
	this.errorReporter = errorReporter || defaultErrorReporter('en');
	if (typeof this.errorReporter === 'string') {
		throw new Error('debug');
	}
	this.definedKeywords = {};
	if (parent) {
		for (var key in parent.definedKeywords) {
			this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
		}
	}
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
	this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
	this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
	var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
	error.message = this.errorReporter(error, data, schema);
	return error;
};
ValidatorContext.prototype.returnError = function (error) {
	return error;
};
ValidatorContext.prototype.collectError = function (error) {
	if (error) {
		this.errors.push(error);
	}
	return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
	for (var i = startIndex; i < this.errors.length; i++) {
		this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
	}
	return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
	for (var unknownPath in this.unknownPropertyPaths) {
		var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, "", null, data, schema);
		var result = this.handleError(error);
		if (result) {
			return result;
		}
	}
	return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
	if (typeof format === 'object') {
		for (var key in format) {
			this.addFormat(key, format[key]);
		}
		return this;
	}
	this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
	if (schema['$ref'] !== undefined) {
		urlHistory = urlHistory || {};
		if (urlHistory[schema['$ref']]) {
			return this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '', null, undefined, schema);
		}
		urlHistory[schema['$ref']] = true;
		schema = this.getSchema(schema['$ref'], urlHistory);
	}
	return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
	var schema;
	if (this.schemas[url] !== undefined) {
		schema = this.schemas[url];
		return this.resolveRefs(schema, urlHistory);
	}
	var baseUrl = url;
	var fragment = "";
	if (url.indexOf('#') !== -1) {
		fragment = url.substring(url.indexOf("#") + 1);
		baseUrl = url.substring(0, url.indexOf("#"));
	}
	if (typeof this.schemas[baseUrl] === 'object') {
		schema = this.schemas[baseUrl];
		var pointerPath = decodeURIComponent(fragment);
		if (pointerPath === "") {
			return this.resolveRefs(schema, urlHistory);
		} else if (pointerPath.charAt(0) !== "/") {
			return undefined;
		}
		var parts = pointerPath.split("/").slice(1);
		for (var i = 0; i < parts.length; i++) {
			var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
			if (schema[component] === undefined) {
				schema = undefined;
				break;
			}
			schema = schema[component];
		}
		if (schema !== undefined) {
			return this.resolveRefs(schema, urlHistory);
		}
	}
	if (this.missing[baseUrl] === undefined) {
		this.missing.push(baseUrl);
		this.missing[baseUrl] = baseUrl;
		this.missingMap[baseUrl] = baseUrl;
	}
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
	if (Array.isArray(schema)) {
		for (var i = 0; i < schema.length; i++) {
			this.searchSchemas(schema[i], url);
		}
	} else if (schema && typeof schema === "object") {
		if (typeof schema.id === "string") {
			if (isTrustedUrl(url, schema.id)) {
				if (this.schemas[schema.id] === undefined) {
					this.schemas[schema.id] = schema;
				}
			}
		}
		for (var key in schema) {
			if (key !== "enum") {
				if (typeof schema[key] === "object") {
					this.searchSchemas(schema[key], url);
				} else if (key === "$ref") {
					var uri = getDocumentUri(schema[key]);
					if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
						this.missingMap[uri] = uri;
					}
				}
			}
		}
	}
};
ValidatorContext.prototype.addSchema = function (url, schema) {
	//overload
	if (typeof url !== 'string' || typeof schema === 'undefined') {
		if (typeof url === 'object' && typeof url.id === 'string') {
			schema = url;
			url = schema.id;
		}
		else {
			return;
		}
	}
	if (url === getDocumentUri(url) + "#") {
		// Remove empty fragment
		url = getDocumentUri(url);
	}
	this.schemas[url] = schema;
	delete this.missingMap[url];
	normSchema(schema, url);
	this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
	var map = {};
	for (var key in this.schemas) {
		map[key] = this.schemas[key];
	}
	return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
	var list = [];
	for (var key in this.schemas) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
	var list = [];
	for (var key in this.missingMap) {
		if (!filterRegExp || filterRegExp.test(key)) {
			list.push(key);
		}
	}
	return list;
};

ValidatorContext.prototype.dropSchemas = function () {
	this.schemas = {};
	this.reset();
};
ValidatorContext.prototype.reset = function () {
	this.missing = [];
	this.missingMap = {};
	this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
	var topLevel;
	schema = this.resolveRefs(schema);
	if (!schema) {
		return null;
	} else if (schema instanceof ValidationError) {
		this.errors.push(schema);
		return schema;
	}

	var startErrorCount = this.errors.length;
	var frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;
	if (this.checkRecursive && data && typeof data === 'object') {
		topLevel = !this.scanned.length;
		if (data[this.validatedSchemasKey]) {
			var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
			if (schemaIndex !== -1) {
				this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
				return null;
			}
		}
		if (Object.isFrozen(data)) {
			frozenIndex = this.scannedFrozen.indexOf(data);
			if (frozenIndex !== -1) {
				var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
				if (frozenSchemaIndex !== -1) {
					this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
					return null;
				}
			}
		}
		this.scanned.push(data);
		if (Object.isFrozen(data)) {
			if (frozenIndex === -1) {
				frozenIndex = this.scannedFrozen.length;
				this.scannedFrozen.push(data);
				this.scannedFrozenSchemas.push([]);
			}
			scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
			this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
			this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
		} else {
			if (!data[this.validatedSchemasKey]) {
				try {
					Object.defineProperty(data, this.validatedSchemasKey, {
						value: [],
						configurable: true
					});
					Object.defineProperty(data, this.validationErrorsKey, {
						value: [],
						configurable: true
					});
				} catch (e) {
					//IE 7/8 workaround
					data[this.validatedSchemasKey] = [];
					data[this.validationErrorsKey] = [];
				}
			}
			scannedSchemasIndex = data[this.validatedSchemasKey].length;
			data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
			data[this.validationErrorsKey][scannedSchemasIndex] = [];
		}
	}

	var errorCount = this.errors.length;
	var error = this.validateBasic(data, schema, dataPointerPath)
		|| this.validateNumeric(data, schema, dataPointerPath)
		|| this.validateString(data, schema, dataPointerPath)
		|| this.validateArray(data, schema, dataPointerPath)
		|| this.validateObject(data, schema, dataPointerPath)
		|| this.validateCombinations(data, schema, dataPointerPath)
		|| this.validateHypermedia(data, schema, dataPointerPath)
		|| this.validateFormat(data, schema, dataPointerPath)
		|| this.validateDefinedKeywords(data, schema, dataPointerPath)
		|| null;

	if (topLevel) {
		while (this.scanned.length) {
			var item = this.scanned.pop();
			delete item[this.validatedSchemasKey];
		}
		this.scannedFrozen = [];
		this.scannedFrozenSchemas = [];
	}

	if (error || errorCount !== this.errors.length) {
		while ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {
			var dataPart = (dataPathParts && dataPathParts.length) ? "" + dataPathParts.pop() : null;
			var schemaPart = (schemaPathParts && schemaPathParts.length) ? "" + schemaPathParts.pop() : null;
			if (error) {
				error = error.prefixWith(dataPart, schemaPart);
			}
			this.prefixErrors(errorCount, dataPart, schemaPart);
		}
	}

	if (scannedFrozenSchemaIndex !== null) {
		this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
	} else if (scannedSchemasIndex !== null) {
		data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
	}

	return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
	if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
		return null;
	}
	var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
	if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}, '', '/format', null, data, schema);
	} else if (errorMessage && typeof errorMessage === 'object') {
		return this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || "?"}, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
	}
	return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
	for (var key in this.definedKeywords) {
		if (typeof schema[key] === 'undefined') {
			continue;
		}
		var validationFunctions = this.definedKeywords[key];
		for (var i = 0; i < validationFunctions.length; i++) {
			var func = validationFunctions[i];
			var result = func(data, schema[key], schema, dataPointerPath);
			if (typeof result === 'string' || typeof result === 'number') {
				return this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}, '', '', null, data, schema).prefixWith(null, key);
			} else if (result && typeof result === 'object') {
				var code = result.code;
				if (typeof code === 'string') {
					if (!ErrorCodes[code]) {
						throw new Error('Undefined error code (use defineError): ' + code);
					}
					code = ErrorCodes[code];
				} else if (typeof code !== 'number') {
					code = ErrorCodes.KEYWORD_CUSTOM;
				}
				var messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || "?"};
				var schemaPath = result.schemaPath || ("/" + key.replace(/~/g, '~0').replace(/\//g, '~1'));
				return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
			}
		}
	}
	return null;
};

function recursiveCompare(A, B) {
	if (A === B) {
		return true;
	}
	if (A && B && typeof A === "object" && typeof B === "object") {
		if (Array.isArray(A) !== Array.isArray(B)) {
			return false;
		} else if (Array.isArray(A)) {
			if (A.length !== B.length) {
				return false;
			}
			for (var i = 0; i < A.length; i++) {
				if (!recursiveCompare(A[i], B[i])) {
					return false;
				}
			}
		} else {
			var key;
			for (key in A) {
				if (B[key] === undefined && A[key] !== undefined) {
					return false;
				}
			}
			for (key in B) {
				if (A[key] === undefined && B[key] !== undefined) {
					return false;
				}
			}
			for (key in A) {
				if (!recursiveCompare(A[key], B[key])) {
					return false;
				}
			}
		}
		return true;
	}
	return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
	var error;
	if (error = this.validateType(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	if (error = this.validateEnum(data, schema, dataPointerPath)) {
		return error.prefixWith(null, "type");
	}
	return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
	if (schema.type === undefined) {
		return null;
	}
	var dataType = typeof data;
	if (data === null) {
		dataType = "null";
	} else if (Array.isArray(data)) {
		dataType = "array";
	}
	var allowedTypes = schema.type;
	if (!Array.isArray(allowedTypes)) {
		allowedTypes = [allowedTypes];
	}

	for (var i = 0; i < allowedTypes.length; i++) {
		var type = allowedTypes[i];
		if (type === dataType || (type === "integer" && dataType === "number" && (data % 1 === 0))) {
			return null;
		}
	}
	return this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join("/")}, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
	if (schema["enum"] === undefined) {
		return null;
	}
	for (var i = 0; i < schema["enum"].length; i++) {
		var enumVal = schema["enum"][i];
		if (recursiveCompare(data, enumVal)) {
			return null;
		}
	}
	return this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data}, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
	return this.validateMultipleOf(data, schema, dataPointerPath)
		|| this.validateMinMax(data, schema, dataPointerPath)
		|| this.validateNaN(data, schema, dataPointerPath)
		|| null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
	var multipleOf = schema.multipleOf || schema.divisibleBy;
	if (multipleOf === undefined) {
		return null;
	}
	if (typeof data === "number") {
		var remainder = (data/multipleOf)%1;
		if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
			return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf}, '', '', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
	if (typeof data !== "number") {
		return null;
	}
	if (schema.minimum !== undefined) {
		if (data < schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}, '', '/minimum', null, data, schema);
		}
		if (schema.exclusiveMinimum && data === schema.minimum) {
			return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}, '', '/exclusiveMinimum', null, data, schema);
		}
	}
	if (schema.maximum !== undefined) {
		if (data > schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}, '', '/maximum', null, data, schema);
		}
		if (schema.exclusiveMaximum && data === schema.maximum) {
			return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}, '', '/exclusiveMaximum', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
	if (typeof data !== "number") {
		return null;
	}
	if (isNaN(data) === true || data === Infinity || data === -Infinity) {
		return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, {value: data}, '', '/type', null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
	return this.validateStringLength(data, schema, dataPointerPath)
		|| this.validateStringPattern(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
	if (typeof data !== "string") {
		return null;
	}
	if (schema.minLength !== undefined) {
		if (data.length < schema.minLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}, '', '/minLength', null, data, schema);
		}
	}
	if (schema.maxLength !== undefined) {
		if (data.length > schema.maxLength) {
			return this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}, '', '/maxLength', null, data, schema);
		}
	}
	return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
	if (typeof data !== "string" || (typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp))) {
		return null;
	}
	var regexp;
	if (schema.pattern instanceof RegExp) {
	  regexp = schema.pattern;
	}
	else {
	  var body, flags = '';
	  // Check for regular expression literals
	  // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
	  var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
	  if (literal) {
	    body = literal[1];
	    flags = literal[2];
	  }
	  else {
	    body = schema.pattern;
	  }
	  regexp = new RegExp(body, flags);
	}
	if (!regexp.test(data)) {
		return this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}, '', '/pattern', null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
	if (!Array.isArray(data)) {
		return null;
	}
	return this.validateArrayLength(data, schema, dataPointerPath)
		|| this.validateArrayUniqueItems(data, schema, dataPointerPath)
		|| this.validateArrayItems(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
	var error;
	if (schema.minItems !== undefined) {
		if (data.length < schema.minItems) {
			error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems}, '', '/minItems', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxItems !== undefined) {
		if (data.length > schema.maxItems) {
			error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems}, '', '/maxItems', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
	if (schema.uniqueItems) {
		for (var i = 0; i < data.length; i++) {
			for (var j = i + 1; j < data.length; j++) {
				if (recursiveCompare(data[i], data[j])) {
					var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j}, '', '/uniqueItems', null, data, schema);
					if (this.handleError(error)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
	if (schema.items === undefined) {
		return null;
	}
	var error, i;
	if (Array.isArray(schema.items)) {
		for (i = 0; i < data.length; i++) {
			if (i < schema.items.length) {
				if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
					return error;
				}
			} else if (schema.additionalItems !== undefined) {
				if (typeof schema.additionalItems === "boolean") {
					if (!schema.additionalItems) {
						error = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema));
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
					return error;
				}
			}
		}
	} else {
		for (i = 0; i < data.length; i++) {
			if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
	if (typeof data !== "object" || data === null || Array.isArray(data)) {
		return null;
	}
	return this.validateObjectMinMaxProperties(data, schema, dataPointerPath)
		|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)
		|| this.validateObjectProperties(data, schema, dataPointerPath)
		|| this.validateObjectDependencies(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
	var keys = Object.keys(data);
	var error;
	if (schema.minProperties !== undefined) {
		if (keys.length < schema.minProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}, '', '/minProperties', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	if (schema.maxProperties !== undefined) {
		if (keys.length > schema.maxProperties) {
			error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}, '', '/maxProperties', null, data, schema);
			if (this.handleError(error)) {
				return error;
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
	if (schema.required !== undefined) {
		for (var i = 0; i < schema.required.length; i++) {
			var key = schema.required[i];
			if (data[key] === undefined) {
				var error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}, '', '/required/' + i, null, data, schema);
				if (this.handleError(error)) {
					return error;
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
	var error;
	for (var key in data) {
		var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
		var foundMatch = false;
		if (schema.properties !== undefined && schema.properties[key] !== undefined) {
			foundMatch = true;
			if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
				return error;
			}
		}
		if (schema.patternProperties !== undefined) {
			for (var patternKey in schema.patternProperties) {
				var regexp = new RegExp(patternKey);
				if (regexp.test(key)) {
					foundMatch = true;
					if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
						return error;
					}
				}
			}
		}
		if (!foundMatch) {
			if (schema.additionalProperties !== undefined) {
				if (this.trackUnknownProperties) {
					this.knownPropertyPaths[keyPointerPath] = true;
					delete this.unknownPropertyPaths[keyPointerPath];
				}
				if (typeof schema.additionalProperties === "boolean") {
					if (!schema.additionalProperties) {
						error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {key: key}, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
						if (this.handleError(error)) {
							return error;
						}
					}
				} else {
					if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
						return error;
					}
				}
			} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
				this.unknownPropertyPaths[keyPointerPath] = true;
			}
		} else if (this.trackUnknownProperties) {
			this.knownPropertyPaths[keyPointerPath] = true;
			delete this.unknownPropertyPaths[keyPointerPath];
		}
	}
	return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
	var error;
	if (schema.dependencies !== undefined) {
		for (var depKey in schema.dependencies) {
			if (data[depKey] !== undefined) {
				var dep = schema.dependencies[depKey];
				if (typeof dep === "string") {
					if (data[dep] === undefined) {
						error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
						if (this.handleError(error)) {
							return error;
						}
					}
				} else if (Array.isArray(dep)) {
					for (var i = 0; i < dep.length; i++) {
						var requiredKey = dep[i];
						if (data[requiredKey] === undefined) {
							error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
							if (this.handleError(error)) {
								return error;
							}
						}
					}
				} else {
					if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
						return error;
					}
				}
			}
		}
	}
	return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
	return this.validateAllOf(data, schema, dataPointerPath)
		|| this.validateAnyOf(data, schema, dataPointerPath)
		|| this.validateOneOf(data, schema, dataPointerPath)
		|| this.validateNot(data, schema, dataPointerPath)
		|| null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
	if (schema.allOf === undefined) {
		return null;
	}
	var error;
	for (var i = 0; i < schema.allOf.length; i++) {
		var subSchema = schema.allOf[i];
		if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
			return error;
		}
	}
	return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
	if (schema.anyOf === undefined) {
		return null;
	}
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	var errorAtEnd = true;
	for (var i = 0; i < schema.anyOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.anyOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			this.errors = this.errors.slice(0, startErrorCount);

			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
				// We need to continue looping so we catch all the property definitions, but we don't want to return an error
				errorAtEnd = false;
				continue;
			}

			return null;
		}
		if (error) {
			errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (errorAtEnd) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
	}
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
	if (schema.oneOf === undefined) {
		return null;
	}
	var validIndex = null;
	var errors = [];
	var startErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
	}
	for (var i = 0; i < schema.oneOf.length; i++) {
		if (this.trackUnknownProperties) {
			this.unknownPropertyPaths = {};
			this.knownPropertyPaths = {};
		}
		var subSchema = schema.oneOf[i];

		var errorCount = this.errors.length;
		var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

		if (error === null && errorCount === this.errors.length) {
			if (validIndex === null) {
				validIndex = i;
			} else {
				this.errors = this.errors.slice(0, startErrorCount);
				return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, "", "/oneOf", null, data, schema);
			}
			if (this.trackUnknownProperties) {
				for (var knownKey in this.knownPropertyPaths) {
					oldKnownPropertyPaths[knownKey] = true;
					delete oldUnknownPropertyPaths[knownKey];
				}
				for (var unknownKey in this.unknownPropertyPaths) {
					if (!oldKnownPropertyPaths[unknownKey]) {
						oldUnknownPropertyPaths[unknownKey] = true;
					}
				}
			}
		} else if (error) {
			errors.push(error);
		}
	}
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (validIndex === null) {
		errors = errors.concat(this.errors.slice(startErrorCount));
		this.errors = this.errors.slice(0, startErrorCount);
		return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
	} else {
		this.errors = this.errors.slice(0, startErrorCount);
	}
	return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
	if (schema.not === undefined) {
		return null;
	}
	var oldErrorCount = this.errors.length;
	var oldUnknownPropertyPaths, oldKnownPropertyPaths;
	if (this.trackUnknownProperties) {
		oldUnknownPropertyPaths = this.unknownPropertyPaths;
		oldKnownPropertyPaths = this.knownPropertyPaths;
		this.unknownPropertyPaths = {};
		this.knownPropertyPaths = {};
	}
	var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
	var notErrors = this.errors.slice(oldErrorCount);
	this.errors = this.errors.slice(0, oldErrorCount);
	if (this.trackUnknownProperties) {
		this.unknownPropertyPaths = oldUnknownPropertyPaths;
		this.knownPropertyPaths = oldKnownPropertyPaths;
	}
	if (error === null && notErrors.length === 0) {
		return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
	}
	return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
	if (!schema.links) {
		return null;
	}
	var error;
	for (var i = 0; i < schema.links.length; i++) {
		var ldo = schema.links[i];
		if (ldo.rel === "describedby") {
			var template = new UriTemplate(ldo.href);
			var allPresent = true;
			for (var j = 0; j < template.varNames.length; j++) {
				if (!(template.varNames[j] in data)) {
					allPresent = false;
					break;
				}
			}
			if (allPresent) {
				var schemaUrl = template.fillFromObject(data);
				var subSchema = {"$ref": schemaUrl};
				if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
					return error;
				}
			}
		}
	}
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
	var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
	// authority = '//' + user + ':' + pass '@' + hostname + ':' port
	return (m ? {
		href     : m[0] || '',
		protocol : m[1] || '',
		authority: m[2] || '',
		host     : m[3] || '',
		hostname : m[4] || '',
		port     : m[5] || '',
		pathname : m[6] || '',
		search   : m[7] || '',
		hash     : m[8] || ''
	} : null);
}

function resolveUrl(base, href) {// RFC 3986

	function removeDotSegments(input) {
		var output = [];
		input.replace(/^(\.\.?(\/|$))+/, '')
			.replace(/\/(\.(\/|$))+/g, '/')
			.replace(/\/\.\.$/, '/../')
			.replace(/\/?[^\/]*/g, function (p) {
				if (p === '/..') {
					output.pop();
				} else {
					output.push(p);
				}
		});
		return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
	}

	href = parseURI(href || '');
	base = parseURI(base || '');

	return !href || !base ? null : (href.protocol || base.protocol) +
		(href.protocol || href.authority ? href.authority : base.authority) +
		removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +
		(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +
		href.hash;
}

function getDocumentUri(uri) {
	return uri.split('#')[0];
}
function normSchema(schema, baseUri) {
	if (schema && typeof schema === "object") {
		if (baseUri === undefined) {
			baseUri = schema.id;
		} else if (typeof schema.id === "string") {
			baseUri = resolveUrl(baseUri, schema.id);
			schema.id = baseUri;
		}
		if (Array.isArray(schema)) {
			for (var i = 0; i < schema.length; i++) {
				normSchema(schema[i], baseUri);
			}
		} else {
			if (typeof schema['$ref'] === "string") {
				schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
			}
			for (var key in schema) {
				if (key !== "enum") {
					normSchema(schema[key], baseUri);
				}
			}
		}
	}
}

function defaultErrorReporter(language) {
	language = language || 'en';

	var errorMessages = languages[language];

	return function (error) {
		var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
		if (typeof messageTemplate !== 'string') {
			return "Unknown error code " + error.code + ": " + JSON.stringify(error.messageParams);
		}
		var messageParams = error.params;
		// Adapted from Crockford's supplant()
		return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
			var subValue = messageParams[varName];
			return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
		});
	};
}

var ErrorCodes = {
	INVALID_TYPE: 0,
	ENUM_MISMATCH: 1,
	ANY_OF_MISSING: 10,
	ONE_OF_MISSING: 11,
	ONE_OF_MULTIPLE: 12,
	NOT_PASSED: 13,
	// Numeric errors
	NUMBER_MULTIPLE_OF: 100,
	NUMBER_MINIMUM: 101,
	NUMBER_MINIMUM_EXCLUSIVE: 102,
	NUMBER_MAXIMUM: 103,
	NUMBER_MAXIMUM_EXCLUSIVE: 104,
	NUMBER_NOT_A_NUMBER: 105,
	// String errors
	STRING_LENGTH_SHORT: 200,
	STRING_LENGTH_LONG: 201,
	STRING_PATTERN: 202,
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: 300,
	OBJECT_PROPERTIES_MAXIMUM: 301,
	OBJECT_REQUIRED: 302,
	OBJECT_ADDITIONAL_PROPERTIES: 303,
	OBJECT_DEPENDENCY_KEY: 304,
	// Array errors
	ARRAY_LENGTH_SHORT: 400,
	ARRAY_LENGTH_LONG: 401,
	ARRAY_UNIQUE: 402,
	ARRAY_ADDITIONAL_ITEMS: 403,
	// Custom/user-defined errors
	FORMAT_CUSTOM: 500,
	KEYWORD_CUSTOM: 501,
	// Schema structure
	CIRCULAR_REFERENCE: 600,
	// Non-standard validation options
	UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
	ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
	INVALID_TYPE: "Invalid type: {type} (expected {expected})",
	ENUM_MISMATCH: "No enum match for: {value}",
	ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
	ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
	ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
	NOT_PASSED: "Data matches schema from \"not\"",
	// Numeric errors
	NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
	NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
	NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
	NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
	NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
	NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
	// String errors
	STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
	STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
	STRING_PATTERN: "String does not match pattern: {pattern}",
	// Object errors
	OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
	OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
	OBJECT_REQUIRED: "Missing required property: {key}",
	OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
	OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
	// Array errors
	ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
	ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
	ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
	ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
	// Format errors
	FORMAT_CUSTOM: "Format validation failed ({message})",
	KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
	// Schema structure
	CIRCULAR_REFERENCE: "Circular $refs: {urls}",
	// Non-standard validation options
	UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
	Error.call(this);
	if (code === undefined) {
		throw new Error ("No error code supplied: " + schemaPath);
	}
	this.message = '';
	this.params = params;
	this.code = code;
	this.dataPath = dataPath || "";
	this.schemaPath = schemaPath || "";
	this.subErrors = subErrors || null;

	var err = new Error(this.message);
	this.stack = err.stack || err.stacktrace;
	if (!this.stack) {
		try {
			throw err;
		}
		catch(err) {
			this.stack = err.stack || err.stacktrace;
		}
	}
}
ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
	if (dataPrefix !== null) {
		dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.dataPath = "/" + dataPrefix + this.dataPath;
	}
	if (schemaPrefix !== null) {
		schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
		this.schemaPath = "/" + schemaPrefix + this.schemaPath;
	}
	if (this.subErrors !== null) {
		for (var i = 0; i < this.subErrors.length; i++) {
			this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
		}
	}
	return this;
};

function isTrustedUrl(baseUrl, testUrl) {
	if(testUrl.substring(0, baseUrl.length) === baseUrl){
		var remainder = testUrl.substring(baseUrl.length);
		if ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/")
			|| remainder.charAt(0) === "#"
			|| remainder.charAt(0) === "?") {
			return true;
		}
	}
	return false;
}

var languages = {};
function createApi(language) {
	var globalContext = new ValidatorContext();
	var currentLanguage;
	var customErrorReporter;
	var api = {
		setErrorReporter: function (reporter) {
			if (typeof reporter === 'string') {
				return this.language(reporter);
			}
			customErrorReporter = reporter;
			return true;
		},
		addFormat: function () {
			globalContext.addFormat.apply(globalContext, arguments);
		},
		language: function (code) {
			if (!code) {
				return currentLanguage;
			}
			if (!languages[code]) {
				code = code.split('-')[0]; // fall back to base language
			}
			if (languages[code]) {
				currentLanguage = code;
				return code; // so you can tell if fall-back has happened
			}
			return false;
		},
		addLanguage: function (code, messageMap) {
			var key;
			for (key in ErrorCodes) {
				if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
					messageMap[ErrorCodes[key]] = messageMap[key];
				}
			}
			var rootCode = code.split('-')[0];
			if (!languages[rootCode]) { // use for base language if not yet defined
				languages[code] = messageMap;
				languages[rootCode] = messageMap;
			} else {
				languages[code] = Object.create(languages[rootCode]);
				for (key in messageMap) {
					if (typeof languages[rootCode][key] === 'undefined') {
						languages[rootCode][key] = messageMap[key];
					}
					languages[code][key] = messageMap[key];
				}
			}
			return this;
		},
		freshApi: function (language) {
			var result = createApi();
			if (language) {
				result.language(language);
			}
			return result;
		},
		validate: function (data, schema, checkRecursive, banUnknownProperties) {
			var def = defaultErrorReporter(currentLanguage);
			var errorReporter = customErrorReporter ? function (error, data, schema) {
				return customErrorReporter(error, data, schema) || def(error, data, schema);
			} : def;
			var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			var error = context.validateAll(data, schema, null, null, "");
			if (!error && banUnknownProperties) {
				error = context.banUnknownProperties(data, schema);
			}
			this.error = error;
			this.missing = context.missing;
			this.valid = (error === null);
			return this.valid;
		},
		validateResult: function () {
			var result = {};
			this.validate.apply(result, arguments);
			return result;
		},
		validateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {
			var def = defaultErrorReporter(currentLanguage);
			var errorReporter = customErrorReporter ? function (error, data, schema) {
				return customErrorReporter(error, data, schema) || def(error, data, schema);
			} : def;
			var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
			if (typeof schema === "string") {
				schema = {"$ref": schema};
			}
			context.addSchema("", schema);
			context.validateAll(data, schema, null, null, "");
			if (banUnknownProperties) {
				context.banUnknownProperties(data, schema);
			}
			var result = {};
			result.errors = context.errors;
			result.missing = context.missing;
			result.valid = (result.errors.length === 0);
			return result;
		},
		addSchema: function () {
			return globalContext.addSchema.apply(globalContext, arguments);
		},
		getSchema: function () {
			return globalContext.getSchema.apply(globalContext, arguments);
		},
		getSchemaMap: function () {
			return globalContext.getSchemaMap.apply(globalContext, arguments);
		},
		getSchemaUris: function () {
			return globalContext.getSchemaUris.apply(globalContext, arguments);
		},
		getMissingUris: function () {
			return globalContext.getMissingUris.apply(globalContext, arguments);
		},
		dropSchemas: function () {
			globalContext.dropSchemas.apply(globalContext, arguments);
		},
		defineKeyword: function () {
			globalContext.defineKeyword.apply(globalContext, arguments);
		},
		defineError: function (codeName, codeNumber, defaultMessage) {
			if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
				throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
			}
			if (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {
				throw new Error('Code number must be an integer > 10000');
			}
			if (typeof ErrorCodes[codeName] !== 'undefined') {
				throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
			}
			if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
				throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
			}
			ErrorCodes[codeName] = codeNumber;
			ErrorCodeLookup[codeNumber] = codeName;
			ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
			for (var langCode in languages) {
				var language = languages[langCode];
				if (language[codeName]) {
					language[codeNumber] = language[codeNumber] || language[codeName];
				}
			}
		},
		reset: function () {
			globalContext.reset();
			this.error = null;
			this.missing = [];
			this.valid = true;
		},
		missing: [],
		error: null,
		valid: true,
		normSchema: normSchema,
		resolveUrl: resolveUrl,
		getDocumentUri: getDocumentUri,
		errorCodes: ErrorCodes
	};
	api.language(language || 'en');
	return api;
}

var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;

return tv4; // used by _header.js to globalise.

}));
},{}],212:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],213:[function(require,module,exports){
'use strict';

// setup the drake (dragula instance) for our composer drag drop requirements

var Drake = function Drake(deps) {
  var cloneSelector = '.composer-node__toolbar [data-dragsource="composer"]';
  var containerSelector = '[data-dragsource="composer"]';
  var updateNode = deps.updateNode,
      dragula = deps.dragula,
      find = deps.find,
      ondrop = deps.ondrop;


  var isContainer = function isContainer(el) {
    return el.matches(containerSelector);
  };

  var accepts = function accepts(el, containerEl) {
    var accepts = containerEl.matches(containerSelector);

    if (accepts) {
      accepts = !containerEl.matches(cloneSelector);
    }

    if (accepts) {
      var node = find.elNode(el);
      var parentNode = find.containerElNode(containerEl);

      if (node === parentNode) return false;

      accepts = parentNode.accepts(node);
    }

    return accepts;
  };

  var options = { isContainer: isContainer, accepts: accepts };

  var drake = dragula(options);

  drake.on('drop', function (el, containerEl, sourceContainerEl, nextEl) {
    var node = find.elNode(el);
    var parentNode = find.containerElNode(containerEl);

    if (nextEl) {
      var referenceNode = find.elNode(nextEl);
      parentNode.insertBefore(node, referenceNode);
    } else {
      parentNode.append(node);
    }

    updateNode(node);

    ondrop(node, parentNode, el, containerEl, sourceContainerEl, nextEl);
  });

  return drake;
};

module.exports = Drake;

},{}],214:[function(require,module,exports){
'use strict';

// functions for finding different tree node types in the composer DOM

var Find = function Find(idMap) {
  var nodeEl = function nodeEl(el) {
    return el.querySelector('.composer-node');
  };
  var containerEl = function containerEl(el) {
    return el.closest('.composer-node');
  };
  var elNode = function elNode(el) {
    return idMap.findById(nodeEl(el).id);
  };
  var containerElNode = function containerElNode(el) {
    return idMap.findById(containerEl(el).id);
  };

  return { nodeEl: nodeEl, containerEl: containerEl, elNode: elNode, containerElNode: containerElNode };
};

module.exports = Find;

},{}],215:[function(require,module,exports){
'use strict';

var dragula = require('dragula');
var morphdom = require('morphdom');
var IdMap = require('../idmap');
var enforceType = require('../enforceType');
var queueTasks = require('../queueTasks');
var Drake = require('./drake');
var Find = require('./find');

var defaultOptions = {
  document: typeof window === 'undefined' ? null : window.document,
  dragula: dragula,
  morphdom: morphdom,
  selector: '.composer'
};

/*
  TODO

  * the expand/collapse children actions should be disabled if that action is
    not possible or necessary
  * the tree or options or something should be able to override the actions
    eg not all nodes may have all actions

*/
var Composer = function Composer(_tree, renderNode, options) {
  options = Object.assign({}, defaultOptions, options);

  var _options = options,
      document = _options.document,
      dragula = _options.dragula,
      morphdom = _options.morphdom,
      selector = _options.selector;


  enforceType(document, 'document', 'object');
  enforceType(renderNode, 'renderNode', 'function');
  enforceType(selector, 'selector', 'string');

  var _idMap = IdMap(_tree);
  var find = Find(_idMap);

  var composerView = document.querySelector(selector);

  var initialDom = renderNode(_tree);

  composerView.innerHTML = initialDom.stringify();

  /*
   TODO the functions should take the actual el node, not the clicked node, any
   logic inside the various fns below for finding the el node should be moved
   here
  */
  var clickHandler = {
    '.composer-node__title, .composer-node__action > i': function composerNode__titleComposerNode__actionI(el) {
      return el.parentNode;
    },

    '.composer-node__toolbar': function composerNode__toolbar(el) {
      toggleEl(el);
    },

    '.composer-node__delete': function composerNode__delete(el) {
      var shouldDelete = window.confirm('Are you sure?');

      if (shouldDelete) removeEl(el);
    },

    '.composer-node__collapse-children': function composerNode__collapseChildren(el) {
      collapseElChildren(el);
    },

    '.composer-node__expand-children': function composerNode__expandChildren(el) {
      expandElChildren(el);
    }
  };

  var clickSelectors = Object.keys(clickHandler);

  var handleClick = function handleClick(el) {
    var selector = clickSelectors.find(function (sel) {
      return el.matches(sel);
    });

    if (selector) {
      el = clickHandler[selector](el);
    }

    if (el) handleClick(el);

    return false;
  };

  composerView.addEventListener('click', function (e) {
    return handleClick(e.target);
  });

  var toggleEl = function toggleEl(el) {
    var isNode = el.parentNode.matches('.composer-node');
    var key = isNode ? 'isCollapsed' : 'isChildrenCollapsed';
    var collapsedClass = isNode ? 'composer-node--collapsed' : 'composer-node__children--collapsed';

    el.parentNode.classList.toggle(collapsedClass);

    var node = isNode ? _idMap.findById(el.parentNode.id) : find.containerElNode(el.parentNode);

    var isCollapsed = el.parentNode.matches('.composer-node--collapsed, .composer-node__children--collapsed');

    toggle(node, key, isCollapsed);
    updateNode(node);
  };

  var collapseElChildren = function collapseElChildren(el) {
    var containerElNode = find.containerElNode(el);
    var children = containerElNode.getChildren().slice();

    queueTasks(children, function (node) {
      toggle(node, 'isCollapsed', true);
      updateNode(node);
    });
  };

  var expandElChildren = function expandElChildren(el) {
    var containerElNode = find.containerElNode(el);
    var children = containerElNode.getChildren().slice();

    queueTasks(children, function (node) {
      toggle(node, 'isCollapsed', false);
      updateNode(node);
    });
  };

  var removeEl = function removeEl(el) {
    var nodeEl = el.closest('.composer-node');
    var id = nodeEl.id;
    var node = _idMap.findById(id);
    var parentNode = node.getParent();

    node.remove();
    /*
      It may seem as though by just removing the node, the parentNode will be
      regenerated correctly, however this is not the case sometimes, like when
      the node is the first child of the element. Not sure if problem with
      morphdom or if I've made some mistaken assumption somewhere, but in any
      case also removing the node's element representation from the DOM ensures
      that this works correctly. Not removing the DOM node and calling
      updateNode twice also works - go figure :/
    */
    nodeEl.remove();

    updateNode(parentNode);
  };

  var toggle = function toggle(node, key, isCollapsed) {
    node.meta(key, isCollapsed);
  };

  var updateNode = function updateNode(node) {
    var nodeEl = document.getElementById(node.id());
    var parentNode = node.getParent();

    var depth = 0;
    var parentEl = void 0;

    if (parentNode) {
      parentEl = document.getElementById(parentNode.id());
      depth = parentEl.dataset.depth * 1 + 1;
    }

    var newElDom = renderNode(node, { depth: depth });
    var newElHtml = newElDom.stringify();

    morphdom(nodeEl, newElHtml);
  };

  var _dropHandler = void 0;

  var ondrop = function ondrop() {
    if (_dropHandler) _dropHandler.apply(undefined, arguments);
  };

  var drakeDeps = { dragula: dragula, updateNode: updateNode, find: find, ondrop: ondrop };

  var drake = Drake(drakeDeps);

  var api = {
    remove: function remove() {
      return composerView.innerHTML = '';
    },
    tree: function tree() {
      return _tree;
    },
    idMap: function idMap() {
      return _idMap;
    },
    dropHandler: function dropHandler(handler) {
      if (typeof handler === 'function') _dropHandler = handler;

      return _dropHandler;
    }
  };

  return api;
};

module.exports = Composer;

},{"../enforceType":216,"../idmap":217,"../queueTasks":220,"./drake":213,"./find":214,"dragula":113,"morphdom":179}],216:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var enforceType = function enforceType(obj, name, typeName) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== typeName) throw new Error('A ' + name + ' ' + typeName + ' is required');
};

module.exports = enforceType;

},{}],217:[function(require,module,exports){
'use strict';

/*
  cache that maps between tree nodes and their DOM representations using the id
  attribute
*/

var IdMap = function IdMap(tree) {
  var idMap = new Map();

  var findById = function findById(id) {
    if (idMap.has(id)) return idMap.get(id);

    var node = tree.find(function (n) {
      return n.id() === id;
    });

    if (node === undefined) throw new Error('No node exists in the tree with id ' + id);

    idMap.set(id, node);

    return node;
  };

  var refresh = function refresh(node) {
    node.walk(function (n) {
      return idMap.set(n.id(), n);
    });
  };

  refresh(tree);

  return Object.assign(idMap, { findById: findById, refresh: refresh });
};

module.exports = IdMap;

},{}],218:[function(require,module,exports){
'use strict';

var Composer = require('./composer');
var Toolbar = require('./toolbar');

require('./polyfills');

window.mojule = { Composer: Composer, Toolbar: Toolbar };

/*
TODO this is test code to get the composer up and running, needs to be init'ed
properly as and where needed
*/
var componentDependencies = require('../../dist/dependencies.json');

var getComposerApi = function getComposerApi() {
  //const Tree = require( '1tree' )
  var TreeFactory = require('1tree-factory');

  //in reality this would be implemented by the specific tree type, this is just a
  //hack for testing
  var isEmptyPlugin = function isEmptyPlugin(fn) {
    var isEmpty = function isEmpty(fn, node) {
      var value = fn.value(node);

      return value.nodeType === 'file' || value.nodeType === 'text';
    };

    isEmpty.def = fn.isEmpty.def;

    return Object.assign(fn, { isEmpty: isEmpty });
  };

  var Tree = TreeFactory(isEmptyPlugin);

  var RenderNode = require('../render-composer/renderNode');
  var renderNode = RenderNode(componentDependencies);

  var treeRaw = componentDependencies.datas['data-small'];
  var tree = Tree(treeRaw);

  var modulesNodes = tree.findAll(function (n) {
    return n.value().name === 'node_modules';
  });

  modulesNodes.forEach(function (n) {
    return n.remove();
  });

  return Composer(tree, renderNode);
};

var getToolbarApi = function getToolbarApi() {
  var Tree = require('../trees/toolbar-tree');

  var RenderNode = require('../render-toolbar/renderNode');
  var renderNode = RenderNode(componentDependencies);

  var treeRaw = componentDependencies.datas['toolbar-test'];
  var tree = Tree(treeRaw);

  return Toolbar(tree, renderNode);
};

var composerApi = getComposerApi();
var toolbarApi = getToolbarApi();

},{"../../dist/dependencies.json":1,"../render-composer/renderNode":227,"../render-toolbar/renderNode":230,"../trees/toolbar-tree":232,"./composer":215,"./polyfills":219,"./toolbar":221,"1tree-factory":3}],219:[function(require,module,exports){
(function (process,global){
'use strict';

(function (ElementProto) {
    if (typeof ElementProto.matches !== 'function') {
        ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {
            var element = this;
            var elements = (element.document || element.ownerDocument).querySelectorAll(selector);
            var index = 0;

            while (elements[index] && elements[index] !== element) {
                ++index;
            }

            return Boolean(elements[index]);
        };
    }

    if (typeof ElementProto.closest !== 'function') {
        ElementProto.closest = function closest(selector) {
            var element = this;

            while (element && element.nodeType === 1) {
                if (element.matches(selector)) {
                    return element;
                }

                element = element.parentNode;
            }

            return null;
        };
    }
})(window.Element.prototype);
(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function registerImmediate(handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function registerImmediate(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":196}],220:[function(require,module,exports){
'use strict';

var queueTasks = function queueTasks(items, fn) {
  var modalEl = document.querySelector('.modal');
  var progressContainerEl = document.querySelector('.progress');
  var progressEl = progressContainerEl.querySelector('progress');

  var max = items.length;
  var current = 0;

  modalEl.classList.remove('modal--hidden');
  progressContainerEl.classList.remove('progress--hidden');

  progressEl.setAttribute('max', max);
  progressEl.setAttribute('value', current);

  items = items.slice();

  var next = function next() {
    if (items.length === 0) {
      modalEl.classList.add('modal--hidden');
      progressContainerEl.classList.add('progress--hidden');

      return;
    }

    var item = items.shift();

    fn(item);

    current++;
    progressEl.setAttribute('value', current);
    progressEl.innerHTML = current + ' / ' + max;

    window.setImmediate(next);
  };

  next();
};

module.exports = queueTasks;

},{}],221:[function(require,module,exports){
'use strict';

var morphdom = require('morphdom');
var IdMap = require('../idmap');
var enforceType = require('../enforceType');

var defaultOptions = {
  document: typeof window === 'undefined' ? null : window.document,
  morphdom: morphdom,
  selector: '.toolbar'
};

var Toolbar = function Toolbar(_tree, renderNode, options) {
  options = Object.assign({}, defaultOptions, options);

  var _options = options,
      document = _options.document,
      morphdom = _options.morphdom,
      selector = _options.selector;


  enforceType(document, 'document', 'object');
  enforceType(renderNode, 'renderNode', 'function');
  enforceType(selector, 'selector', 'string');

  var _idMap = IdMap(_tree);
  var view = document.querySelector(selector);
  var dom = renderNode(_tree);

  view.innerHTML = dom.stringify();

  /*
   TODO the functions should take the actual el node, not the clicked node, any
   logic inside the various fns below for finding the el node should be moved
   here
  */
  var clickHandler = {
    '.toolbar-group > header > span': function toolbarGroupHeaderSpan(el) {
      toggleEl(el.parentNode);
    },
    '.toolbar-group > header': function toolbarGroupHeader(el) {
      toggleEl(el);
    }
  };

  var clickSelectors = Object.keys(clickHandler);

  var handleClick = function handleClick(el) {
    var selector = clickSelectors.find(function (sel) {
      return el.matches(sel);
    });

    if (selector) {
      clickHandler[selector](el);
      return false;
    }
  };

  view.addEventListener('click', function (e) {
    return handleClick(e.target);
  });

  var toggleEl = function toggleEl(el) {
    var groupEl = el.closest('.toolbar-group');

    if (!groupEl.matches('.toolbar-group--collapsed')) return;

    var depth = groupEl.dataset.depth;
    var parentGroup = groupEl.parentNode.closest('.toolbar-group');

    var siblings = Array.from(parentGroup.querySelectorAll('.toolbar-group[data-depth="' + depth + '"]')).filter(function (sibling) {
      return sibling !== groupEl;
    });

    siblings.forEach(function (sibling) {
      sibling.classList.add('toolbar-group--collapsed');
    });

    groupEl.classList.remove('toolbar-group--collapsed');
  };

  var api = {
    remove: function remove() {
      return view.innerHTML = '';
    },
    tree: function tree() {
      return _tree;
    },
    idMap: function idMap() {
      return _idMap;
    }
  };

  return api;
};

module.exports = Toolbar;

},{"../enforceType":216,"../idmap":217,"morphdom":179}],222:[function(require,module,exports){
'use strict';

var RenderCss = function RenderCss(dependencies) {
  var styles = dependencies.styles,
      transformCss = dependencies.transformCss;


  var renderCss = function renderCss(root) {
    var css = '';

    var alreadyAdded = new Set();

    root.walk(function (node) {
      var value = node.value();
      var componentName = value.name;

      if (alreadyAdded.has(componentName)) return;

      alreadyAdded.add(componentName);

      var style = styles[componentName];

      if (typeof style === 'string') {
        css += style;
        css += ' ';
      }
    });

    if (typeof transformCss === 'function') css = transformCss(css);

    return css;
  };

  return renderCss;
};

module.exports = RenderCss;

},{}],223:[function(require,module,exports){
'use strict';

var Templates = require('../../templates');
var RenderCss = require('./renderCss');

var RenderNode = function RenderNode(dependencies) {
  var renderCss = RenderCss(dependencies);
  var configs = dependencies.configs;

  var _Templates = Templates(dependencies),
      renderComponent = _Templates.renderComponent;

  var defaultConfig = {
    containerSelector: "[data-container]"
  };

  var addCssToDocumentHead = function addCssToDocumentHead(node) {
    var value = node.value();
    var componentName = value.name;
    var componentModel = value.model;

    var css = renderCss(node);

    if (!Array.isArray(componentModel.headStyles)) componentModel.headStyles = [];

    componentModel.headStyles.push({
      text: css
    });

    node.value(value);
  };

  var renderNode = function renderNode(node) {
    var value = node.value();
    var componentName = value.name;
    var componentModel = value.model;

    if (componentName === 'document') {
      addCssToDocumentHead(node);
    }

    var dom = renderComponent(componentName, componentModel);
    var config = Object.assign({}, defaultConfig, configs[componentName]);
    var childContainer = dom.select(config.containerSelector);
    var children = node.getChildren();

    if (childContainer && children.length) {
      children.forEach(function (childNode) {
        var childDom = renderNode(childNode);

        if (childContainer.nodeName() === 'ul' || childContainer.nodeName() === 'ol') {
          /*
            dom.parse always returns a fragment, because the html string could
            contain multiple elements
              perhaps if we see it only has one element, we should return that
            rather than a documentFragment with a single child, but continue to
            use current behaviour if the fragment has multiple children?
          */
          var liNode = dom.parse('<li></li>').select('li');

          liNode.append(childDom);
          childContainer.append(liNode);

          return;
        }

        childContainer.append(childDom);
      });
    }

    return dom;
  };

  return renderNode;
};

module.exports = RenderNode;

},{"../../templates":231,"./renderCss":222}],224:[function(require,module,exports){
'use strict';

var SchemaTree = require('1tree-schema');
var JsonTree = require('1tree-json');
var transformMapper = require('mojule-transform');
var utils = require('mojule-utils');

var clone = utils.clone;


var mapComponents = function mapComponents(dependencies, componentName, model) {
  model = clone(model);

  var modelTree = JsonTree(model);

  var componentNames = dependencies.componentNames,
      schemas = dependencies.schemas,
      transforms = dependencies.transforms;


  var schemaNames = Object.keys(schemas);

  var findRefComponents = function findRefComponents(schemaNode) {
    return schemaNode.findAll(function (n) {
      return componentNames.includes(n.value().$ref);
    });
  };

  var transform = transforms[componentName];
  var componentSchema = schemas[componentName];

  if (transform && !componentSchema) {
    return transformMapper(model, transform);
  }

  if (!transform && !componentSchema) {
    return model;
  }

  var componentSchemaTree = SchemaTree(componentSchema);
  var refComponents = findRefComponents(componentSchemaTree);

  refComponents.forEach(function (refComponentNode) {
    var value = refComponentNode.value();
    var componentName = value.$ref;
    var componentTransform = transforms[componentName];

    if (!componentTransform) return;

    /*
      Important to remember that schema paths do not necessarily match up to
      model - this will work for now, but need to investigate and consider a
      more robust solution
    */
    var refNodePath = refComponentNode.getParent().getPath();
    var modelNode = modelTree.atPath(refNodePath);

    if (!modelNode) return;

    var modelNodeValue = modelNode.value();

    if (value.arrayItem) {
      var modelArray = modelNode.toJson();

      var transformed = modelArray.map(function (item) {
        return mapComponents(dependencies, componentName, item);
      });

      var transformedNode = JsonTree(transformed);
      var modelNodeParent = modelNode.getParent();

      if (modelNodeValue.propertyName) {
        var transformedNodeValue = transformedNode.value();
        transformedNodeValue.propertyName = modelNodeValue.propertyName;
        transformedNode.value(transformedNodeValue);
      }

      modelNodeParent.replaceChild(transformedNode, modelNode);
    } else {
      throw new Error('Non arrayitem not implemented yet');
    }
  });

  model = modelTree.toJson();

  if (transform) model = transformMapper(model, transform);

  return model;
};

module.exports = mapComponents;

},{"1tree-json":16,"1tree-schema":24,"mojule-transform":176,"mojule-utils":178}],225:[function(require,module,exports){
'use strict';

var Tree = require('1tree');
var nodeToModel = require('./defaultNodeToModel');

var defaultOptions = {
  depth: 0,
  createNode: Tree.createRoot,
  alwaysRenderChildren: false,
  nodeToModel: nodeToModel
};

var nodeToComposerNode = function nodeToComposerNode(node, options) {
  options = Object.assign({}, defaultOptions, options);

  var _options = options,
      depth = _options.depth,
      createNode = _options.createNode,
      nodeToModel = _options.nodeToModel,
      alwaysRenderChildren = _options.alwaysRenderChildren;


  var model = nodeToModel(node, { depth: depth });

  var value = {
    name: 'composer-node',
    model: model
  };

  var componentNode = createNode(value);

  var shouldRenderChildren = alwaysRenderChildren || !model.isChildrenCollapsed;

  if (shouldRenderChildren) {
    var children = node.getChildren();

    children.forEach(function (childNode) {
      var childOptions = Object.assign({}, options, {
        depth: depth + 1
      });

      var componentChildNode = nodeToComposerNode(childNode, childOptions);

      componentNode.append(componentChildNode);
    });
  }

  return componentNode;
};

module.exports = nodeToComposerNode;

},{"./defaultNodeToModel":226,"1tree":77}],226:[function(require,module,exports){
'use strict';

var _require = require('mojule-utils'),
    escapeHtml = _require.escapeHtml;

var defaultOptions = {
  depth: 0
};

var nodeToModel = function nodeToModel(node, options) {
  options = Object.assign({}, defaultOptions, options);

  var _options = options,
      depth = _options.depth;


  var value = node.value();
  var children = node.getChildren();

  var id = node.id();
  var name = value.name || '';
  var treeType = '1tree';
  var nodeType = node.nodeType();
  var title = depth + ': ' + name + ' ' + nodeType + ' [ ' + children.length + ' ]';
  var isEmpty = node.isEmpty();

  var isCollapsed = node.meta('isCollapsed');

  isCollapsed = typeof isCollapsed === 'boolean' ? isCollapsed : depth > 0;

  var isChildrenCollapsed = isCollapsed || !!node.meta('isChildrenCollapsed');

  var preview = escapeHtml(JSON.stringify(value));
  var childrenTitle = depth + ': children';

  var model = {
    id: id, title: title, treeType: treeType, nodeType: nodeType, depth: depth, isEmpty: isEmpty, isCollapsed: isCollapsed,
    isChildrenCollapsed: isChildrenCollapsed, preview: preview, childrenTitle: childrenTitle
  };

  return model;
};

module.exports = nodeToModel;

},{"mojule-utils":178}],227:[function(require,module,exports){
'use strict';

var Tree = require('1tree');
var nodeToModel = require('./defaultNodeToModel');
var nodeToComposerNode = require('./defaultNodeToComposerNode');
var ComponentRenderNode = require('../components/component-tree/renderNode');

var defaultOptions = {
  depth: 0,
  createNode: Tree.createRoot,
  nodeToModel: nodeToModel,
  nodeToComposerNode: nodeToComposerNode
};

var RenderNode = function RenderNode(dependencies) {
  var componentRenderNode = ComponentRenderNode(dependencies);

  var renderNode = function renderNode(node, options) {
    options = Object.assign({}, defaultOptions, options);

    var _options = options,
        nodeToModel = _options.nodeToModel,
        nodeToComposerNode = _options.nodeToComposerNode,
        depth = _options.depth,
        createNode = _options.createNode;


    var toComposerNodeOptions = { depth: depth, createNode: createNode, nodeToModel: nodeToModel };
    var composerNode = nodeToComposerNode(node, toComposerNodeOptions);
    var componentNode = componentRenderNode(composerNode);

    return componentNode;
  };

  return renderNode;
};

module.exports = RenderNode;

},{"../components/component-tree/renderNode":223,"./defaultNodeToComposerNode":225,"./defaultNodeToModel":226,"1tree":77}],228:[function(require,module,exports){
'use strict';

'use strict';

var _require = require('mojule-utils'),
    escapeHtml = _require.escapeHtml;

var defaultOptions = {
  depth: 0
};

var groupToModel = function groupToModel(node, options) {
  var depth = options.depth;


  var value = node.value();
  var id = node.id();
  var treeType = '1tree';
  var nodeType = node.nodeType();
  var title = value.name || '';

  var isFirstChild = false;
  if (depth === 1) {
    var parentNode = node.getParent();
    var parentFirstChild = parentNode.firstChild();

    if (parentFirstChild) {
      isFirstChild = id === parentFirstChild.id();
    }
  }

  var isCollapsed = node.meta('isCollapsed');

  /*
    unless the user has collapsed the node, the first child at depth 1 is
    always expanded
  */
  if (typeof isCollapsed !== 'boolean') {
    isCollapsed = depth > 0 && !isFirstChild;
  }

  var model = {
    id: id, title: title, treeType: treeType, nodeType: nodeType, depth: depth, isCollapsed: isCollapsed
  };

  return model;
};

var buttonToModel = function buttonToModel(node, options) {
  var depth = options.depth;


  var value = node.value();
  var id = node.id();
  var treeType = '1tree';
  var nodeType = node.nodeType();
  var title = value.name || '';

  var model = {
    id: id, title: title, treeType: treeType, nodeType: nodeType, depth: depth
  };

  return model;
};

var nodeTypeMap = {
  'toolbar-group': groupToModel,
  'toolbar-button': buttonToModel
};

var nodeToModel = function nodeToModel(node, options) {
  options = Object.assign({}, defaultOptions, options);

  var nodeType = node.nodeType();

  var mapper = nodeTypeMap['toolbar-group'];

  if (typeof mapper !== 'function') throw new Error('Unexpected nodeType: ' + nodeType);

  return mapper(node, options);
};

module.exports = nodeToModel;

},{"mojule-utils":178}],229:[function(require,module,exports){
'use strict';

var Tree = require('../trees/toolbar-tree');
var nodeToModel = require('./defaultNodeToModel');

var defaultOptions = {
  depth: 0,
  createNode: Tree.createRoot,
  alwaysRenderChildren: false,
  nodeToModel: nodeToModel
};

var nodeToComposerNode = function nodeToComposerNode(node, options) {
  options = Object.assign({}, defaultOptions, options);

  var _options = options,
      depth = _options.depth,
      createNode = _options.createNode,
      nodeToModel = _options.nodeToModel,
      alwaysRenderChildren = _options.alwaysRenderChildren;


  var model = nodeToModel(node, { depth: depth });

  var nodeType = node.nodeType();

  var value = {
    name: nodeType,
    model: model
  };

  var componentNode = createNode(value);

  var shouldRenderChildren = alwaysRenderChildren || !model.isChildrenCollapsed;

  if (shouldRenderChildren) {
    var children = node.getChildren();

    children.forEach(function (childNode) {
      var childOptions = Object.assign({}, options, {
        depth: depth + 1
      });

      var componentChildNode = nodeToComposerNode(childNode, childOptions);

      componentNode.append(componentChildNode);
    });
  }

  return componentNode;
};

module.exports = nodeToComposerNode;

},{"../trees/toolbar-tree":232,"./defaultNodeToModel":228}],230:[function(require,module,exports){
'use strict';

var Tree = require('../trees/toolbar-tree');
var nodeToModel = require('./defaultNodeToModel');
var nodeToViewNode = require('./defaultNodeToToolbarNode');
var ComponentRenderNode = require('../components/component-tree/renderNode');

var defaultOptions = {
  depth: 0,
  createNode: Tree.createRoot,
  nodeToModel: nodeToModel,
  nodeToViewNode: nodeToViewNode
};

var RenderNode = function RenderNode(dependencies) {
  var componentRenderNode = ComponentRenderNode(dependencies);

  var renderNode = function renderNode(node, options) {
    options = Object.assign({}, defaultOptions, options);

    var _options = options,
        nodeToModel = _options.nodeToModel,
        nodeToComposerNode = _options.nodeToComposerNode,
        depth = _options.depth,
        createNode = _options.createNode;


    var toComposerNodeOptions = { depth: depth, createNode: createNode, nodeToModel: nodeToModel };
    var composerNode = nodeToViewNode(node, toComposerNodeOptions);
    var componentNode = componentRenderNode(composerNode);

    return componentNode;
  };

  return renderNode;
};

module.exports = RenderNode;

},{"../components/component-tree/renderNode":223,"../trees/toolbar-tree":232,"./defaultNodeToModel":228,"./defaultNodeToToolbarNode":229}],231:[function(require,module,exports){
'use strict';

var Templating = require('mojule-templating');
var Validator = require('mtype-tv4');
var componentTransformMapper = require('../components/componentTransformMapper');

var ensureModel = function ensureModel(validator, model, name) {
  var schemaNames = validator.getSchemaUris();

  if (!schemaNames.includes(name)) return;

  var result = validator.validateMultiple(model, name);

  if (result.valid) return;

  var message = 'Template model validation failed for ' + name + ': ' + JSON.stringify(result.errors);
  throw new Error(message);
};

var Templates = function Templates(dependencies) {
  var components = dependencies.components,
      templates = dependencies.templates,
      defaultModels = dependencies.defaultModels,
      schemas = dependencies.schemas;


  var templating = Templating(templates);
  var validator = Validator(schemas);

  var renderComponent = function renderComponent(name, model) {
    var templateModel = Object.assign({}, defaultModels[name] || {}, model);

    ensureModel(validator, templateModel, name);

    var viewModel = componentTransformMapper(dependencies, name, templateModel);

    return templating(name, viewModel);
  };

  //TODO I believe that this doesn't need to use callbacks anymore
  var renderTemplate = function renderTemplate(name, model, callback) {
    try {
      var documentModel = Object.assign({}, defaultModels.document, model);

      if (name !== 'document') {
        var body = renderComponent(name, model).stringify();

        Object.assign(documentModel, { body: body });
      }

      ensureModel(validator, documentModel, 'document');

      var viewModel = componentTransformMapper(dependencies, 'document', documentModel);

      var dom = templating('document', viewModel);

      callback(null, dom);
    } catch (e) {
      callback(e);
    }
  };

  return { renderTemplate: renderTemplate, renderComponent: renderComponent };
};

module.exports = Templates;

},{"../components/componentTransformMapper":224,"mojule-templating":174,"mtype-tv4":188}],232:[function(require,module,exports){
'use strict';

var TreeFactory = require('1tree-factory');

var empty = ['toolbar-button'];

var isEmptyPlugin = function isEmptyPlugin(fn) {
  var isEmpty = function isEmpty(fn, node) {
    var nodeType = fn.nodeType(fn, node);

    return empty.includes(nodeType);
  };

  isEmpty.def = fn.isEmpty.def;

  return Object.assign(fn, { isEmpty: isEmpty });
};

var ToolbarTree = TreeFactory(isEmptyPlugin);

module.exports = ToolbarTree;

},{"1tree-factory":3}]},{},[218])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
